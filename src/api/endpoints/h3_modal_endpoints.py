# src/api/endpoints/h3_modal_endpoints.py
"""
üóÇÔ∏è H3 Modal API Endpoints
RESTful API –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
"""

from fastapi import APIRouter, HTTPException, Query, Depends, Path
from pydantic import BaseModel, Field
from typing import Dict, Any, List, Optional, Union
import h3
import logging
from datetime import datetime

# –Ü–º–ø–æ—Ä—Ç database service
try:
    from ..services.database_service import get_database_service, DatabaseService
    DATABASE_SERVICE_AVAILABLE = True
except ImportError:
    DATABASE_SERVICE_AVAILABLE = False
    # Fallback —è–∫—â–æ database service –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
    class DatabaseService:
        """Placeholder class for type hints when database service is unavailable"""
        def get_h3_analytics(self, h3_index: str, resolution: int = 10) -> Dict[str, Any]:
            return {"error": "Database service not available"}
        
        def get_poi_in_hexagon(self, h3_index: str, resolution: int = 10, include_neighbors: bool = False) -> List[Dict[str, Any]]:
            return []
        
        def get_competitive_analysis(self, h3_index: str, radius_rings: int = 2, resolution: int = 10) -> Dict[str, Any]:
            return {"error": "Database service not available", "competitors": []}
    
    def get_database_service():
        return DatabaseService()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
router = APIRouter(
    prefix="/api/v1/hexagon-details",
    tags=["H3 Hexagon Analysis"]
)

# ===============================================
# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á –ê–ù–ê–õ–Ü–ó–£
# ===============================================

ANALYSIS_CONFIGS = {
    "pedestrian_competition": {
        "name": "–ü—ñ—à–æ—Ö—ñ–¥–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è",
        "description": "–ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ –≤ –ø—ñ—à–æ—Ö—ñ–¥–Ω—ñ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ (~500–º)",
        "target_area_km2": 0.5,
        "max_rings": 3,
        "focus": ["competitors", "retail"],
        "weight_multiplier": 1.5
    },
    "transport_accessibility": {
        "name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å",
        "description": "–ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≥—Ä–æ–º–∞–¥—Å—å–∫–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º (~2–∫–º)",
        "target_area_km2": 2.0,
        "max_rings": 5,
        "focus": ["transport", "infrastructure"],
        "weight_multiplier": 1.2
    },
    "market_overview": {
        "name": "–û–≥–ª—è–¥ —Ä–∏–Ω–∫—É",
        "description": "–®–∏—Ä–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (~5–∫–º)",
        "target_area_km2": 5.0,
        "max_rings": 7,
        "focus": ["all"],
        "weight_multiplier": 1.0
    },
    "site_selection": {
        "name": "–í–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó",
        "description": "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –∑–æ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É (~1.5–∫–º)",
        "target_area_km2": 1.5,
        "max_rings": 4,
        "focus": ["demographics", "competitors"],
        "weight_multiplier": 1.3
    },
    "custom": {
        "name": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π",
        "description": "–ê–Ω–∞–ª—ñ–∑ –∑ –≤–∫–∞–∑–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ä–∞–¥—ñ—É—Å–æ–º",
        "target_area_km2": 1.0,
        "max_rings": 10,
        "focus": ["all"],
        "weight_multiplier": 1.0
    }
}

# ===============================================
# H3 –ú–ê–¢–ï–ú–ê–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á
# ===============================================

def calculate_optimal_rings(resolution: int, target_area_km2: float) -> int:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–ª–µ—Ü—å –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ—ó –ø–ª–æ—â—ñ"""
    try:
        if resolution < 7 or resolution > 10:
            raise ValueError(f"Resolution {resolution} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è (7-10)")
        
        # –ü–ª–æ—â–∞ –æ–¥–Ω–æ–≥–æ –≥–µ–∫—Å–∞–≥–æ–Ω–∞ –¥–ª—è resolution
        single_hex_area = h3.average_hexagon_area(resolution, unit='km^2')
        
        if target_area_km2 <= single_hex_area:
            return 0  # –¢—ñ–ª—å–∫–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≥–µ–∫—Å–∞–≥–æ–Ω
        
        # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –≤ k-ring: 1 + 3*k*(k+1)
        for rings in range(1, 15):
            total_hexagons = 1 + 3 * rings * (rings + 1)
            total_area = total_hexagons * single_hex_area
            
            if total_area >= target_area_km2:
                return rings
        
        return 10  # –ú–∞–∫—Å–∏–º—É–º 10 –∫—ñ–ª–µ—Ü—å
        
    except Exception as e:
        logger.error(f"Error calculating optimal rings: {e}")
        return 2  # Fallback

def get_area_coverage(resolution: int, rings: int) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–ª–æ—â—ñ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–ª–µ—Ü—å"""
    try:
        single_hex_area = h3.average_hexagon_area(resolution, unit='km^2')
        total_hexagons = 1 + 3 * rings * (rings + 1)
        return total_hexagons * single_hex_area
    except Exception:
        return 0.0

# ===============================================
# MAIN API ENDPOINTS
# ===============================================

@router.get("/details/{h3_index}")
async def get_hexagon_details(
    h3_index: str = Path(..., description="H3 —ñ–Ω–¥–µ–∫—Å –≥–µ–∫—Å–∞–≥–æ–Ω–∞"),
    resolution: int = Query(..., ge=7, le=10, description="H3 resolution (7-10)"),
    analysis_type: str = Query("pedestrian_competition", description="–¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É"),
    custom_rings: Optional[int] = Query(None, ge=1, le=10, description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–ª–µ—Ü—å –¥–ª—è custom –∞–Ω–∞–ª—ñ–∑—É"),
    db: DatabaseService = Depends(get_database_service)
) -> Dict[str, Any]:
    """üéØ –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ H3 –≥–µ–∫—Å–∞–≥–æ–Ω–∞ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–æ–≤–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è H3 —ñ–Ω–¥–µ–∫—Å—É
    if not h3.is_valid_cell(h3_index):
        raise HTTPException(status_code=400, detail=f"Invalid H3 index: {h3_index}")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∞–Ω–∞–ª—ñ–∑—É
    if analysis_type not in ANALYSIS_CONFIGS:
        raise HTTPException(status_code=400, detail=f"Unknown analysis type: {analysis_type}")
    
    config = ANALYSIS_CONFIGS[analysis_type].copy()
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ custom –∫—ñ–ª—å—Ü—è
    if analysis_type == "custom" and custom_rings:
        config["max_rings"] = custom_rings
        config["target_area_km2"] = get_area_coverage(resolution, custom_rings)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–ª–µ—Ü—å
    optimal_rings = calculate_optimal_rings(resolution, config["target_area_km2"])
    actual_rings = min(optimal_rings, config["max_rings"])
    
    # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ª–æ–∫–∞—Ü—ñ—é
    lat, lon = h3.cell_to_latlng(h3_index)
    area_km2 = h3.cell_area(h3_index, unit='km^2')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ database service
    analytics_data = db.get_h3_analytics(h3_index, resolution)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ POI –¥–∞–Ω—ñ
    poi_data = db.get_poi_in_hexagon(h3_index, resolution, include_neighbors=True)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∏—Ç—Ç—è —Å—É—Å—ñ–¥–Ω—ñ—Ö –æ–±–ª–∞—Å—Ç–µ–π
    neighbor_coverage = {
        "rings": actual_rings,
        "hexagon_count": 1 + 3 * actual_rings * (actual_rings + 1),
        "area_km2": round(get_area_coverage(resolution, actual_rings), 3),
        "radius_estimate_m": round((get_area_coverage(resolution, actual_rings) / 3.14159) ** 0.5 * 1000, 0)
    }
    
    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    result = {
        "location_info": {
            "h3_index": h3_index,
            "resolution": resolution,
            "center_lat": lat,
            "center_lon": lon,
            "area_km2": round(area_km2, 6)
        },
        "analysis_config": {
            "type": analysis_type,
            "name": config["name"],
            "description": config["description"],
            "rings_used": actual_rings
        },
        "metrics": analytics_data.get("density_metrics", {}),
        "poi_details": {
            "total_found": len(poi_data),
            "summary": analytics_data.get("poi_stats", {}),
            "top_pois": poi_data[:10]  # –¢–æ–ø 10 POI
        },
        "influence_analysis": analytics_data.get("influence_metrics", {}),
        "neighbor_coverage": neighbor_coverage,
        "available_analyses": list(ANALYSIS_CONFIGS.keys()),
        "database_status": "available" if DATABASE_SERVICE_AVAILABLE else "mock_data",
        "generated_at": datetime.now().isoformat()
    }
    
    return result

@router.get("/poi-in-hexagon/{h3_index}")
async def get_poi_in_hexagon(
    h3_index: str = Path(..., description="H3 —ñ–Ω–¥–µ–∫—Å –≥–µ–∫—Å–∞–≥–æ–Ω–∞"),
    resolution: int = Query(..., ge=7, le=10, description="H3 resolution (7-10)"),
    include_neighbors: int = Query(0, ge=0, le=3, description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–ª–µ—Ü—å —Å—É—Å—ñ–¥–Ω—ñ—Ö –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤"),
    poi_types: Optional[str] = Query(None, description="–§—ñ–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞—Ö POI (—á–µ—Ä–µ–∑ –∫–æ–º—É)"),
    db: DatabaseService = Depends(get_database_service)
) -> Dict[str, Any]:
    """üè™ –û—Ç—Ä–∏–º–∞–Ω–Ω—è POI –≤ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ —Ç–∞ —Å—É—Å—ñ–¥–Ω—ñ—Ö –æ–±–ª–∞—Å—Ç—è—Ö"""
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è H3 —ñ–Ω–¥–µ–∫—Å—É
    if not h3.is_valid_cell(h3_index):
        raise HTTPException(status_code=400, detail=f"Invalid H3 index: {h3_index}")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ POI –¥–∞–Ω—ñ
    poi_data = db.get_poi_in_hexagon(
        h3_index=h3_index,
        resolution=resolution,
        include_neighbors=(include_neighbors > 0)
    )
    
    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Ç–∏–ø–∞—Ö —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
    if poi_types:
        allowed_types = [t.strip().lower() for t in poi_types.split(',')]
        poi_data = [
            poi for poi in poi_data 
            if poi.get('functional_group', '').lower() in allowed_types
            or poi.get('primary_category', '').lower() in allowed_types
        ]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_poi = len(poi_data)
    by_type = {}
    by_brand = {}
    
    for poi in poi_data:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö
        poi_type = poi.get('functional_group', 'unknown')
        by_type[poi_type] = by_type.get(poi_type, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞—Ö
        brand = poi.get('brand', 'unknown')
        if brand and brand != 'unknown':
            by_brand[brand] = by_brand.get(brand, 0) + 1
    
    # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ª–æ–∫–∞—Ü—ñ—é
    lat, lon = h3.cell_to_latlng(h3_index)
    
    return {
        "location_info": {
            "h3_index": h3_index,
            "resolution": resolution,
            "center_lat": lat,
            "center_lon": lon,
            "include_neighbors": include_neighbors
        },
        "poi_summary": {
            "total_found": total_poi,
            "by_type": by_type,
            "by_brand": dict(sorted(by_brand.items(), key=lambda x: x[1], reverse=True)[:10]),
            "unique_brands": len(by_brand),
            "competitors": len([poi for poi in poi_data if poi.get('functional_group') == 'competitor'])
        },
        "poi_details": poi_data,
        "search_parameters": {
            "resolution": resolution,
            "include_neighbors": include_neighbors,
            "poi_types_filter": poi_types,
            "database_status": "available" if DATABASE_SERVICE_AVAILABLE else "mock_data",
            "search_timestamp": datetime.now().isoformat()
        }
    }

@router.get("/competitive-analysis/{h3_index}")
async def get_competitive_analysis(
    h3_index: str = Path(..., description="H3 —ñ–Ω–¥–µ–∫—Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≥–µ–∫—Å–∞–≥–æ–Ω–∞"),
    resolution: int = Query(..., ge=7, le=10, description="H3 resolution (7-10)"),
    radius_rings: int = Query(2, ge=1, le=5, description="–†–∞–¥—ñ—É—Å –≤ –∫—ñ–ª—å—Ü—è—Ö –Ω–∞–≤–∫–æ–ª–æ —Ü–µ–Ω—Ç—Ä—É"),
    competitor_types: Optional[str] = Query(None, description="–¢–∏–ø–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"),
    db: DatabaseService = Depends(get_database_service)
) -> Dict[str, Any]:
    """ü•ä –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –Ω–∞–≤–∫–æ–ª–æ –ª–æ–∫–∞—Ü—ñ—ó"""
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è H3 —ñ–Ω–¥–µ–∫—Å—É
    if not h3.is_valid_cell(h3_index):
        raise HTTPException(status_code=400, detail=f"Invalid H3 index: {h3_index}")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
    competitive_data = db.get_competitive_analysis(
        h3_index=h3_index,
        radius_rings=radius_rings,
        resolution=resolution
    )
    
    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
    if competitor_types:
        allowed_types = [t.strip().lower() for t in competitor_types.split(',')]
        competitors = competitive_data.get("competitors", [])
        filtered_competitors = [
            comp for comp in competitors
            if comp.get('type', '').lower() in allowed_types
        ]
        competitive_data["competitors"] = filtered_competitors
        competitive_data["competitors_found"] = len(filtered_competitors)
    
    # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ª–æ–∫–∞—Ü—ñ—é
    lat, lon = h3.cell_to_latlng(h3_index)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
    competitors = competitive_data.get("competitors", [])
    
    # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –≤—ñ–¥—Å—Ç–∞–Ω—è—Ö
    distance_distribution = {}
    for comp in competitors:
        distance = comp.get("distance_rings", 0)
        distance_distribution[f"ring_{distance}"] = distance_distribution.get(f"ring_{distance}", 0) + 1
    
    return {
        "location_info": {
            "h3_index": h3_index,
            "resolution": resolution,
            "center_lat": lat,
            "center_lon": lon,
            "analysis_radius_rings": radius_rings
        },
        "competitive_analysis": competitive_data,
        "distance_analysis": {
            "distribution_by_rings": distance_distribution,
            "average_distance": round(
                sum(comp.get("distance_rings", 0) for comp in competitors) / max(len(competitors), 1), 2
            ),
            "closest_competitor": min(competitors, key=lambda x: x.get("distance_rings", 999)) if competitors else None
        },
        "market_insights": {
            "saturation_level": "high" if len(competitors) > 10 else "medium" if len(competitors) > 5 else "low",
            "opportunity_assessment": competitive_data.get("recommendations", {}).get("market_opportunity", "unknown"),
            "key_risks": competitive_data.get("recommendations", {}).get("risk_factors", [])
        },
        "analysis_metadata": {
            "competitor_types_filter": competitor_types,
            "database_status": "available" if DATABASE_SERVICE_AVAILABLE else "mock_data",
            "search_timestamp": datetime.now().isoformat(),
            "data_quality": "real_data" if competitors else "no_data"
        }
    }

@router.get("/analysis-preview/{h3_index}")
async def get_analysis_preview(
    h3_index: str = Path(..., description="H3 —ñ–Ω–¥–µ–∫—Å –≥–µ–∫—Å–∞–≥–æ–Ω–∞"),
    resolution: int = Query(..., ge=7, le=10, description="H3 resolution (7-10)")
) -> Dict[str, Any]:
    """üìä –®–≤–∏–¥–∫–∏–π preview –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤ –¥–ª—è –≥–µ–∫—Å–∞–≥–æ–Ω–∞"""
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è H3 —ñ–Ω–¥–µ–∫—Å—É
    if not h3.is_valid_cell(h3_index):
        raise HTTPException(status_code=400, detail=f"Invalid H3 index: {h3_index}")
    
    # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    lat, lon = h3.cell_to_latlng(h3_index)
    area_km2 = h3.cell_area(h3_index, unit='km^2')
    
    # –§–æ—Ä–º—É—î–º–æ preview –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤
    available_analyses = []
    for analysis_type, config in ANALYSIS_CONFIGS.items():
        rings = calculate_optimal_rings(resolution, config["target_area_km2"])
        actual_rings = min(rings, config["max_rings"])
        
        analysis_info = {
            "type": analysis_type,
            "name": config["name"],
            "description": config["description"],
            "estimated_rings": actual_rings,
            "estimated_area_km2": round(get_area_coverage(resolution, actual_rings), 2),
            "focus_areas": config["focus"],
            "endpoint": f"/api/v1/hexagon-details/details/{h3_index}?resolution={resolution}&analysis_type={analysis_type}"
        }
        available_analyses.append(analysis_info)
    
    return {
        "location_info": {
            "h3_index": h3_index,
            "resolution": resolution,
            "center_lat": lat,
            "center_lon": lon,
            "single_hex_area_km2": round(area_km2, 6)
        },
        "available_analyses": available_analyses,
        "quick_actions": {
            "poi_search": f"/api/v1/hexagon-details/poi-in-hexagon/{h3_index}?resolution={resolution}",
            "competitive_analysis": f"/api/v1/hexagon-details/competitive-analysis/{h3_index}?resolution={resolution}",
            "coverage_calculator": f"/api/v1/hexagon-details/coverage-calculator?resolution={resolution}&rings=2"
        },
        "system_status": {
            "database_service": "available" if DATABASE_SERVICE_AVAILABLE else "fallback",
            "h3_library": "v4.3.0",
            "data_source": "real_postgresql" if DATABASE_SERVICE_AVAILABLE else "mock_data"
        },
        "generated_at": datetime.now().isoformat()
    }

# ===============================================
# UTILITY ENDPOINTS
# ===============================================

@router.get("/coverage-calculator")
async def calculate_coverage(
    resolution: int = Query(..., ge=7, le=10, description="H3 resolution (7-10)"),
    rings: int = Query(..., ge=0, le=10, description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–ª–µ—Ü—å –Ω–∞–≤–∫–æ–ª–æ —Ü–µ–Ω—Ç—Ä—É")
) -> Dict[str, Any]:
    """üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∫—Ä–∏—Ç—Ç—è –ø–ª–æ—â—ñ –¥–ª—è H3 —Ä–µ–∑–æ–ª—é—Ü—ñ—ó —Ç–∞ –∫—ñ–ª–µ—Ü—å"""
    
    try:
        # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ H3
        single_hex_area = h3.average_hexagon_area(resolution, unit='km^2')
        total_hexagons = 1 + 3 * rings * (rings + 1) if rings > 0 else 1
        total_area = total_hexagons * single_hex_area
        
        # –û—Ü—ñ–Ω–∫–∞ —Ä–∞–¥—ñ—É—Å—É
        radius_km = (total_area / 3.14159) ** 0.5
        radius_m = radius_km * 1000
        
        # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫—ñ–ª—å—Ü—è—Ö
        ring_breakdown = []
        for ring in range(rings + 1):
            if ring == 0:
                hexagons_in_ring = 1
            else:
                hexagons_in_ring = 6 * ring
            
            ring_breakdown.append({
                "ring": ring,
                "hexagons": hexagons_in_ring,
                "area_km2": round(hexagons_in_ring * single_hex_area, 4)
            })
        
        return {
            "input_parameters": {
                "resolution": resolution,
                "rings": rings
            },
            "coverage_results": {
                "single_hex_area_km2": round(single_hex_area, 6),
                "total_hexagons": total_hexagons,
                "total_area_km2": round(total_area, 4),
                "radius_estimate_km": round(radius_km, 2),
                "radius_estimate_m": round(radius_m, 0)
            },
            "ring_breakdown": ring_breakdown,
            "comparison": {
                "pedestrian_distance": "~500m" if radius_m <= 600 else "beyond walking",
                "cycling_distance": "~2km" if radius_km <= 3 else "beyond cycling",
                "driving_distance": "~5km" if radius_km <= 7 else "extended driving"
            },
            "calculated_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Error in coverage calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Calculation error: {str(e)}")

@router.get("/health")
async def health_check() -> Dict[str, Any]:
    """üè• Health check –¥–ª—è H3 Modal API"""
    
    # –¢–µ—Å—Ç H3 —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    test_h3_index = "8a1fb46622d7fff"
    h3_working = False
    
    try:
        if h3.is_valid_cell(test_h3_index):
            lat, lon = h3.cell_to_latlng(test_h3_index)
            h3_working = True
    except Exception:
        h3_working = False
    
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "components": {
            "h3_library": {
                "status": "operational" if h3_working else "error",
                "version": "4.3.0",
                "test_passed": h3_working
            },
            "database_service": {
                "status": "available" if DATABASE_SERVICE_AVAILABLE else "fallback",
                "data_source": "postgresql" if DATABASE_SERVICE_AVAILABLE else "mock"
            },
            "endpoints": {
                "details": "operational",
                "poi_search": "operational",
                "competitive_analysis": "operational",
                "coverage_calculator": "operational"
            }
        },
        "capabilities": {
            "h3_mathematics": True,
            "real_data_integration": DATABASE_SERVICE_AVAILABLE,
            "mock_data_fallback": True,
            "competitive_analysis": True,
            "poi_analysis": True
        }
    }

# ===============================================
# ROUTER EXPORT
# ===============================================

# –ï–∫—Å–ø–æ—Ä—Ç router –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ main —Ñ–∞–π–ª–∞—Ö
__all__ = ["router"]