"""
OSM Tag Parser
–ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–ª–∞–¥–Ω–∏—Ö JSON —Ç–µ–≥—ñ–≤ –∑ osm_raw —Ç–∞–±–ª–∏—Ü—ñ
"""

import json
import logging
from typing import Dict, Any, Optional, List
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class ParsedTags:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥—É OSM —Ç–µ–≥—ñ–≤"""
    tags: Dict[str, str]
    name: Optional[str] = None
    brand: Optional[str] = None
    shop_type: Optional[str] = None
    amenity_type: Optional[str] = None
    highway_type: Optional[str] = None
    raw_json: Optional[Dict] = None


class TagParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö OSM —Ç–µ–≥—ñ–≤"""
    
    def __init__(self):
        self.stats = {
            "total_parsed": 0,
            "parse_errors": 0,
            "empty_tags": 0
        }
    
    def parse_tags(self, tags_json: Any) -> ParsedTags:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ç–µ–≥—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
        
        Args:
            tags_json: JSON –æ–±'—î–∫—Ç –∞–±–æ —Ä—è–¥–æ–∫ –∑ —Ç–µ–≥–∞–º–∏
            
        Returns:
            ParsedTags –æ–±'—î–∫—Ç –∑ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–º–∏ —Ç–µ–≥–∞–º–∏
        """
        self.stats["total_parsed"] += 1
        
        if not tags_json:
            self.stats["empty_tags"] += 1
            return ParsedTags(tags={})
        
        try:
            # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ —Ç–µ–≥—ñ–≤
            if isinstance(tags_json, dict):
                # –í–∂–µ dict
                tags_dict = tags_json
            elif isinstance(tags_json, str):
                # JSON string
                tags_dict = json.loads(tags_json)
            else:
                # JSONB from PostgreSQL
                tags_dict = dict(tags_json)
            
            # –û—Å–æ–±–ª–∏–≤–∏–π –≤–∏–ø–∞–¥–æ–∫ –¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–æ–≥–æ 'tags'
            if 'tags' in tags_dict and isinstance(tags_dict['tags'], str):
                try:
                    # –ü–æ–¥–≤—ñ–π–Ω–∏–π JSON encoding
                    inner_tags = json.loads(tags_dict['tags'])
                    tags_dict.update(inner_tags)
                except:
                    pass
            
            # –í–∏—Ç—è–≥—É—î–º–æ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è
            parsed = ParsedTags(
                tags=tags_dict,
                name=self._extract_name(tags_dict),
                brand=tags_dict.get('brand'),
                shop_type=tags_dict.get('shop'),
                amenity_type=tags_dict.get('amenity'),
                highway_type=tags_dict.get('highway'),
                raw_json=tags_dict
            )
            
            return parsed
            
        except Exception as e:
            self.stats["parse_errors"] += 1
            logger.warning(f"Tag parsing error: {e}")
            return ParsedTags(tags={})
    
    def _extract_name(self, tags: Dict[str, str]) -> Optional[str]:
        """–í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤—É –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–ª—ñ–≤"""
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—ñ–≤ –¥–ª—è –Ω–∞–∑–≤–∏
        name_fields = [
            'name', 'name:uk', 'name:en', 'name:ru',
            'official_name', 'alt_name', 'short_name'
        ]
        
        for field in name_fields:
            if field in tags and tags[field]:
                return tags[field]
        
        return None
    
    def extract_address(self, tags: Dict[str, str]) -> Dict[str, str]:
        """–í–∏—Ç—è–≥—É—î –∞–¥—Ä–µ—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"""
        address_keys = [
            'addr:housenumber', 'addr:street', 'addr:city',
            'addr:postcode', 'addr:district', 'addr:region'
        ]
        
        address = {}
        for key in address_keys:
            if key in tags:
                clean_key = key.replace('addr:', '')
                address[clean_key] = tags[key]
        
        return address
    
    def get_category_from_tags(self, tags: Dict[str, str]) -> tuple[str, str]:
        """
        –í–∏–∑–Ω–∞—á–∞—î primary —Ç–∞ secondary –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ —Ç–µ–≥—ñ–≤
        
        Returns:
            (primary_category, secondary_category)
        """
        # Shop tags
        if 'shop' in tags:
            return 'retail', tags['shop']
        
        # Amenity tags
        if 'amenity' in tags:
            amenity = tags['amenity']
            if amenity in ['restaurant', 'cafe', 'fast_food', 'bar', 'pub']:
                return 'food_service', amenity
            elif amenity in ['pharmacy', 'hospital', 'clinic', 'doctors']:
                return 'healthcare', amenity
            elif amenity in ['school', 'university', 'kindergarten']:
                return 'education', amenity
            elif amenity in ['bank', 'atm']:
                return 'financial', amenity
            elif amenity in ['fuel', 'charging_station']:
                return 'automotive', amenity
            else:
                return 'amenity', amenity
        
        # Transport tags  
        if 'public_transport' in tags:
            return 'transport', tags.get('public_transport', 'stop')
        
        if 'railway' in tags:
            return 'transport', tags['railway']
        
        # Highway tags
        if 'highway' in tags:
            return 'road', tags['highway']
        
        # Building tags
        if 'building' in tags:
            return 'building', tags.get('building', 'yes')
        
        # Landuse tags
        if 'landuse' in tags:
            return 'landuse', tags['landuse']
        
        # Default
        return 'other', 'unclassified'
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥—É"""
        return self.stats.copy()


# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
if __name__ == "__main__":
    parser = TagParser()
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    test_cases = [
        # –ü—Ä–æ—Å—Ç–∏–π dict
        {"shop": "supermarket", "name": "–ê–¢–ë", "brand": "–ê–¢–ë"},
        
        # JSON string
        '{"shop": "convenience", "name": "–°—ñ–ª—å–ø–æ", "addr:city": "–ö–∏—ó–≤"}',
        
        # –í–∫–ª–∞–¥–µ–Ω–∏–π tags (—è–∫ –≤ –ë–î)
        {"tags": '{"amenity": "restaurant", "name": "Pizza Day", "cuisine": "pizza"}'},
        
        # –ü–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ
        None,
        {},
        
        # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        {"public_transport": "platform", "name": "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", "railway": "station"}
    ]
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Tag Parser:\n")
    
    for i, test_data in enumerate(test_cases, 1):
        print(f"–¢–µ—Å—Ç {i}: {test_data}")
        result = parser.parse_tags(test_data)
        print(f"  –ù–∞–∑–≤–∞: {result.name}")
        print(f"  –ë—Ä–µ–Ω–¥: {result.brand}")
        print(f"  –¢–∏–ø shop: {result.shop_type}")
        print(f"  –¢–∏–ø amenity: {result.amenity_type}")
        
        if result.tags:
            categories = parser.get_category_from_tags(result.tags)
            print(f"  –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: {categories}")
        
        if result.tags and any(k.startswith('addr:') for k in result.tags):
            address = parser.extract_address(result.tags)
            print(f"  –ê–¥—Ä–µ—Å–∞: {address}")
        
        print()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {parser.get_stats()}")