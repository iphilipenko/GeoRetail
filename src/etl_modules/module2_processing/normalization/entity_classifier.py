#!/usr/bin/env python3
"""
Entity Classifier –¥–ª—è process_entities_v3.py
–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Å—É—Ç–Ω–æ—Å—Ç—ñ –∑ OSM —Ç–µ–≥—ñ–≤: poi | transport_node | road_segment
"""

import logging
from typing import Dict, Optional, Set

logger = logging.getLogger(__name__)

class EntityClassifier:
    """
    –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∏–ø—ñ–≤ —Å—É—Ç–Ω–æ—Å—Ç–µ–π –∑ OSM –¥–∞–Ω–∏—Ö
    """
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é —Ç–∏–ø—ñ–≤"""
        
        # Transport node —Ç–∏–ø–∏
        self.TRANSPORT_HIGHWAY_TYPES = {
            'bus_stop'
        }
        
        self.TRANSPORT_PUBLIC_TRANSPORT_TYPES = {
            'platform',
            'stop_position',
            'station'
        }
        
        self.TRANSPORT_RAILWAY_TYPES = {
            'station',
            'halt',
            'subway_entrance',
            'tram_stop'
        }
        
        self.TRANSPORT_AMENITY_TYPES = {
            'bus_station',
            'ferry_terminal',
            'taxi'
        }
        
        # Road segment —Ç–∏–ø–∏
        self.ROAD_HIGHWAY_TYPES = {
            'motorway',
            'trunk', 
            'primary',
            'secondary',
            'tertiary',
            'residential',
            'service',
            'unclassified',
            'track'
        }
        
        # POI —Ç–∏–ø–∏ (–∑ —ñ—Å–Ω—É—é—á–æ–≥–æ V2)
        self.POI_SHOP_REQUIRED = True  # shop=* –∑–∞–≤–∂–¥–∏ POI
        self.POI_AMENITY_TYPES = {
            'restaurant', 'cafe', 'fast_food', 'bar', 'pub',
            'pharmacy', 'hospital', 'clinic', 'doctors',
            'school', 'university', 'kindergarten',
            'bank', 'atm',
            'fuel', 'charging_station',
            'post_office', 'post_box'
        }
        
        logger.info("üè∑Ô∏è EntityClassifier —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    def classify_entity_type(self, osm_tags: Dict[str, str]) -> Optional[str]:
        """
        –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó entity type
        
        Args:
            osm_tags: –°–ª–æ–≤–Ω–∏–∫ OSM —Ç–µ–≥—ñ–≤ {"highway": "bus_stop", "name": "–ó—É–ø–∏–Ω–∫–∞"}
            
        Returns:
            'poi' | 'transport_node' | 'road_segment' | None
        """
        if not osm_tags or not isinstance(osm_tags, dict):
            return None
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Transport Nodes (–Ω–∞–π–≤–∏—â–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ—Å—Ç—å)
        if self._is_transport_node(osm_tags):
            return 'transport_node'
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Road Segments  
        if self._is_road_segment(osm_tags):
            return 'road_segment'
        
        # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ POI (–Ω–∞–π–Ω–∏–∂—á–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ—Å—Ç—å)
        if self._is_poi(osm_tags):
            return 'poi'
        
        # 4. –ù–µ –∫–ª–∞—Å–∏—Ñ—ñ–∫—É—î—Ç—å—Å—è
        return None
    
    def _is_transport_node(self, tags: Dict[str, str]) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ü–µ transport node
        
        Transport node criteria:
        - highway=bus_stop
        - public_transport=platform|stop_position|station  
        - railway=station|halt|subway_entrance|tram_stop
        - amenity=bus_station|ferry_terminal|taxi
        """
        
        # Highway-based transport
        if tags.get('highway') in self.TRANSPORT_HIGHWAY_TYPES:
            return True
        
        # Public transport
        if tags.get('public_transport') in self.TRANSPORT_PUBLIC_TRANSPORT_TYPES:
            return True
            
        # Railway transport
        if tags.get('railway') in self.TRANSPORT_RAILWAY_TYPES:
            return True
            
        # Amenity-based transport  
        if tags.get('amenity') in self.TRANSPORT_AMENITY_TYPES:
            return True
        
        return False
    
    def _is_road_segment(self, tags: Dict[str, str]) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ü–µ road segment
        
        Road segment criteria:
        - highway=motorway|trunk|primary|secondary|tertiary|residential|service|unclassified|track
        - –ù–ï transport node (highway=bus_stop –≤–∏–∫–ª—é—á–µ–Ω–∏–π)
        """
        highway_type = tags.get('highway')
        
        if not highway_type:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ road highway (–Ω–µ transport)
        if highway_type in self.ROAD_HIGHWAY_TYPES:
            return True
        
        return False
    
    def _is_poi(self, tags: Dict[str, str]) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ü–µ POI (Point of Interest)
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É V2 –ª–æ–≥—ñ–∫—É
        
        POI criteria:
        - shop=* (–±—É–¥—å-—è–∫–∏–π shop)
        - amenity=restaurant|cafe|pharmacy|bank|hospital|school|etc
        - office=*
        - tourism=*
        - leisure=*
        """
        
        # –£—Å—ñ shop —Ç–µ–≥–∏ —î POI
        if 'shop' in tags and tags['shop']:
            return True
        
        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ amenity —Ç–∏–ø–∏ —î POI
        if tags.get('amenity') in self.POI_AMENITY_TYPES:
            return True
        
        # Office, tourism, leisure —Ç–∞–∫–æ–∂ POI
        if any(key in tags for key in ['office', 'tourism', 'leisure']):
            if tags.get('office') or tags.get('tourism') or tags.get('leisure'):
                return True
        
        return False
    
    def get_classification_stats(self, osm_tags: Dict[str, str]) -> Dict[str, any]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è debug
        """
        result = {
            'entity_type': self.classify_entity_type(osm_tags),
            'is_transport_node': self._is_transport_node(osm_tags),
            'is_road_segment': self._is_road_segment(osm_tags), 
            'is_poi': self._is_poi(osm_tags),
            'relevant_tags': {}
        }
        
        # –î–æ–¥–∞—î–º–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ç–µ–≥–∏
        relevant_keys = ['highway', 'public_transport', 'railway', 'amenity', 'shop', 'office', 'tourism', 'leisure']
        for key in relevant_keys:
            if key in osm_tags:
                result['relevant_tags'][key] = osm_tags[key]
        
        return result

def main():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Entity Classifier"""
    classifier = EntityClassifier()
    
    # –¢–µ—Å—Ç–æ–≤—ñ –∫–µ–π—Å–∏
    test_cases = [
        # Transport nodes
        {"highway": "bus_stop", "name": "–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å–∞"},
        {"public_transport": "platform", "bus": "yes", "name": "–°–∞–ª—ñ–≤–æ–Ω–∫–∏"},  
        {"railway": "station", "name": "–ö–∏—ó–≤-–ü–∞—Å–∞–∂–∏—Ä—Å—å–∫–∏–π"},
        {"amenity": "bus_station", "name": "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª"},
        
        # Road segments  
        {"highway": "primary", "ref": "H-02", "maxspeed": "90"},
        {"highway": "residential", "name": "–≤—É–ª–∏—Ü—è –®–µ–≤—á–µ–Ω–∫–∞"},
        {"highway": "service"},
        
        # POI
        {"shop": "supermarket", "brand": "–ê–¢–ë"},
        {"amenity": "restaurant", "name": "–†–µ—Å—Ç–æ—Ä–∞–Ω"},
        {"amenity": "pharmacy", "brand": "–ê–ø—Ç–µ–∫–∞ –Ω–∏–∑—å–∫–∏—Ö —Ü—ñ–Ω"},
        {"office": "company", "name": "–¢–û–í –ö–æ–º–ø–∞–Ω—ñ—è"},
        
        # Edge cases
        {"natural": "tree"},  # Should return None
        {"power": "pole"},    # Should return None
        {}                   # Empty tags
    ]
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Entity Classifier:")
    print("=" * 50)
    
    for i, tags in enumerate(test_cases, 1):
        result = classifier.get_classification_stats(tags)
        print(f"\n{i:2d}. Tags: {tags}")
        print(f"    Entity Type: {result['entity_type']}")
        print(f"    Relevant Tags: {result['relevant_tags']}")
        
        if result['entity_type']:
            print(f"    ‚úÖ Classified as: {result['entity_type']}")
        else:
            print(f"    ‚ùå Not classified")

if __name__ == "__main__":
    main()