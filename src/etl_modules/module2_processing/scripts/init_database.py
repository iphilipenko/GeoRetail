#!/usr/bin/env python3
"""
Module 2: Database Initialization Script
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
"""

import os
import sys
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from pathlib import Path
import logging
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Database connection string
DB_CONNECTION_STRING = os.getenv(
    'DB_CONNECTION_STRING',
    "postgresql://georetail_user:georetail_secure_2024@localhost:5432/georetail"
)


class DatabaseInitializer:
    """–ö–ª–∞—Å –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ú–æ–¥—É–ª—è 2"""
    
    def __init__(self, connection_string=DB_CONNECTION_STRING):
        self.connection_string = connection_string
        self.conn = None
        self.cur = None
        
    def connect(self):
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            self.conn = psycopg2.connect(self.connection_string)
            self.conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            self.cur = self.conn.cursor()
            logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")
            return False
    
    def check_extensions(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö PostgreSQL —Ä–æ–∑—à–∏—Ä–µ–Ω—å"""
        required_extensions = ['postgis', 'uuid-ossp', 'h3', 'h3_postgis']
        
        logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω—å PostgreSQL...")
        
        for ext in required_extensions:
            try:
                self.cur.execute(f"CREATE EXTENSION IF NOT EXISTS \"{ext}\" CASCADE;")
                logger.info(f"‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è {ext} –¥–æ—Å—Ç—É–ø–Ω–µ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è {ext}: {e}")
                if ext in ['h3', 'h3_postgis']:
                    logger.info("   H3 —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –Ω–∏—Ö")
                else:
                    raise
    
    def check_existing_tables(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å"""
        logger.info("\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å...")
        
        self.cur.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'osm_ukraine' 
            ORDER BY table_name;
        """)
        
        existing_tables = [row[0] for row in self.cur.fetchall()]
        
        if existing_tables:
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—ñ –≤ —Å—Ö–µ–º—ñ osm_ukraine:")
            for table in existing_tables:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
                try:
                    self.cur.execute(f"SELECT COUNT(*) FROM osm_ukraine.{table}")
                    count = self.cur.fetchone()[0]
                    logger.info(f"  - {table}: {count:,} –∑–∞–ø–∏—Å—ñ–≤")
                except:
                    logger.info(f"  - {table}")
        else:
            logger.info("–°—Ö–µ–º–∞ osm_ukraine –ø–æ—Ä–æ–∂–Ω—è")
            
        return existing_tables
    
    def backup_existing_data(self, tables_to_backup):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å"""
        if not tables_to_backup:
            return
            
        backup_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        logger.info(f"\n–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π —Ç–∞–±–ª–∏—Ü—å (timestamp: {backup_timestamp})...")
        
        for table in tables_to_backup:
            if table in ['poi_processed', 'h3_analytics_current', 'h3_analytics_changes']:
                try:
                    backup_name = f"{table}_backup_{backup_timestamp}"
                    self.cur.execute(f"""
                        CREATE TABLE osm_ukraine.{backup_name} AS 
                        SELECT * FROM osm_ukraine.{table};
                    """)
                    logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {backup_name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é {table}: {e}")
    
    def load_schema_sql(self, sql_file_path=None):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL —Å–∫—Ä–∏–ø—Ç—É —Å—Ö–µ–º–∏"""
        if sql_file_path is None:
            # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª –≤ —Ç—ñ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∞–±–æ –≤ sql/
            current_dir = Path(__file__).parent
            possible_paths = [
                current_dir / "module2_schema.sql",
                current_dir / "sql" / "module2_schema.sql",
                current_dir / ".." / "sql" / "module2_schema.sql",
            ]
            
            for path in possible_paths:
                if path.exists():
                    sql_file_path = path
                    break
            else:
                # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω–∏–π SQL
                return self.execute_embedded_schema()
        
        logger.info(f"\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SQL —Å—Ö–µ–º–∏ –∑ —Ñ–∞–π–ª—É: {sql_file_path}")
        
        try:
            with open(sql_file_path, 'r', encoding='utf-8') as f:
                sql_content = f.read()
            
            self.cur.execute(sql_content)
            logger.info("‚úÖ SQL —Å—Ö–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL —Å—Ö–µ–º–∏: {e}")
            return False
    
    def execute_embedded_schema(self):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–±—É–¥–æ–≤–∞–Ω–æ—ó —Å—Ö–µ–º–∏ (—è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)"""
        logger.info("\n‚ö†Ô∏è  SQL —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ö–µ–º—É
        self.cur.execute("CREATE SCHEMA IF NOT EXISTS osm_ukraine;")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é poi_processed
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS osm_ukraine.poi_processed (
                entity_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                osm_id BIGINT NOT NULL,
                entity_type VARCHAR(20) NOT NULL,
                primary_category VARCHAR(50) NOT NULL,
                secondary_category VARCHAR(50) NOT NULL,
                name_original VARCHAR(200),
                brand_normalized VARCHAR(100),
                functional_group VARCHAR(50),
                influence_weight DECIMAL(3,2) DEFAULT 0.0,
                geom GEOMETRY NOT NULL,
                h3_res_9 VARCHAR(15),
                quality_score DECIMAL(3,2) DEFAULT 0.0,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );
        """)
        
        logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—å")
        logger.info("‚ö†Ô∏è  –î–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ–Ω–∞–π—Ç–µ –ø–æ–≤–Ω–∏–π SQL —Å–∫—Ä–∏–ø—Ç")
        return True
    
    def verify_installation(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è"""
        logger.info("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è...")
        
        required_tables = [
            'poi_processed',
            'h3_analytics_current', 
            'h3_analytics_changes'
        ]
        
        all_good = True
        
        for table in required_tables:
            self.cur.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'osm_ukraine' 
                    AND table_name = %s
                );
            """, (table,))
            
            exists = self.cur.fetchone()[0]
            if exists:
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü—è {table} —ñ—Å–Ω—É—î")
            else:
                logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü—è {table} –ù–ï –∑–Ω–∞–π–¥–µ–Ω–∞")
                all_good = False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ views
        self.cur.execute("""
            SELECT viewname 
            FROM pg_views 
            WHERE schemaname = 'osm_ukraine';
        """)
        views = [row[0] for row in self.cur.fetchall()]
        
        if views:
            logger.info(f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ views: {', '.join(views)}")
        
        return all_good
    
    def close(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î"""
        if self.cur:
            self.cur.close()
        if self.conn:
            self.conn.close()
        logger.info("\nüëã –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –∑–∞–∫—Ä–∏—Ç–æ")
    
    def run(self, backup=True, sql_file=None):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –ú–æ–¥—É–ª—è 2")
        logger.info("=" * 60)
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        if not self.connect():
            return False
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω—å
            self.check_extensions()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å
            existing_tables = self.check_existing_tables()
            
            # –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            if backup and existing_tables:
                response = input("\n‚ö†Ô∏è  –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å? (y/n): ")
                if response.lower() == 'y':
                    self.backup_existing_data(existing_tables)
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ö–µ–º–∏
            if not self.load_schema_sql(sql_file):
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
            success = self.verify_installation()
            
            if success:
                logger.info("\n‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
                logger.info("\nüìä –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
                logger.info("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤ pgAdmin –∞–±–æ psql")
                logger.info("2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö")
                logger.info("3. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ —Ä–æ–∑—Ä–æ–±–∫–∏ Tag Parser")
            else:
                logger.error("\n‚ùå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
            
            return success
            
        except Exception as e:
            logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            return False
        finally:
            self.close()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è GeoRetail Module 2'
    )
    parser.add_argument(
        '--no-backup', 
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π'
    )
    parser.add_argument(
        '--sql-file',
        type=str,
        help='–®–ª—è—Ö –¥–æ SQL —Ñ–∞–π–ª—É —Å—Ö–µ–º–∏'
    )
    parser.add_argument(
        '--connection-string',
        type=str,
        default=DB_CONNECTION_STRING,
        help='PostgreSQL connection string'
    )
    
    args = parser.parse_args()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä
    initializer = DatabaseInitializer(args.connection_string)
    success = initializer.run(
        backup=not args.no_backup,
        sql_file=args.sql_file
    )
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–¥ –≤–∏—Ö–æ–¥—É
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()