#!/usr/bin/env python3
"""
Batch Approval CLI Tool
CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è batch –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É brand candidates
"""

import sys
import argparse
import logging
import psycopg2
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional
from psycopg2.extras import RealDictCursor

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ path –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from normalization.brand_manager import BrandManager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Database connection
DB_CONNECTION_STRING = "postgresql://georetail_user:georetail_secure_2024@localhost:5432/georetail"


class BatchApprovalTool:
    """CLI —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ brand candidates"""
    
    def __init__(self, db_connection_string: str):
        self.db_connection_string = db_connection_string
        self.brand_manager = BrandManager(db_connection_string)
        
        logger.info("‚úÖ BatchApprovalTool —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    def list_candidates(self, filters: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑–∞ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏"""
        logger.info(f"üîç –ü–æ—à—É–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏: {filters}")
        
        try:
            candidates = self.brand_manager.get_candidates_for_review(**filters)
            
            if not candidates:
                print("üìù –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏")
                return []
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            print(f"\nüìã –ó–ù–ê–ô–î–ï–ù–û {len(candidates)} –ö–ê–ù–î–ò–î–ê–¢–Ü–í:")
            print("=" * 80)
            print(f"{'#':<3} {'Name':<25} {'Status':<12} {'Freq':<6} {'Regions':<8} {'Conf':<6} {'Group':<12}")
            print("-" * 80)
            
            for i, candidate in enumerate(candidates, 1):
                regions_count = len(candidate.get('locations', []))
                conf = candidate.get('confidence_score') or 0.0
                group = candidate.get('suggested_functional_group', 'N/A')[:11]
                
                print(f"{i:<3} {candidate['name'][:24]:<25} {candidate['status']:<12} "
                      f"{candidate['frequency']:<6} {regions_count:<8} {conf:<6.3f} {group:<12}")
            
            print("=" * 80)
            return candidates
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤: {e}")
            return []
    
    def approve_candidates(self, filters: Dict[str, Any], processed_by: str = "admin") -> Dict[str, int]:
        """Batch –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤"""
        logger.info(f"‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏: {filters}")
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ —â–æ –±—É–¥–µ–º–æ –∑–∞—Ç–≤–µ—Ä–¥–∂—É–≤–∞—Ç–∏
        candidates = self.brand_manager.get_candidates_for_review(**filters)
        
        if not candidates:
            print("üìù –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
            return {'total_processed': 0, 'approved': 0, 'rejected': 0, 'errors': 0}
        
        print(f"\n‚ö†Ô∏è  –ó–ê–¢–í–ï–†–î–ñ–ï–ù–ù–Ø {len(candidates)} –ö–ê–ù–î–ò–î–ê–¢–Ü–í:")
        print("–¶–µ —Å—Ç–≤–æ—Ä–∏—Ç—å –Ω–æ–≤—ñ –±—Ä–µ–Ω–¥–∏ –≤ custom_brands —Ç–∞–±–ª–∏—Ü—ñ!")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        for i, candidate in enumerate(candidates[:5], 1):
            regions_count = len(candidate.get('locations', []))
            print(f"   {i}. \"{candidate['name']}\" ‚Üí {candidate.get('suggested_canonical_name', 'N/A')} "
                  f"({candidate['frequency']} locations, {regions_count} regions)")
        
        if len(candidates) > 5:
            print(f"   ... —ñ —â–µ {len(candidates) - 5} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        try:
            confirm = input(f"\n‚ùì –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è? (y/N): ").strip().lower()
            if confirm not in ['y', 'yes']:
                print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                return {'total_processed': 0, 'approved': 0, 'rejected': 0, 'errors': 0}
        except KeyboardInterrupt:
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            return {'total_processed': 0, 'approved': 0, 'rejected': 0, 'errors': 0}
        
        # –í–∏–∫–æ–Ω—É—î–º–æ batch approval
        try:
            result = self.brand_manager.batch_approve_candidates(
                filters=filters,
                action='approve',
                processed_by=processed_by
            )
            
            print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–¢–í–ï–†–î–ñ–ï–ù–ù–Ø:")
            print(f"   –û–±—Ä–æ–±–ª–µ–Ω–æ: {result['total_processed']}")
            print(f"   –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: {result['approved']}")
            print(f"   –ü–æ–º–∏–ª–∫–∏: {result['errors']}")
            
            return result
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ batch approval: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {e}")
            return {'total_processed': 0, 'approved': 0, 'rejected': 0, 'errors': 1}
    
    def reject_candidates(self, filters: Dict[str, Any], processed_by: str = "admin") -> Dict[str, int]:
        """Batch –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤"""
        logger.info(f"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏: {filters}")
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ —â–æ –±—É–¥–µ–º–æ –≤—ñ–¥—Ö–∏–ª—è—Ç–∏
        candidates = self.brand_manager.get_candidates_for_review(**filters)
        
        if not candidates:
            print("üìù –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è")
            return {'total_processed': 0, 'approved': 0, 'rejected': 0, 'errors': 0}
        
        print(f"\n‚ö†Ô∏è  –í–Ü–î–•–ò–õ–ï–ù–ù–Ø {len(candidates)} –ö–ê–ù–î–ò–î–ê–¢–Ü–í:")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        for i, candidate in enumerate(candidates[:5], 1):
            regions_count = len(candidate.get('locations', []))
            print(f"   {i}. \"{candidate['name']}\" "
                  f"({candidate['frequency']} locations, {regions_count} regions)")
        
        if len(candidates) > 5:
            print(f"   ... —ñ —â–µ {len(candidates) - 5} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        try:
            confirm = input(f"\n‚ùì –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è? (y/N): ").strip().lower()
            if confirm not in ['y', 'yes']:
                print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                return {'total_processed': 0, 'approved': 0, 'rejected': 0, 'errors': 0}
        except KeyboardInterrupt:
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            return {'total_processed': 0, 'approved': 0, 'rejected': 0, 'errors': 0}
        
        # –í–∏–∫–æ–Ω—É—î–º–æ batch rejection
        try:
            result = self.brand_manager.batch_approve_candidates(
                filters=filters,
                action='reject',
                processed_by=processed_by
            )
            
            print(f"\n‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢ –í–Ü–î–•–ò–õ–ï–ù–ù–Ø:")
            print(f"   –û–±—Ä–æ–±–ª–µ–Ω–æ: {result['total_processed']}")
            print(f"   –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {result['rejected']}")
            print(f"   –ü–æ–º–∏–ª–∫–∏: {result['errors']}")
            
            return result
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ batch rejection: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {e}")
            return {'total_processed': 0, 'approved': 0, 'rejected': 0, 'errors': 1}
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        logger.info("üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        try:
            with psycopg2.connect(self.db_connection_string) as conn:
                with conn.cursor(cursor_factory=RealDictCursor) as cur:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
                    cur.execute("""
                        SELECT status, COUNT(*) as count,
                               AVG(confidence_score) as avg_confidence,
                               AVG(frequency) as avg_frequency
                        FROM osm_ukraine.brand_candidates
                        GROUP BY status
                        ORDER BY count DESC
                    """)
                    
                    status_stats = cur.fetchall()
                    
                    # –¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –ø–æ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
                    cur.execute("""
                        SELECT name, status, frequency, confidence_score,
                               array_length(locations, 1) as regions_count
                        FROM osm_ukraine.brand_candidates
                        WHERE status IN ('approved', 'reviewing')
                        ORDER BY confidence_score DESC, frequency DESC
                        LIMIT 10
                    """)
                    
                    top_candidates = cur.fetchall()
                    
                    # –ù–µ–¥–∞–≤–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                    cur.execute("""
                        SELECT reviewed_by, COUNT(*) as count,
                               MAX(reviewed_at) as last_activity
                        FROM osm_ukraine.brand_candidates
                        WHERE reviewed_at IS NOT NULL
                        GROUP BY reviewed_by
                        ORDER BY last_activity DESC
                        LIMIT 5
                    """)
                    
                    recent_activity = cur.fetchall()
            
            # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê BRAND CANDIDATES")
            print("=" * 60)
            
            print("\nüìà –ü–û –°–¢–ê–¢–£–°–ê–•:")
            for stat in status_stats:
                avg_conf = stat['avg_confidence'] or 0
                avg_freq = stat['avg_frequency'] or 0
                print(f"   {stat['status']:<12}: {stat['count']:>5} candidates "
                      f"(avg conf: {avg_conf:.3f}, avg freq: {avg_freq:.1f})")
            
            if top_candidates:
                print(f"\nüèÜ –¢–û–ü –ö–ê–ù–î–ò–î–ê–¢–Ü–í –ó–ê –í–ü–ï–í–ù–ï–ù–Ü–°–¢–Æ:")
                for i, candidate in enumerate(top_candidates, 1):
                    regions = candidate['regions_count'] or 0
                    print(f"   {i:2}. \"{candidate['name'][:30]}\" - {candidate['status']} "
                          f"(conf: {candidate['confidence_score']:.3f}, "
                          f"freq: {candidate['frequency']}, regions: {regions})")
            
            if recent_activity:
                print(f"\n‚è∞ –ù–ï–î–ê–í–ù–Ø –ê–ö–¢–ò–í–ù–Ü–°–¢–¨:")
                for activity in recent_activity:
                    last_time = activity['last_activity'].strftime("%Y-%m-%d %H:%M")
                    print(f"   {activity['reviewed_by']:<20}: {activity['count']:>3} –æ–ø–µ—Ä–∞—Ü—ñ–π "
                          f"(–æ—Å—Ç–∞–Ω–Ω—ñ: {last_time})")
            
            print("=" * 60)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def show_batch_history(self, limit: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é batch –æ–ø–µ—Ä–∞—Ü—ñ–π"""
        logger.info(f"üìö –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó batch –æ–ø–µ—Ä–∞—Ü—ñ–π (limit: {limit})")
        
        try:
            history = self.brand_manager.get_batch_history(limit=limit)
            
            if not history:
                print("üìù –ù–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó batch –æ–ø–µ—Ä–∞—Ü—ñ–π")
                return
            
            print(f"\nüìö –Ü–°–¢–û–†–Ü–Ø BATCH –û–ü–ï–†–ê–¶–Ü–ô (–æ—Å—Ç–∞–Ω–Ω—ñ {len(history)}):")
            print("=" * 80)
            print(f"{'Date':<16} {'Action':<15} {'By':<20} {'Processed':<10} {'Approved':<9} {'Rejected':<9}")
            print("-" * 80)
            
            for entry in history:
                date_str = entry['processed_at'].strftime("%Y-%m-%d %H:%M")
                processed_by = entry['processed_by'][:19]
                
                print(f"{date_str:<16} {entry['action']:<15} {processed_by:<20} "
                      f"{entry['candidates_processed']:<10} "
                      f"{entry['candidates_approved'] or 0:<9} "
                      f"{entry['candidates_rejected'] or 0:<9}")
            
            print("=" * 80)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")


def create_parser() -> argparse.ArgumentParser:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è CLI parser"""
    parser = argparse.ArgumentParser(
        description="Batch Approval Tool –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è brand candidates",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

  # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'approved'
  python batch_approval.py list --status approved

  # –ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ –≤–∏—Å–æ–∫–æ—é –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é
  python batch_approval.py approve --status approved --min-confidence 0.8

  # –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ –Ω–∏–∑—å–∫–æ—é –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é  
  python batch_approval.py reject --status rejected --max-confidence 0.3

  # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è review –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é 'retail'
  python batch_approval.py list --status reviewing --category retail

  # –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  python batch_approval.py stats

  # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –æ–ø–µ—Ä–∞—Ü—ñ–π
  python batch_approval.py history
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    subparsers = parser.add_subparsers(dest='action', help='–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó')
    
    # List –∫–æ–º–∞–Ω–¥–∞
    list_parser = subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤')
    list_parser.add_argument('--status', choices=['new', 'approved', 'reviewing', 'rejected'], 
                           help='–§—ñ–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É')
    list_parser.add_argument('--min-confidence', type=float, help='–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å')
    list_parser.add_argument('--max-confidence', type=float, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å')
    list_parser.add_argument('--min-frequency', type=int, help='–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞')
    list_parser.add_argument('--category', help='–§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó')
    list_parser.add_argument('--limit', type=int, default=50, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤')
    
    # Approve –∫–æ–º–∞–Ω–¥–∞
    approve_parser = subparsers.add_parser('approve', help='–ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤')
    approve_parser.add_argument('--status', choices=['approved', 'reviewing'], required=True,
                              help='–°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è')
    approve_parser.add_argument('--min-confidence', type=float, help='–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å')
    approve_parser.add_argument('--min-frequency', type=int, help='–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞')
    approve_parser.add_argument('--category', help='–§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó')
    approve_parser.add_argument('--processed-by', default='admin', help='–•—Ç–æ –æ–±—Ä–æ–±–ª—è—î')
    
    # Reject –∫–æ–º–∞–Ω–¥–∞
    reject_parser = subparsers.add_parser('reject', help='–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤')
    reject_parser.add_argument('--status', choices=['rejected', 'reviewing'], required=True,
                             help='–°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è')
    reject_parser.add_argument('--max-confidence', type=float, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å')
    reject_parser.add_argument('--max-frequency', type=int, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞')
    reject_parser.add_argument('--category', help='–§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó')
    reject_parser.add_argument('--processed-by', default='admin', help='–•—Ç–æ –æ–±—Ä–æ–±–ª—è—î')
    
    # Stats –∫–æ–º–∞–Ω–¥–∞
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # History –∫–æ–º–∞–Ω–¥–∞
    history_parser = subparsers.add_parser('history', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é batch –æ–ø–µ—Ä–∞—Ü—ñ–π')
    history_parser.add_argument('--limit', type=int, default=10, help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤')
    
    return parser


def build_filters(args) -> Dict[str, Any]:
    """–ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ CLI"""
    filters = {}
    
    if hasattr(args, 'status') and args.status:
        filters['status'] = args.status
    
    if hasattr(args, 'min_confidence') and args.min_confidence is not None:
        filters['min_confidence'] = args.min_confidence
    
    if hasattr(args, 'max_confidence') and args.max_confidence is not None:
        # –î–ª—è max_confidence –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ workaround
        filters['max_confidence'] = args.max_confidence
    
    if hasattr(args, 'min_frequency') and args.min_frequency is not None:
        filters['min_frequency'] = args.min_frequency
    
    if hasattr(args, 'max_frequency') and args.max_frequency is not None:
        filters['max_frequency'] = args.max_frequency
    
    if hasattr(args, 'category') and args.category:
        filters['category'] = args.category
    
    if hasattr(args, 'limit') and args.limit:
        filters['limit'] = args.limit
    
    return filters


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = create_parser()
    args = parser.parse_args()
    
    if not args.action:
        parser.print_help()
        return 1
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ tool
        tool = BatchApprovalTool(DB_CONNECTION_STRING)
        
        if args.action == 'list':
            filters = build_filters(args)
            tool.list_candidates(filters)
            
        elif args.action == 'approve':
            filters = build_filters(args)
            result = tool.approve_candidates(filters, args.processed_by)
            
        elif args.action == 'reject':
            filters = build_filters(args)
            result = tool.reject_candidates(filters, args.processed_by)
            
        elif args.action == 'stats':
            tool.show_statistics()
            
        elif args.action == 'history':
            tool.show_batch_history(args.limit)
        
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return 1
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)