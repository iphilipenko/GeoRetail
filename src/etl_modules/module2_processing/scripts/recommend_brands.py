#!/usr/bin/env python3
"""
Brand Recommendation Engine
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–Ω–∞–ª—ñ–∑—É—î brand_candidates —Ç–∞ —Å—Ç–≤–æ—Ä—é—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
–¥–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∞–±–æ —Ä—É—á–Ω–æ–≥–æ review
"""

import sys
import logging
import psycopg2
import re
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from psycopg2.extras import RealDictCursor, Json
from dataclasses import dataclass
from enum import Enum

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ path –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from normalization.brand_manager import BrandManager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Database connection
DB_CONNECTION_STRING = "postgresql://georetail_user:georetail_secure_2024@localhost:5432/georetail"


class RecommendationStatus(Enum):
    """–°—Ç–∞—Ç—É—Å–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å DB constraint"""
    APPROVED = "approved"        # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    REVIEWING = "reviewing"      # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
    REJECTED = "rejected"        # –î–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è


@dataclass
class RecommendationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    status: RecommendationStatus
    confidence_score: float
    reason: str
    suggested_canonical_name: str
    suggested_functional_group: str
    suggested_influence_weight: float
    suggested_format: str


class BrandRecommendationEngine:
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –±—Ä–µ–Ω–¥—ñ–≤"""
    
    def __init__(self, db_connection_string: str):
        self.db_connection_string = db_connection_string
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'candidates_processed': 0,
            'approved': 0,
            'reviewing': 0,
            'rejected': 0,
            'saved_successfully': 0,
            'save_errors': 0
        }
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ —Ç–∞ patterns
        self._load_recommendation_rules()
        
        logger.info("‚úÖ BrandRecommendationEngine —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    def _load_recommendation_rules(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
        
        # Patterns –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
        self.rejection_patterns = [
            # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —É—Å—Ç–∞–Ω–æ–≤–∏
            r'—Å—ñ–ª—å—Å—å–∫–∞ —Ä–∞–¥–∞', r'–º—ñ—Å—å–∫–∞ —Ä–∞–¥–∞', r'—Å–µ–ª–∏—â–Ω–∞ —Ä–∞–¥–∞',
            r'–±—É–¥–∏–Ω–æ–∫ –∫—É–ª—å—Ç—É—Ä–∏', r'–¥—ñ–º –∫—É–ª—å—Ç—É—Ä–∏', r'–∫–ª—É–±$',
            r'—Ñ–µ–ª—å–¥—à–µ—Ä—Å—å–∫–æ.*–ø—É–Ω–∫—Ç', r'–∞–º–±—É–ª–∞—Ç–æ—Ä—ñ—è', r'–ø–æ–ª—ñ–∫–ª—ñ–Ω—ñ–∫–∞',
            r'–ª—ñ–∫–∞—Ä–Ω—è', r'—à–∫–æ–ª–∞$', r'–≥—ñ–º–Ω–∞–∑—ñ—è', r'–ª—ñ—Ü–µ–π',
            
            # –ó–∞–≥–∞–ª—å–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏  
            r'^—Å—Ç–æ$', r'^—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂$', r'^–∞–≤—Ç–æ—Å–µ—Ä–≤—ñ—Å$', r'^–∞–≤—Ç–æ–º–∏–π–∫–∞$',
            r'^–ø–µ—Ä—É–∫–∞—Ä–Ω—è$', r'^—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–∏$', r'^–º–∞–π—Å—Ç–µ—Ä–Ω—è$',
            r'^–∞—Ç–µ–ª—å—î$', r'^–ø—Ä–æ–∫–∞—Ç$',
            
            # –ó–∞–Ω–∞–¥—Ç–æ –∑–∞–≥–∞–ª—å–Ω—ñ
            r'^–º–∞–≥–∞–∑–∏–Ω\s*\d*$', r'^shop\s*\d*$', r'^store\s*\d*$',
            r'^–∫–∞—Ñ–µ\s*\d*$', r'^—Ä–µ—Å—Ç–æ—Ä–∞–Ω\s*\d*$', r'^—ó–¥–∞–ª—å–Ω—è\s*\d*$',
            r'^\d+$', r'^‚Ññ\s*\d+$', r'^n\s*\d+$',
            r'^[–∞-—è—ë]{1,2}\d+$'
        ]
        
        # –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω—ñ –±—Ä–µ–Ω–¥–æ–≤—ñ patterns
        self.brand_patterns = [
            # –ë–∞–Ω–∫–∏
            r'.*–±–∞–Ω–∫$', r'.*bank$', r'–∫—Ä–µ–¥–∏.*–±–∞–Ω–∫', r'.*—Ñ—ñ–Ω–∞–Ω—Å.*',
            # –ê–ó–°
            r'.*–Ω–∞—Ñ—Ç–∞$', r'.*oil$', r'.*petrol$', r'.*gas$',
            # –§—Ä–∞–Ω—à–∏–∑–∏
            r'.*pizza$', r'.*burger$', r'.*coffee$', r'.*express$'
        ]
        
        logger.info("üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
    
    def run_recommendations(self) -> Dict[str, Any]:
        """–ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
        logger.info("ü§ñ –ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...")
        
        start_time = datetime.now()
        
        try:
            # 1. –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
            new_candidates = self._get_new_candidates()
            logger.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(new_candidates)} –Ω–æ–≤–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
            
            if not new_candidates:
                logger.info("‚úÖ –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
                return self._generate_report(datetime.now() - start_time)
            
            # 2. –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            for candidate in new_candidates:
                try:
                    result = self._analyze_candidate(candidate)
                    self._save_single_recommendation(candidate, result)
                    self.stats['candidates_processed'] += 1
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if result.status == RecommendationStatus.APPROVED:
                        self.stats['approved'] += 1
                    elif result.status == RecommendationStatus.REVIEWING:
                        self.stats['reviewing'] += 1
                    elif result.status == RecommendationStatus.REJECTED:
                        self.stats['rejected'] += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ '{candidate.get('name', 'Unknown')}': {e}")
                    continue
            
            # 3. –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
            execution_time = datetime.now() - start_time
            report = self._generate_report(execution_time)
            
            logger.info("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            return report
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}")
            raise
    
    def _get_new_candidates(self) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑—ñ status='new'"""
        candidates = []
        
        try:
            with psycopg2.connect(self.db_connection_string) as conn:
                with conn.cursor(cursor_factory=RealDictCursor) as cur:
                    cur.execute("""
                        SELECT 
                            candidate_id, name, frequency, locations, categories,
                            confidence_score, suggested_canonical_name,
                            suggested_functional_group, suggested_influence_weight,
                            suggested_format, recommendation_reason,
                            first_seen, last_seen
                        FROM osm_ukraine.brand_candidates
                        WHERE status = 'new'
                        ORDER BY frequency DESC, confidence_score DESC
                        LIMIT 2000
                    """)
                    
                    for row in cur.fetchall():
                        candidates.append(dict(row))
                        
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤: {e}")
            raise
        
        return candidates
    
    def _analyze_candidate(self, candidate: Dict[str, Any]) -> RecommendationResult:
        """–ê–Ω–∞–ª—ñ–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
        name = candidate['name'].strip()
        name_lower = name.lower()
        frequency = int(candidate['frequency'])
        regions_count = len(candidate['locations'] or [])
        current_confidence = float(candidate.get('confidence_score', 0.0))
        categories = candidate.get('categories', []) or []
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
        for pattern in self.rejection_patterns:
            if re.search(pattern, name_lower):
                return RecommendationResult(
                    status=RecommendationStatus.REJECTED,
                    confidence_score=max(current_confidence - 0.3, 0.1),
                    reason=f"–í—ñ–¥—Ö–∏–ª–µ–Ω–æ: –∑–±—ñ–≥ –∑ pattern '{pattern}'",
                    suggested_canonical_name=name.title(),
                    suggested_functional_group='neutral',
                    suggested_influence_weight=0.0,
                    suggested_format='–∑–∞–∫–ª–∞–¥'
                )
        
        # 2. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫
        # Frequency score
        if frequency >= 50:
            freq_score = 1.0
        elif frequency >= 20:
            freq_score = 0.8
        elif frequency >= 10:
            freq_score = 0.6
        else:
            freq_score = 0.4
        
        # Regional spread score
        if regions_count >= 10:
            region_score = 1.0
        elif regions_count >= 5:
            region_score = 0.9
        elif regions_count >= 3:
            region_score = 0.7
        elif regions_count >= 2:
            region_score = 0.5
        else:
            region_score = 0.2
        
        # Brand quality score
        brand_score = self._calculate_brand_score(name, name_lower)
        
        # Category consistency score
        category_score = self._calculate_category_score(categories)
        
        # 3. –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π score
        final_score = (
            freq_score * 0.3 +      # –ß–∞—Å—Ç–æ—Ç–∞
            region_score * 0.3 +    # –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è  
            brand_score * 0.25 +    # –ë—Ä–µ–Ω–¥–æ–≤—ñ—Å—Ç—å
            category_score * 0.15   # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
        )
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        suggested_canonical_name = self._suggest_canonical_name(name)
        suggested_functional_group = self._suggest_functional_group(categories)
        suggested_influence_weight = self._suggest_influence_weight(suggested_functional_group, regions_count)
        suggested_format = self._suggest_format(categories, name)
        
        # 5. –§—ñ–Ω–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        if final_score >= 0.75 and freq_score >= 0.6:
            status = RecommendationStatus.APPROVED
            reason = f"–ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: –≤–∏—Å–æ–∫–∏–π score ({final_score:.3f}), —á–∞—Å—Ç–æ—Ç–∞ {frequency}, {regions_count} —Ä–µ–≥—ñ–æ–Ω—ñ–≤"
            final_confidence = min(current_confidence + 0.2, 1.0)
        elif final_score >= 0.5:
            status = RecommendationStatus.REVIEWING
            reason = f"–ü–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≥–ª—è–¥—É: —Å–µ—Ä–µ–¥–Ω—ñ–π score ({final_score:.3f}), —á–∞—Å—Ç–æ—Ç–∞ {frequency}, {regions_count} —Ä–µ–≥—ñ–æ–Ω—ñ–≤"
            final_confidence = current_confidence
        else:
            status = RecommendationStatus.REJECTED
            reason = f"–í—ñ–¥—Ö–∏–ª–µ–Ω–æ: –Ω–∏–∑—å–∫–∏–π score ({final_score:.3f}), —á–∞—Å—Ç–æ—Ç–∞ {frequency}, {regions_count} —Ä–µ–≥—ñ–æ–Ω—ñ–≤"
            final_confidence = max(current_confidence - 0.2, 0.1)
        
        logger.debug(f"üîç '{name}': {status.value} (score: {final_score:.3f})")
        
        return RecommendationResult(
            status=status,
            confidence_score=final_confidence,
            reason=reason,
            suggested_canonical_name=suggested_canonical_name,
            suggested_functional_group=suggested_functional_group,
            suggested_influence_weight=suggested_influence_weight,
            suggested_format=suggested_format
        )
    
    def _calculate_brand_score(self, name: str, name_lower: str) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±—Ä–µ–Ω–¥–æ–≤–æ—ó —è–∫–æ—Å—Ç—ñ –Ω–∞–∑–≤–∏"""
        score = 0.5  # –±–∞–∑–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞
        
        # –î–æ–≤–∂–∏–Ω–∞ –Ω–∞–∑–≤–∏
        if 3 <= len(name) <= 15:
            score += 0.1
        elif len(name) > 20:
            score -= 0.1
        
        # –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
        if name.istitle():
            score += 0.1
        
        # –ë—Ä–µ–Ω–¥–æ–≤—ñ patterns
        for pattern in self.brand_patterns:
            if re.search(pattern, name_lower):
                score += 0.2
                break
        
        # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å (–Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤)
        generic_words = ['–º–∞–≥–∞–∑–∏–Ω', '–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∞–ø—Ç–µ–∫–∞', '—Å–µ—Ä–≤—ñ—Å']
        if not any(word in name_lower for word in generic_words):
            score += 0.1
        
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (–±—Ä–µ–Ω–¥–æ–≤—ñ)
        if re.search(r'[&+\-]', name):
            score += 0.05
        
        return min(score, 1.0)
    
    def _calculate_category_score(self, categories: List[str]) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —è–∫–æ—Å—Ç—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
        if not categories:
            return 0.3
        
        if len(categories) == 1:
            return 1.0  # –Ñ–¥–∏–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è - –Ω–∞–π–∫—Ä–∞—â–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤'—è–∑–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        related_groups = [
            {'retail', 'supermarket', 'convenience'},
            {'restaurant', 'cafe', 'fast_food'},
            {'pharmacy', 'medical'},
            {'bank', 'financial'}
        ]
        
        categories_set = set(cat.lower() for cat in categories)
        for group in related_groups:
            if len(categories_set & group) > 1:
                return 0.8
        
        return 0.4  # –†—ñ–∑–Ω–æ—Ä—ñ–¥–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    
    def _suggest_canonical_name(self, name: str) -> str:
        """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∫–∞–Ω–æ–Ω—ñ—á–Ω–æ—ó –Ω–∞–∑–≤–∏"""
        canonical = name.strip()
        
        # Title case —è–∫—â–æ –≤—Å–µ –≤–µ–ª–∏–∫–∏–º–∏ –∞–±–æ –º–∞–ª–∏–º–∏
        if canonical.isupper() or canonical.islower():
            canonical = canonical.title()
        
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        canonical = re.sub(r'\s+', ' ', canonical)
        
        return canonical
    
    def _suggest_functional_group(self, categories: List[str]) -> str:
        """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—ó –≥—Ä—É–ø–∏"""
        if not categories:
            return 'traffic_generator'
        
        categories_lower = [cat.lower() for cat in categories]
        
        # Retail competitors
        if any(cat in categories_lower for cat in ['retail', 'supermarket', 'convenience', 'grocery']):
            return 'competitor'
        
        # Food service competitors
        if any(cat in categories_lower for cat in ['restaurant', 'cafe', 'fast_food']):
            return 'competitor'
        
        # Healthcare competitors
        if any(cat in categories_lower for cat in ['pharmacy', 'medical']):
            return 'competitor'
        
        # Financial services
        if any(cat in categories_lower for cat in ['bank', 'financial']):
            return 'traffic_generator'
        
        # Transport/fuel
        if any(cat in categories_lower for cat in ['fuel', 'gas_station', 'transport']):
            return 'accessibility'
        
        return 'traffic_generator'
    
    def _suggest_influence_weight(self, functional_group: str, regions_count: int) -> float:
        """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∞–≥–∏ –≤–ø–ª–∏–≤—É"""
        base_weights = {
            'competitor': -0.4,
            'traffic_generator': 0.2,
            'accessibility': 0.3,
            'neutral': 0.0
        }
        
        base_weight = base_weights.get(functional_group, 0.0)
        
        # –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä–æ–∑–º—ñ—Ä –º–µ—Ä–µ–∂—ñ
        if functional_group == 'competitor':
            # –ë—ñ–ª—å—à–∞ –º–µ—Ä–µ–∂–∞ = —Å–∏–ª—å–Ω—ñ—à–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è
            network_penalty = min(regions_count * 0.05, 0.3)
            final_weight = base_weight - network_penalty
            return max(final_weight, -1.0)
        
        elif functional_group in ['traffic_generator', 'accessibility']:
            # –ë—ñ–ª—å—à–∞ –º–µ—Ä–µ–∂–∞ = –±—ñ–ª—å—à–∏–π –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤
            network_bonus = min(regions_count * 0.03, 0.2)
            final_weight = base_weight + network_bonus
            return min(final_weight, 1.0)
        
        return base_weight
    
    def _suggest_format(self, categories: List[str], name: str) -> str:
        """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É"""
        if not categories:
            return '–∑–∞–∫–ª–∞–¥'
        
        categories_lower = [cat.lower() for cat in categories]
        name_lower = name.lower()
        
        # Mapping –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ —Ñ–æ—Ä–º–∞—Ç—ñ–≤
        format_mapping = {
            'supermarket': '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç',
            'convenience': '–º–∞–≥–∞–∑–∏–Ω',
            'retail': '–º–∞–≥–∞–∑–∏–Ω',
            'restaurant': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
            'cafe': '–∫–∞—Ñ–µ',
            'fast_food': '–∑–∞–∫–ª–∞–¥ —à–≤–∏–¥–∫–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è',
            'pharmacy': '–∞–ø—Ç–µ–∫–∞',
            'bank': '–±–∞–Ω–∫',
            'fuel': '–ê–ó–°',
            'gas_station': '–ê–ó–°'
        }
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π match
        for category in categories_lower:
            if category in format_mapping:
                return format_mapping[category]
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–æ –Ω–∞–∑–≤—ñ
        if any(word in name_lower for word in ['–±–∞–Ω–∫', 'bank']):
            return '–±–∞–Ω–∫'
        elif any(word in name_lower for word in ['–∞–ø—Ç–µ–∫–∞', 'pharmacy']):
            return '–∞–ø—Ç–µ–∫–∞'
        elif any(word in name_lower for word in ['–∫–∞—Ñ–µ', 'cafe']):
            return '–∫–∞—Ñ–µ'
        
        return '–∑–∞–∫–ª–∞–¥'
    
    def _save_single_recommendation(self, candidate: Dict[str, Any], result: RecommendationResult):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–¥–Ω—ñ—î—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤ –æ–∫—Ä–µ–º—ñ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
        try:
            with psycopg2.connect(self.db_connection_string) as conn:
                with conn.cursor() as cur:
                    # –ë–µ–∑–ø–µ—á–Ω–µ –æ–±—Ä—ñ–∑–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
                    reason = result.reason[:500] if result.reason else None
                    
                    cur.execute("""
                        UPDATE osm_ukraine.brand_candidates
                        SET status = %s,
                            confidence_score = %s,
                            suggested_canonical_name = %s,
                            suggested_functional_group = %s,
                            suggested_influence_weight = %s,
                            suggested_format = %s,
                            recommendation_reason = %s,
                            reviewed_at = NOW(),
                            reviewed_by = %s
                        WHERE candidate_id = %s
                    """, (
                        result.status.value,
                        result.confidence_score,
                        result.suggested_canonical_name,
                        result.suggested_functional_group,
                        result.suggested_influence_weight,
                        result.suggested_format,
                        reason,
                        'recommendation_engine',
                        candidate['candidate_id']
                    ))
                    
                    if cur.rowcount > 0:
                        conn.commit()
                        self.stats['saved_successfully'] += 1
                        logger.debug(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –¥–ª—è '{candidate['name']}'")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–¥–∏–¥–∞—Ç '{candidate['name']}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                        
        except Exception as e:
            self.stats['save_errors'] += 1
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è '{candidate.get('name', 'Unknown')}': {e}")
    
    def _generate_report(self, execution_time) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É"""
        logger.info("üìä –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑ –ë–î
        top_approved = self._get_examples_by_status('approved', 5)
        top_rejected = self._get_examples_by_status('rejected', 5)
        needs_review = self._get_examples_by_status('reviewing', 5)
        
        report = {
            'execution_time': str(execution_time),
            'statistics': self.stats.copy(),
            'top_approved': top_approved,
            'top_rejected': top_rejected,
            'needs_review_examples': needs_review,
            'timestamp': datetime.now().isoformat()
        }
        
        # Console output
        print("\n" + "="*70)
        print("ü§ñ BRAND RECOMMENDATION ENGINE RESULTS")
        print("="*70)
        print(f"üìä Total candidates processed: {self.stats['candidates_processed']:,}")
        print(f"‚úÖ Approved for batch processing: {self.stats['approved']:,}")
        print(f"üîç Needs manual review: {self.stats['reviewing']:,}")
        print(f"‚ùå Rejected: {self.stats['rejected']:,}")
        print(f"üíæ Successfully saved: {self.stats['saved_successfully']:,}")
        print(f"‚ö†Ô∏è  Save errors: {self.stats['save_errors']:,}")
        print(f"‚è±Ô∏è  Execution time: {execution_time}")
        
        # Breakdown percentages
        if self.stats['candidates_processed'] > 0:
            approval_rate = (self.stats['approved'] / self.stats['candidates_processed']) * 100
            review_rate = (self.stats['reviewing'] / self.stats['candidates_processed']) * 100
            rejection_rate = (self.stats['rejected'] / self.stats['candidates_processed']) * 100
            
            print(f"\nüìà BREAKDOWN:")
            print(f"   Auto-approval rate: {approval_rate:.1f}%")
            print(f"   Manual review rate: {review_rate:.1f}%")
            print(f"   Rejection rate: {rejection_rate:.1f}%")
        
        # Top approved
        if top_approved:
            print(f"\nüèÜ TOP APPROVED BRANDS:")
            for i, candidate in enumerate(top_approved, 1):
                regions = len(candidate.get('locations', []))
                print(f"   {i}. \"{candidate['name']}\" - {candidate['frequency']} locations, "
                      f"{regions} regions (conf: {candidate['confidence_score']:.3f})")
        
        # Examples needing review
        if needs_review:
            print(f"\nüîç EXAMPLES NEEDING REVIEW:")
            for i, candidate in enumerate(needs_review[:3], 1):
                regions = len(candidate.get('locations', []))
                print(f"   {i}. \"{candidate['name']}\" - {candidate['frequency']} locations, "
                      f"{regions} regions (conf: {candidate['confidence_score']:.3f})")
        
        # Common rejections
        if top_rejected:
            print(f"\n‚ùå COMMON REJECTIONS:")
            for i, candidate in enumerate(top_rejected[:3], 1):
                print(f"   {i}. \"{candidate['name']}\" - {candidate.get('recommendation_reason', 'No reason')[:50]}...")
        
        print(f"\n‚úÖ Recommendation analysis completed!")
        print("="*70)
        
        return report
    
    def _get_examples_by_status(self, status: str, limit: int = 5) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º"""
        examples = []
        
        try:
            with psycopg2.connect(self.db_connection_string) as conn:
                with conn.cursor(cursor_factory=RealDictCursor) as cur:
                    cur.execute("""
                        SELECT name, frequency, locations, confidence_score, 
                               recommendation_reason, suggested_canonical_name
                        FROM osm_ukraine.brand_candidates
                        WHERE status = %s 
                        AND reviewed_by = 'recommendation_engine'
                        ORDER BY confidence_score DESC, frequency DESC
                        LIMIT %s
                    """, (status, limit))
                    
                    for row in cur.fetchall():
                        examples.append(dict(row))
                        
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É '{status}': {e}")
        
        return examples


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ recommendation engine
        engine = BrandRecommendationEngine(DB_CONNECTION_STRING)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        report = engine.run_recommendations()
        
        return 0
        
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)