"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö endpoints GeoRetail API
–í–µ—Ä—Å—ñ—è: 3.0.0 - –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö territories endpoints
"""

import requests
import json
import time
from typing import Dict, List, Optional, Any
from datetime import datetime
import logging
from tabulate import tabulate

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class GeoRetailAPITester:
    """–ö–ª–∞—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è GeoRetail API endpoints"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.token = None
        self.headers = {"Content-Type": "application/json"}
        self.test_results = []
        
    def test_endpoint(self, method: str, endpoint: str, data: Optional[Dict] = None, 
                     params: Optional[Dict] = None, requires_auth: bool = False, 
                     use_form_data: bool = False) -> Dict:
        """–¢–µ—Å—Ç—É—î –æ–¥–∏–Ω endpoint"""
        url = f"{self.base_url}{endpoint}"
        headers = self.headers.copy()
        
        if requires_auth and self.token:
            headers["Authorization"] = f"Bearer {self.token}"
        
        start_time = time.time()
        
        try:
            if method == "GET":
                response = requests.get(url, headers=headers, params=params)
            elif method == "POST":
                if use_form_data:
                    # –î–ª—è auth endpoints –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ form-data
                    response = requests.post(
                        url, 
                        data=data,
                        headers={"Authorization": headers.get("Authorization")} if "Authorization" in headers else {}
                    )
                else:
                    # –î–ª—è —ñ–Ω—à–∏—Ö - JSON
                    response = requests.post(url, headers=headers, json=data)
            else:
                response = requests.request(method, url, headers=headers, json=data, params=params)
                
            elapsed_time = round((time.time() - start_time) * 1000, 2)  # –º—Å
            
            result = {
                "endpoint": endpoint,
                "method": method,
                "status": response.status_code,
                "time_ms": elapsed_time,
                "success": 200 <= response.status_code < 300,
                "error": None,
                "data_sample": None
            }
            
            if result["success"]:
                try:
                    data = response.json()
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑—Ä–∞–∑–æ–∫ –¥–∞–Ω–∏—Ö
                    if isinstance(data, list):
                        result["data_sample"] = f"List with {len(data)} items"
                        if len(data) > 0:
                            result["data_sample"] += f", first item keys: {list(data[0].keys()) if isinstance(data[0], dict) else 'not dict'}"
                    elif isinstance(data, dict):
                        result["data_sample"] = f"Dict with keys: {list(data.keys())[:5]}"
                    else:
                        result["data_sample"] = str(type(data))
                except:
                    result["data_sample"] = "Non-JSON response"
            else:
                result["error"] = response.text[:200]
                
        except Exception as e:
            result = {
                "endpoint": endpoint,
                "method": method,
                "status": "ERROR",
                "time_ms": 0,
                "success": False,
                "error": str(e)[:200],
                "data_sample": None
            }
            
        self.test_results.append(result)
        return result
    
    def attempt_login(self, username_or_email: str, password: str) -> bool:
        """–°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
        logger.info(f"üîê –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —è–∫ {username_or_email}...")
        
        endpoint = "/api/v2/auth/login"
        
        # OAuth2PasswordRequestForm –æ—á—ñ–∫—É—î username —ñ password —è–∫ FORM-DATA
        credentials = {
            "username": username_or_email,
            "password": password
        }
        
        result = self.test_endpoint("POST", endpoint, credentials, use_form_data=True)
        
        if result["success"]:
            try:
                response = requests.post(
                    f"{self.base_url}{endpoint}", 
                    data=credentials
                )
                response_data = response.json()
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω
                self.token = response_data.get("access_token")
                
                if self.token:
                    logger.info(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
                    logger.info(f"   ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–∫–µ–Ω: {self.token[:30]}...")
                    
                    # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    if "user" in response_data:
                        user_info = response_data["user"]
                        logger.info(f"   üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_info.get('email')}")
                        logger.info(f"   üé≠ –†–æ–ª—ñ: {user_info.get('roles', [])}")
                    
                    return True
                else:
                    logger.warning(f"   ‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                    return False
                    
            except Exception as e:
                logger.error(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
                return False
        else:
            if result["status"] == 401:
                logger.warning(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å")
            elif result["status"] == 403:
                logger.warning(f"   ‚ö†Ô∏è –ê–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–±–æ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
            elif result["status"] == 500:
                logger.error(f"   ‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä—É")
            else:
                logger.warning(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {result['error']}")
            return False
    
    def test_territories_endpoints(self, requires_auth: bool = True):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –†–ï–ê–õ–¨–ù–ò–• territories endpoints"""
        logger.info("\nüìç –¢–ï–°–¢–£–í–ê–ù–ù–Ø TERRITORIES ENDPOINTS")
        logger.info("=" * 60)
        
        endpoints = [
            # –†–µ–∞–ª—å–Ω—ñ endpoints –∑ router.py
            ("GET", "/api/v2/territories/admin/geometries/all", None, 
             {"level": "oblast", "simplified": True}, "–í—Å—ñ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –æ–±–ª–∞—Å—Ç–µ–π"),
            
            ("GET", "/api/v2/territories/admin/geometries/all", None,
             {"level": "raion", "simplified": True}, "–í—Å—ñ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó —Ä–∞–π–æ–Ω—ñ–≤"),
            
            ("GET", "/api/v2/territories/admin/metrics/all", None,
             {"metric_x": "population", "metric_y": "income_index"}, "–ú–µ—Ç—Ä–∏–∫–∏ –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å"),
            
            ("GET", "/api/v2/territories/admin/32000000000", None, None, 
             "–î–µ—Ç–∞–ª—ñ –ø–æ –ö–∏—î–≤—É (KOATUU)"),
            
            ("GET", "/api/v2/territories/admin/14000000000", None, None,
             "–î–µ—Ç–∞–ª—ñ –ø–æ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ"),
            
            ("GET", "/api/v2/territories/h3/grid", None,
             {"bounds": "30.2,50.3,30.7,50.6", "resolution": 7}, "H3 —Å—ñ—Ç–∫–∞ (resolution 7)"),
            
            ("GET", "/api/v2/territories/h3/881f1d4b9ffffff", None, None,
             "–î–µ—Ç–∞–ª—ñ H3 –≥–µ–∫—Å–∞–≥–æ–Ω—É"),
            
            ("GET", "/api/v2/territories/poi/search", None,
             {"bounds": "30.2,50.3,30.7,50.6", "limit": 10}, "–ü–æ—à—É–∫ POI"),
            
            ("GET", "/api/v2/territories/competition/nearby", None,
             {"lat": 50.45, "lon": 30.52, "radius_km": 5}, "–ü–æ—à—É–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤"),
            
            ("GET", "/api/v2/territories/bivariate/config", None,
             {"metric_x": "population", "metric_y": "income_index", "bins": 3}, 
             "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è bivariate"),
            
            ("GET", "/api/v2/territories/metrics/available", None, None,
             "–î–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏"),
            
            ("GET", "/api/v2/territories/statistics/32000000000", None, 
             {"period": "month"}, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó"),
            
            ("POST", "/api/v2/territories/search", 
             {"query": "–ö–∏—ó–≤", "limit": 10}, None, "–ü–æ—à—É–∫ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π"),
            
            ("GET", "/api/v2/territories/export/geojson", None,
             {"koatuu_code": "32000000000"}, "–ï–∫—Å–ø–æ—Ä—Ç –≤ GeoJSON"),
            
            ("GET", "/api/v2/territories/health", None, None, 
             "Territory service health"),
        ]
        
        for method, endpoint, data, params, description in endpoints:
            logger.info(f"\nüîç –¢–µ—Å—Ç—É—î–º–æ: {description}")
            logger.info(f"   Endpoint: {method} {endpoint}")
            if params:
                logger.info(f"   Params: {params}")
            if data:
                logger.info(f"   Data: {data}")
                
            result = self.test_endpoint(method, endpoint, data, params, requires_auth=requires_auth)
            
            if result["success"]:
                logger.info(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ! –ö–æ–¥: {result['status']}, –ß–∞—Å: {result['time_ms']}ms")
                logger.info(f"   üìä –î–∞–Ω—ñ: {result['data_sample']}")
            elif result["status"] == 403:
                logger.warning(f"   üîí –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ (403)")
            elif result["status"] == 404:
                logger.warning(f"   ‚ö†Ô∏è Endpoint –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (404)")
            elif result["status"] == 500:
                logger.error(f"   ‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500)")
                logger.error(f"   –î–µ—Ç–∞–ª—ñ: {result['error'][:100]}")
            else:
                logger.error(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞! –ö–æ–¥: {result['status']}")
                logger.error(f"   –î–µ—Ç–∞–ª—ñ: {result['error']}")
    
    def test_auth_endpoints(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è auth endpoints"""
        logger.info("\nüîë –¢–ï–°–¢–£–í–ê–ù–ù–Ø AUTH ENDPOINTS")
        logger.info("=" * 60)
        
        # –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—à—ñ auth endpoints
        if self.token:
            # –¢–µ—Å—Ç /me endpoint
            logger.info("\nüîç –¢–µ—Å—Ç—É—î–º–æ: /api/v2/auth/me")
            result = self.test_endpoint("GET", "/api/v2/auth/me", requires_auth=True)
            if result["success"]:
                logger.info(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ! –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                try:
                    response = requests.get(
                        f"{self.base_url}/api/v2/auth/me",
                        headers={"Authorization": f"Bearer {self.token}"}
                    )
                    user_data = response.json()
                    logger.info(f"   üë§ ID: {user_data.get('id')}")
                    logger.info(f"   üìß Email: {user_data.get('email')}")
                    logger.info(f"   üé≠ –†–æ–ª—ñ: {[r['code'] for r in user_data.get('roles', [])]}")
                    logger.info(f"   üîê Permissions: {len(user_data.get('permissions', []))} –¥–æ–∑–≤–æ–ª—ñ–≤")
                except:
                    pass
            else:
                logger.error(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}")
            
            # –¢–µ—Å—Ç /refresh endpoint
            logger.info("\nüîç –¢–µ—Å—Ç—É—î–º–æ: /api/v2/auth/refresh")
            # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—î–º–æ refresh token –∑ –ª–æ–≥—ñ–Ω—É
            # ... (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            
            # –¢–µ—Å—Ç /logout endpoint
            logger.info("\nüîç –¢–µ—Å—Ç—É—î–º–æ: /api/v2/auth/logout")
            result = self.test_endpoint("POST", "/api/v2/auth/logout", requires_auth=True)
            if result["success"]:
                logger.info(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤")
            else:
                logger.error(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}")
    
    def test_with_different_users(self):
        """–¢–µ—Å—Ç—É—î API –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
        logger.info("\nüë• –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó –†–Ü–ó–ù–ò–ú–ò –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò")
        logger.info("=" * 60)
        
        test_users = [
            {
                "login": "admin@georetail.com",
                "password": "Test123!",
                "role": "Admin",
                "expected_access": ["all"]
            },
            {
                "login": "viewer@georetail.com",
                "password": "Test123!",
                "role": "Viewer",
                "expected_access": ["view_map", "view_admin_units"]
            },
            {
                "login": "marketing@georetail.com",
                "password": "Test123!",
                "role": "Marketing Analyst",
                "expected_access": ["view_map", "view_competitors"]
            },
            {
                "login": "expansion@georetail.com",
                "password": "Test123!",
                "role": "Expansion Manager",
                "expected_access": ["view_map", "ml_prediction"]
            }
        ]
        
        for user in test_users:
            logger.info(f"\nüßë –¢–µ—Å—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user['role']}")
            logger.info(f"   Email: {user['login']}")
            
            # –°–ø—Ä–æ–±–∞ –ª–æ–≥—ñ–Ω—É
            auth_success = self.attempt_login(user['login'], user['password'])
            
            if auth_success:
                logger.info(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫ {user['role']}")
                
                # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–æ–≤–∏—Ö endpoints
                test_endpoints = [
                    ("/api/v2/territories/admin/geometries/all?level=oblast", "–ì–µ–æ–º–µ—Ç—Ä—ñ—ó"),
                    ("/api/v2/territories/h3/grid?bounds=30.2,50.3,30.7,50.6&resolution=7", "H3 Grid"),
                    ("/api/v2/territories/bivariate/config", "Bivariate Config")
                ]
                
                for endpoint, name in test_endpoints:
                    url = endpoint.split("?")[0]
                    params_str = endpoint.split("?")[1] if "?" in endpoint else ""
                    params = {}
                    if params_str:
                        for param in params_str.split("&"):
                            key, value = param.split("=")
                            params[key] = value
                    
                    result = self.test_endpoint("GET", url, params=params, requires_auth=True)
                    
                    if result["success"]:
                        logger.info(f"      ‚úì –î–æ—Å—Ç—É–ø –¥–æ {name}")
                    elif result["status"] == 403:
                        logger.info(f"      ‚úó –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ {name} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤)")
                    else:
                        logger.info(f"      ‚úó –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ {name} (–∫–æ–¥: {result['status']})")
                
                # –û—á–∏—â–∞—î–º–æ —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                self.token = None
            else:
                logger.warning(f"   ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è")
    
    def test_health_endpoints(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è service endpoints"""
        logger.info("\nüíì –¢–ï–°–¢–£–í–ê–ù–ù–Ø SERVICE ENDPOINTS")
        logger.info("=" * 60)
        
        endpoints = [
            ("GET", "/", None, None, "Root"),
            ("GET", "/api", None, None, "API Info"),
            ("GET", "/health", None, None, "Health Check"),
            ("GET", "/metrics", None, None, "Metrics"),
            ("GET", "/docs", None, None, "Swagger UI"),
            ("GET", "/openapi.json", None, None, "OpenAPI Schema"),
        ]
        
        for method, endpoint, data, params, description in endpoints:
            logger.info(f"\nüîç –¢–µ—Å—Ç—É—î–º–æ: {description}")
            result = self.test_endpoint(method, endpoint, data, params)
            
            if result["success"]:
                logger.info(f"   ‚úÖ –ö–æ–¥: {result['status']}, –ß–∞—Å: {result['time_ms']}ms")
            else:
                logger.error(f"   ‚ùå –ö–æ–¥: {result['status']}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—é"""
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
        logger.info("=" * 60)
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total = len(self.test_results)
        successful = len([r for r in self.test_results if r["success"]])
        failed = total - successful
        avg_time = sum(r["time_ms"] for r in self.test_results if r["time_ms"] > 0) / max(total, 1)
        
        logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: {total}")
        logger.info(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: {successful} ({successful/max(total, 1)*100:.1f}%)")
        logger.info(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {failed} ({failed/max(total, 1)*100:.1f}%)")
        logger.info(f"   ‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {avg_time:.2f}ms")
        
        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        status_codes = {}
        for r in self.test_results:
            status = r["status"]
            if status not in status_codes:
                status_codes[status] = 0
            status_codes[status] += 1
        
        logger.info(f"\nüìä –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–æ–¥–∞—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:")
        for status, count in sorted(status_codes.items()):
            logger.info(f"   {status}: {count} –∑–∞–ø–∏—Ç—ñ–≤")
        
        # –¢–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (—Å–∫–æ—Ä–æ—á–µ–Ω–∞)
        logger.info("\nüìã –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (—Ç–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö):")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–º–∏–ª–∫–æ–≤—ñ
        error_results = [r for r in self.test_results if not r["success"]][:10]
        
        if error_results:
            table_data = []
            for r in error_results:
                table_data.append([
                    "‚ùå",
                    r["method"],
                    r["endpoint"][:50],
                    r["status"],
                    f"{r['time_ms']}ms" if r["time_ms"] > 0 else "N/A",
                    (r["error"] or "")[:50]
                ])
            
            print(tabulate(
                table_data,
                headers=["", "Method", "Endpoint", "Status", "Time", "Error"],
                tablefmt="grid"
            ))
        else:
            logger.info("   üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ñ endpoints
        if failed > 0:
            logger.warning("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ñ endpoints:")
            seen = set()
            for r in self.test_results:
                if not r["success"]:
                    key = f"{r['method']} {r['endpoint']}"
                    if key not in seen:
                        logger.warning(f"   - {key}: {r['status']}")
                        seen.add(key)
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø GEORETAIL API v3.0")
        logger.info(f"üìç Base URL: {self.base_url}")
        logger.info(f"üïê –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {datetime.now()}")
        logger.info("=" * 60)
        
        # 1. –¢–µ—Å—Ç—É—î–º–æ service endpoints
        self.test_health_endpoints()
        
        # 2. –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –∑ admin –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        logger.info("\nüîë –û–°–ù–û–í–ù–ò–ô –¢–ï–°–¢ –ó ADMIN")
        if self.attempt_login("admin@georetail.com", "Test123!"):
            self.test_auth_endpoints()
            self.test_territories_endpoints(requires_auth=True)
        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —è–∫ admin!")
        
        # 3. –¢–µ—Å—Ç—É—î–º–æ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (–æ–ø—Ü—ñ–π–Ω–æ)
        # self.test_with_different_users()
        
        # 4. –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
        self.generate_report()
        
        logger.info("\n‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import sys
    
    # –ü–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) > 1 and sys.argv[1] == "--quick":
        # –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç —Ç—ñ–ª—å–∫–∏ –∑ –æ–¥–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        logger.info("‚ö° –®–í–ò–î–ö–ò–ô –†–ï–ñ–ò–ú –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
        tester = GeoRetailAPITester(base_url="http://localhost:8000")
        
        # –¢—ñ–ª—å–∫–∏ admin –ª–æ–≥—ñ–Ω —ñ –æ—Å–Ω–æ–≤–Ω—ñ endpoints
        if tester.attempt_login("admin@georetail.com", "Test123!"):
            tester.test_health_endpoints()
            tester.test_auth_endpoints()
            tester.test_territories_endpoints(requires_auth=True)
            tester.generate_report()
    elif len(sys.argv) > 1 and sys.argv[1] == "--full":
        # –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –∑ —É—Å—ñ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        logger.info("üî• –ü–û–í–ù–ò–ô –†–ï–ñ–ò–ú –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
        tester = GeoRetailAPITester(base_url="http://localhost:8000")
        tester.test_health_endpoints()
        tester.test_with_different_users()
        tester.generate_report()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ—Å—Ç
        tester = GeoRetailAPITester(base_url="http://localhost:8000")
        tester.run_all_tests()


if __name__ == "__main__":
    main()