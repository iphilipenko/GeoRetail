# test_h3_modal_endpoints.py
"""
üß™ –¢–µ—Å—Ç–∏ –¥–ª—è H3 Modal API endpoints
"""

import pytest
from fastapi.testclient import TestClient
import json
from datetime import datetime

# –ü—Ä–∏–∫–ª–∞–¥ H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è –ö–∏—î–≤–∞
SAMPLE_H3_INDICES = {
    7: "871fb4662ffffff",
    8: "881fb46622fffff", 
    9: "891fb466227ffff",
    10: "8a1fb46622d7fff"
}

class TestHexagonDetails:
    """–¢–µ—Å—Ç–∏ –¥–ª—è /hexagon-details endpoints"""
    
    def test_get_hexagon_details_basic(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ–∫—Å–∞–≥–æ–Ω"""
        h3_index = SAMPLE_H3_INDICES[10]
        response = client.get(f"/api/v1/hexagon-details/details/{h3_index}?resolution=10")
        
        assert response.status_code == 200
        data = response.json()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert "location_info" in data
        assert "metrics" in data
        assert "poi_details" in data
        assert "influence_analysis" in data
        assert "neighbor_coverage" in data
        assert "available_analyses" in data
        assert "generated_at" in data
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ location_info
        location = data["location_info"]
        assert location["h3_index"] == h3_index
        assert location["resolution"] == 10
        assert "center_lon" in location
        assert "center_lat" in location
        assert "area_km2" in location
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ neighbor_coverage
        coverage = data["neighbor_coverage"]
        assert "rings" in coverage
        assert "hexagon_count" in coverage
        assert "area_km2" in coverage
        assert "radius_estimate_m" in coverage
    
    def test_analysis_type_pedestrian_competition(self, client: TestClient):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –ø—ñ—à–æ—Ö—ñ–¥–Ω–æ—ó –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó"""
        h3_index = SAMPLE_H3_INDICES[10]
        response = client.get(
            f"/api/v1/hexagon-details/details/{h3_index}"
            "?resolution=10&analysis_type=pedestrian_competition"
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–∞–ª–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–ª–µ—Ü—å (–¥–ª—è –ø—ñ—à–æ—Ö—ñ–¥–Ω–æ—ó –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ)
        coverage = data["neighbor_coverage"]
        assert coverage["rings"] <= 3  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è pedestrian
        assert coverage["area_km2"] <= 1.0  # –ü—Ä–∏–±–ª–∏–∑–Ω–æ –¥–ª—è 0.5 –∫–º¬≤ target
    
    def test_analysis_type_market_overview(self, client: TestClient):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –æ–≥–ª—è–¥—É —Ä–∏–Ω–∫—É"""
        h3_index = SAMPLE_H3_INDICES[8]  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ–Ω—à–∏–π resolution
        response = client.get(
            f"/api/v1/hexagon-details/details/{h3_index}"
            "?resolution=8&analysis_type=market_overview"
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±—ñ–ª—å—à–µ –∫—ñ–ª–µ—Ü—å (–¥–ª—è —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –æ–≥–ª—è–¥—É)
        coverage = data["neighbor_coverage"]
        assert coverage["rings"] >= 2  # –ú—ñ–Ω—ñ–º—É–º –¥–ª—è market overview
        
    def test_custom_rings(self, client: TestClient):
        """–¢–µ—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–ª–µ—Ü—å"""
        h3_index = SAMPLE_H3_INDICES[9]
        custom_rings = 5
        
        response = client.get(
            f"/api/v1/hexagon-details/details/{h3_index}"
            f"?resolution=9&analysis_type=custom&custom_rings={custom_rings}"
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç–æ—á–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–ª–µ—Ü—å
        coverage = data["neighbor_coverage"]
        assert coverage["rings"] == custom_rings
    
    def test_available_analyses_structure(self, client: TestClient):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤"""
        h3_index = SAMPLE_H3_INDICES[10]
        response = client.get(f"/api/v1/hexagon-details/details/{h3_index}?resolution=10")
        
        assert response.status_code == 200
        data = response.json()
        
        analyses = data["available_analyses"]
        assert len(analyses) >= 4  # –ú—ñ–Ω—ñ–º—É–º 4 —Ç–∏–ø–∏ –∞–Ω–∞–ª—ñ–∑—É
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        for analysis in analyses:
            assert "analysis_type" in analysis
            assert "name" in analysis
            assert "description" in analysis
            assert "optimal_rings" in analysis
            assert "estimated_area_km2" in analysis
            assert "hexagon_count" in analysis
            assert "max_rings" in analysis
    
    def test_poi_influence_analysis(self, client: TestClient):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –≤–ø–ª–∏–≤—É POI —Ç–∞ –±—Ä–µ–Ω–¥—ñ–≤"""
        h3_index = SAMPLE_H3_INDICES[10]
        response = client.get(f"/api/v1/hexagon-details/details/{h3_index}?resolution=10")
        
        assert response.status_code == 200
        data = response.json()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ POI details
        poi_details = data["poi_details"]
        assert isinstance(poi_details, list)
        
        if poi_details:  # –Ø–∫—â–æ —î POI
            first_poi = poi_details[0]
            assert "name" in first_poi
            assert "functional_group" in first_poi
            assert "influence_weight" in first_poi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ influence analysis
        influence_analysis = data["influence_analysis"]
        assert isinstance(influence_analysis, list)
        
        if influence_analysis:  # –Ø–∫—â–æ —î –∞–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É
            first_analysis = influence_analysis[0]
            assert "functional_group" in first_analysis
            assert "count" in first_analysis
            assert "brands" in first_analysis

class TestAnalysisPreview:
    """–¢–µ—Å—Ç–∏ –¥–ª—è /analysis-preview endpoint"""
    
    def test_get_analysis_preview(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è preview –∞–Ω–∞–ª—ñ–∑—ñ–≤"""
        h3_index = SAMPLE_H3_INDICES[10]
        response = client.get(f"/api/v1/hexagon-details/analysis-preview/{h3_index}?resolution=10")
        
        assert response.status_code == 200
        data = response.json()
        
        assert "h3_index" in data
        assert "resolution" in data
        assert "available_analyses" in data
        assert "generated_at" in data
        
        analyses = data["available_analyses"]
        assert len(analyses) >= 4
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –≤—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–∏–ø–∏
        analysis_types = [a["analysis_type"] for a in analyses]
        assert "pedestrian_competition" in analysis_types
        assert "site_selection" in analysis_types
        assert "market_overview" in analysis_types
        assert "custom" in analysis_types

class TestCoverageCalculator:
    """–¢–µ—Å—Ç–∏ –¥–ª—è /coverage-calculator endpoint"""
    
    def test_coverage_calculator_basic(self, client: TestClient):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è"""
        response = client.get("/api/v1/hexagon-details/coverage-calculator?resolution=10&rings=2")
        
        assert response.status_code == 200
        data = response.json()
        
        assert "resolution" in data
        assert "rings" in data
        assert "total_area_km2" in data
        assert "total_hexagon_count" in data
        assert "radius_estimate_m" in data
        assert "coverage_breakdown" in data
        assert "recommendations" in data
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
        assert data["resolution"] == 10
        assert data["rings"] == 2
        assert data["total_hexagon_count"] == 19  # 1 + 3*2*(2+1) = 19
    
    def test_coverage_calculator_different_resolutions(self, client: TestClient):
        """–¢–µ—Å—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö resolutions"""
        rings = 1
        
        for resolution in [7, 8, 9, 10]:
            response = client.get(
                f"/api/v1/hexagon-details/coverage-calculator?resolution={resolution}&rings={rings}"
            )
            
            assert response.status_code == 200
            data = response.json()
            
            assert data["resolution"] == resolution
            assert data["rings"] == rings
            assert data["total_hexagon_count"] == 7  # 1 + 3*1*(1+1) = 7
            
            # –ü–ª–æ—â–∞ –ø–æ–≤–∏–Ω–Ω–∞ –∑–±—ñ–ª—å—à—É–≤–∞—Ç–∏—Å—è –¥–ª—è –º–µ–Ω—à–∏—Ö resolution
            if resolution == 7:
                assert data["total_area_km2"] > 30  # H3-7 –º–∞—î –≤–µ–ª–∏–∫—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
            elif resolution == 10:
                assert data["total_area_km2"] < 1   # H3-10 –º–∞—î –º–∞–ª–µ–Ω—å–∫—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
    
    def test_coverage_breakdown(self, client: TestClient):
        """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ breakdown –ø–æ–∫—Ä–∏—Ç—Ç—è"""
        response = client.get("/api/v1/hexagon-details/coverage-calculator?resolution=9&rings=3")
        
        assert response.status_code == 200
        data = response.json()
        
        breakdown = data["coverage_breakdown"]
        assert len(breakdown) >= 4  # 0, 1, 2, 3 –∫—ñ–ª—å—Ü—è
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ breakdown –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π
        for i, step in enumerate(breakdown):
            assert "rings" in step
            assert "area_km2" in step
            assert "hexagon_count" in step
            assert "description" in step
            assert step["rings"] == i
    
    def test_coverage_recommendations(self, client: TestClient):
        """–¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ø–æ –ø–æ–∫—Ä–∏—Ç—Ç—é"""
        # –¢–µ—Å—Ç –¥–ª—è –ø—ñ—à–æ—Ö—ñ–¥–Ω–æ–≥–æ —Ä–∞–¥—ñ—É—Å—É
        response = client.get("/api/v1/hexagon-details/coverage-calculator?resolution=10&rings=1")
        data = response.json()
        recommendations = data["recommendations"]
        assert recommendations["pedestrian_range"] is True
        
        # –¢–µ—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ä–∞–¥—ñ—É—Å—É
        response = client.get("/api/v1/hexagon-details/coverage-calculator?resolution=8&rings=4")
        data = response.json()
        recommendations = data["recommendations"]
        assert recommendations["car_accessible"] is True
        assert recommendations["market_overview"] is True

class TestPOIInHexagon:
    """–¢–µ—Å—Ç–∏ –¥–ª—è /poi-in-hexagon endpoint"""
    
    def test_get_poi_in_hexagon(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è POI –≤ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ"""
        h3_index = SAMPLE_H3_INDICES[10]
        response = client.get(f"/api/v1/hexagon-details/poi-in-hexagon/{h3_index}?resolution=10")
        
        assert response.status_code == 200
        data = response.json()
        
        assert "h3_index" in data
        assert "resolution" in data
        assert "neighbor_rings" in data
        assert "coverage_area_km2" in data
        assert "poi_count" in data
        assert "poi_details" in data
        assert "generated_at" in data
    
    def test_poi_with_neighbors(self, client: TestClient):
        """–¢–µ—Å—Ç POI –∑ —Å—É—Å—ñ–¥–Ω—ñ–º–∏ –≥–µ–∫—Å–∞–≥–æ–Ω–∞–º–∏"""
        h3_index = SAMPLE_H3_INDICES[9]
        neighbor_rings = 2
        
        response = client.get(
            f"/api/v1/hexagon-details/poi-in-hexagon/{h3_index}"
            f"?resolution=9&include_neighbors={neighbor_rings}"
        )
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["neighbor_rings"] == neighbor_rings
        assert data["coverage_area_km2"] > 0
        
        # POI count –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ >= 0
        assert data["poi_count"] >= 0
        assert len(data["poi_details"]) == data["poi_count"]

class TestCompetitiveAnalysis:
    """–¢–µ—Å—Ç–∏ –¥–ª—è /competitive-analysis endpoint"""
    
    def test_competitive_analysis(self, client: TestClient):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""
        h3_index = SAMPLE_H3_INDICES[10]
        response = client.get(
            f"/api/v1/hexagon-details/competitive-analysis/{h3_index}"
            "?resolution=10&radius_rings=2"
        )
        
        assert response.status_code == 200
        data = response.json()
        
        assert "h3_index" in data
        assert "resolution" in data
        assert "analysis_radius_rings" in data
        assert "coverage_area_km2" in data
        assert "competitors_found" in data
        assert "total_competitive_pressure" in data
        assert "competitors" in data
        assert "competitive_analysis" in data
        assert "generated_at" in data
    
    def test_competitive_pressure_calculation(self, client: TestClient):
        """–¢–µ—Å—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Ç–∏—Å–∫—É"""
        h3_index = SAMPLE_H3_INDICES[9]
        response = client.get(
            f"/api/v1/hexagon-details/competitive-analysis/{h3_index}"
            "?resolution=9&radius_rings=3"
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ç–∏—Å–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º (–º–æ–∂–µ –±—É—Ç–∏ 0)
        assert isinstance(data["total_competitive_pressure"], (int, float))
        assert data["competitors_found"] >= 0
        
        # –Ø–∫—â–æ —î –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏, –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∏—Ö
        if data["competitors_found"] > 0:
            assert len(data["competitors"]) > 0
            assert len(data["competitive_analysis"]) > 0

class TestErrorHandling:
    """–¢–µ—Å—Ç–∏ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫"""
    
    def test_invalid_h3_index(self, client: TestClient):
        """–¢–µ—Å—Ç –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º H3 —ñ–Ω–¥–µ–∫—Å–æ–º"""
        invalid_h3 = "invalid_h3_index"
        response = client.get(f"/api/v1/hexagon-details/details/{invalid_h3}?resolution=10")
        
        # –ü–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –ø–æ–º–∏–ª–∫–∞ 404 –∞–±–æ 500
        assert response.status_code in [404, 500]
    
    def test_invalid_resolution(self, client: TestClient):
        """–¢–µ—Å—Ç –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º resolution"""
        h3_index = SAMPLE_H3_INDICES[10]
        
        # –ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π resolution
        response = client.get(f"/api/v1/hexagon-details/details/{h3_index}?resolution=5")
        assert response.status_code == 422  # Validation error
        
        # –ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π resolution
        response = client.get(f"/api/v1/hexagon-details/details/{h3_index}?resolution=15")
        assert response.status_code == 422  # Validation error
    
    def test_invalid_analysis_type(self, client: TestClient):
        """–¢–µ—Å—Ç –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ç–∏–ø–æ–º –∞–Ω–∞–ª—ñ–∑—É"""
        h3_index = SAMPLE_H3_INDICES[10]
        response = client.get(
            f"/api/v1/hexagon-details/details/{h3_index}"
            "?resolution=10&analysis_type=invalid_type"
        )
        
        assert response.status_code == 422  # Validation error
    
    def test_custom_rings_validation(self, client: TestClient):
        """–¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó custom rings"""
        h3_index = SAMPLE_H3_INDICES[10]
        
        # –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∫—ñ–ª–µ—Ü—å
        response = client.get(
            f"/api/v1/hexagon-details/details/{h3_index}"
            "?resolution=10&analysis_type=custom&custom_rings=15"
        )
        assert response.status_code == 422  # Validation error
        
        # –í—ñ–¥'—î–º–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–ª–µ—Ü—å
        response = client.get(
            f"/api/v1/hexagon-details/details/{h3_index}"
            "?resolution=10&analysis_type=custom&custom_rings=-1"
        )
        assert response.status_code == 422  # Validation error

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
@pytest.fixture
def client():
    """–§—ñ–∫—Å—Ç—É—Ä–∞ –¥–ª—è FastAPI test client"""
    from fastapi.testclient import TestClient
    from src.main import app  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π FastAPI app
    
    return TestClient(app)

@pytest.fixture
def sample_hexagon_data():
    """–§—ñ–∫—Å—Ç—É—Ä–∞ –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –¥–∞–Ω–∏—Ö –≥–µ–∫—Å–∞–≥–æ–Ω–∞"""
    return {
        "h3_index": SAMPLE_H3_INDICES[10],
        "resolution": 10,
        "analysis_type": "site_selection"
    }
