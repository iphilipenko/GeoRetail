# test_existing_server.py
"""
üöÄ –¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ–≥–æ H3 Modal API –≤ —ñ—Å–Ω—É—é—á–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î main_safe.py –∑–∞–º—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import json
from datetime import datetime
import time

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BASE_URL = "http://localhost:8000"
TEST_H3_INDICES = {
    7: "871fb4662ffffff",   # –†–∞–π–æ–Ω
    8: "881fb46622fffff",   # –ß–∞—Å—Ç–∏–Ω–∞ —Ä–∞–π–æ–Ω—É  
    9: "891fb466227ffff",   # –ö–≤–∞—Ä—Ç–∞–ª
    10: "8a1fb46622d7fff"   # –í—É–ª–∏—Ü—è
}

def colored_print(text, color="white"):
    """–ö–æ–ª—å–æ—Ä–æ–≤–∏–π –≤–∏–≤—ñ–¥"""
    colors = {
        "red": "\033[91m",
        "green": "\033[92m", 
        "yellow": "\033[93m",
        "blue": "\033[94m",
        "purple": "\033[95m",
        "cyan": "\033[96m",
        "white": "\033[97m",
        "reset": "\033[0m"
    }
    print(f"{colors.get(color, '')}{text}{colors['reset']}")

def test_endpoint(method, url, params=None, expected_status=200, description=""):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è endpoint"""
    colored_print(f"\nüß™ {description}", "cyan")
    colored_print(f"üì° {method.upper()} {url}", "blue")
    if params:
        colored_print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {params}", "yellow")
    
    try:
        start_time = time.time()
        response = requests.get(url, params=params, timeout=10)
        duration = (time.time() - start_time) * 1000
        
        colored_print(f"‚è±Ô∏è {duration:.0f}ms | üìä –°—Ç–∞—Ç—É—Å: {response.status_code}", "white")
        
        if response.status_code == expected_status:
            colored_print(f"‚úÖ SUCCESS", "green")
            try:
                data = response.json()
                
                # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö endpoints
                if 'available_features' in data:
                    features = data['available_features']
                    colored_print(f"üéØ H3 Modal API: {features.get('h3_modal_api', False)}", "green" if features.get('h3_modal_api') else "red")
                    colored_print(f"üéØ Database Integration: {features.get('database_integration', False)}", "green" if features.get('database_integration') else "red")
                
                elif 'location_info' in data:
                    loc = data['location_info']
                    colored_print(f"üìç H3-{loc.get('resolution')}: {loc.get('h3_index', '')[:12]}...", "cyan")
                    colored_print(f"üìê {loc.get('center_lat'):.6f}, {loc.get('center_lon'):.6f}", "cyan")
                    
                elif 'resolution' in data and 'rings' in data:
                    colored_print(f"üßÆ H3-{data['resolution']}, {data['rings']} –∫—ñ–ª–µ—Ü—å = {data.get('total_area_km2', 'N/A')} –∫–º¬≤", "purple")
                    
                elif 'status' in data:
                    status_color = "green" if data['status'] == 'success' else "yellow"
                    colored_print(f"üìà –°—Ç–∞—Ç—É—Å: {data['status']}", status_color)
                    
                return True, data
                
            except json.JSONDecodeError:
                colored_print(f"‚ö†Ô∏è –ù–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å", "yellow")
                return response.status_code == expected_status, response.text
        else:
            colored_print(f"‚ùå FAILED: {response.status_code}", "red")
            return False, response.text
            
    except requests.exceptions.ConnectionError:
        colored_print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ {BASE_URL}", "red")
        colored_print(f"üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å: cd src && python main_safe.py", "yellow")
        return False, "Connection failed"
        
    except Exception as e:
        colored_print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", "red")
        return False, str(e)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    colored_print(f"üöÄ –¢–ï–°–¢ –Ü–ù–¢–ï–ì–†–û–í–ê–ù–û–ì–û H3 MODAL API", "cyan")
    colored_print(f"üåê –Ü—Å–Ω—É—é—á–∏–π —Å–µ—Ä–≤–µ—Ä: {BASE_URL}", "blue")
    colored_print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", "white")
    print("="*60)
    
    tests = []
    
    # 1. –ö–æ—Ä—ñ–Ω—å API - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
    success, data = test_endpoint(
        "GET", f"{BASE_URL}/",
        description="Root endpoint - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó H3 Modal API"
    )
    tests.append(("Root Integration Check", success))
    
    # 2. Health Check
    success, _ = test_endpoint(
        "GET", f"{BASE_URL}/health",
        description="Health Check - —Å—Ç–∞–Ω –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"
    )
    tests.append(("Health Check", success))
    
    # 3. Database Connection (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
    success, db_data = test_endpoint(
        "GET", f"{BASE_URL}/api/v1/database/test-connection",
        description="Database Test - PostgreSQL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"
    )
    tests.append(("Database Connection", success))
    
    if not success or (isinstance(db_data, dict) and db_data.get('status') == 'error'):
        colored_print("\n‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–∞—Ü—é—î–º–æ –∑ mock –¥–∞–Ω–∏–º–∏", "yellow")
    
    # 4. Coverage Calculator
    success, _ = test_endpoint(
        "GET", f"{BASE_URL}/api/v1/hexagon-details/coverage-calculator",
        params={"resolution": 10, "rings": 2},
        description="Coverage Calculator - H3 –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏"
    )
    tests.append(("Coverage Calculator", success))
    
    # 5. Analysis Preview
    h3_index = TEST_H3_INDICES[10]
    success, _ = test_endpoint(
        "GET", f"{BASE_URL}/api/v1/hexagon-details/analysis-preview/{h3_index}",
        params={"resolution": 10},
        description="Analysis Preview - –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –∞–Ω–∞–ª—ñ–∑—É"
    )
    tests.append(("Analysis Preview", success))
    
    # 6. Hexagon Details
    success, _ = test_endpoint(
        "GET", f"{BASE_URL}/api/v1/hexagon-details/details/{h3_index}",
        params={"resolution": 10, "analysis_type": "pedestrian_competition"},
        description="Hexagon Details - –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ª–æ–∫–∞—Ü—ñ—ó"
    )
    tests.append(("Hexagon Details", success))
    
    # 7. POI –≤ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ
    success, _ = test_endpoint(
        "GET", f"{BASE_URL}/api/v1/hexagon-details/poi-in-hexagon/{h3_index}",
        params={"resolution": 10, "include_neighbors": 1},
        description="POI in Hexagon - –ø–æ—à—É–∫ —Ç–æ—á–æ–∫ —ñ–Ω—Ç–µ—Ä–µ—Å—É"
    )
    tests.append(("POI in Hexagon", success))
    
    # 8. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
    success, _ = test_endpoint(
        "GET", f"{BASE_URL}/api/v1/hexagon-details/competitive-analysis/{h3_index}",
        params={"resolution": 10, "radius_rings": 2},
        description="Competitive Analysis - –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó"
    )
    tests.append(("Competitive Analysis", success))
    
    # 9. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö endpoints
    if data and isinstance(data, dict) and data.get('available_features', {}).get('osm_extractor'):
        success, _ = test_endpoint(
            "GET", f"{BASE_URL}/osm/info",
            description="OSM Integration - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"
        )
        tests.append(("OSM Integration", success))
    
    if data and isinstance(data, dict) and data.get('available_features', {}).get('neo4j'):
        success, _ = test_endpoint(
            "GET", f"{BASE_URL}/neo4j/info",
            description="Neo4j Integration - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥—Ä–∞—Ñ–æ–≤–æ—ó –ë–î"
        )
        tests.append(("Neo4j Integration", success))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "="*80)
    colored_print(f"üèÅ –ü–Ü–î–°–£–ú–û–ö –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á", "cyan")
    print("="*80)
    
    passed = sum(1 for _, success in tests if success)
    total = len(tests)
    
    for test_name, success in tests:
        status = "‚úÖ" if success else "‚ùå"
        color = "green" if success else "red"
        colored_print(f"{status} {test_name}", color)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed >= total * 0.8:  # 80%+ success
        colored_print(f"üéâ –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –£–°–ü–Ü–®–ù–ê!", "green")
        colored_print(f"‚úÖ H3 Modal API –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è", "green")
        print(f"\nüåê –î–æ—Å—Ç—É–ø–Ω—ñ endpoints:")
        print(f"   üìö Swagger UI: {BASE_URL}/docs")
        print(f"   üîß Health: {BASE_URL}/health")
        print(f"   üóÇÔ∏è H3 Modal: {BASE_URL}/api/v1/hexagon-details/")
        print(f"   üíæ Database: {BASE_URL}/api/v1/database/test-connection")
    elif passed >= total * 0.6:  # 60%+ success
        colored_print(f"üü° –ß–ê–°–¢–ö–û–í–ê –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø", "yellow")
        colored_print(f"‚ö†Ô∏è –î–µ—è–∫—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "yellow")
    else:
        colored_print(f"üî¥ –ü–†–û–ë–õ–ï–ú–ò –ó –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ñ–Æ", "red")
        colored_print(f"üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞", "red")
    
    success_rate = (passed / total) * 100
    colored_print(f"üìà –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ: {success_rate:.1f}%", "white")
    
    print(f"\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print(f"   1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ {BASE_URL}/docs –¥–ª—è –ø–æ–≤–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó")
    print(f"   2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ {BASE_URL}/health –¥–ª—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏")
    print(f"   3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ PostgreSQL –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
    print(f"   4. –Ü–Ω—Ç–µ–≥—Ä—É–π—Ç–µ –∑ frontend –¥–æ–¥–∞—Ç–∫–æ–º")
    
if __name__ == "__main__":
    main()
