# test_api_manually.py\n\"\"\"\nüß™ –†—É—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è H3 Modal API endpoints\n–ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ API –±–µ–∑ pytest\n\"\"\"\n\nimport requests\nimport json\nfrom datetime import datetime\nimport time\n\n# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è\nBASE_URL = \"http://localhost:8000\"\nSAMPLE_H3_INDICES = {\n    7: \"871fb4662ffffff\",\n    8: \"881fb46622fffff\", \n    9: \"891fb466227ffff\",\n    10: \"8a1fb46622d7fff\"\n}\n\ndef test_endpoint(method, url, expected_status=200, params=None, description=\"\"):\n    \"\"\"–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint\"\"\"\n    print(f\"\\n{'='*60}\")\n    print(f\"üß™ –¢–ï–°–¢: {description}\")\n    print(f\"üì° {method.upper()} {url}\")\n    if params:\n        print(f\"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}\")\n    print(f\"{'='*60}\")\n    \n    try:\n        start_time = time.time()\n        \n        if method.lower() == 'get':\n            response = requests.get(url, params=params, timeout=30)\n        else:\n            response = requests.request(method, url, params=params, timeout=30)\n        \n        end_time = time.time()\n        duration = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö\n        \n        print(f\"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {duration:.0f}ms\")\n        print(f\"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}\")\n        \n        if response.status_code == expected_status:\n            print(f\"‚úÖ SUCCESS: –°—Ç–∞—Ç—É—Å {response.status_code} (–æ–∂–∏–¥–∞–ª—Å—è {expected_status})\")\n            \n            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON\n            try:\n                data = response.json()\n                print(f\"üì¶ JSON —Ä–∞–∑–º–µ—Ä: {len(json.dumps(data))} —Å–∏–º–≤–æ–ª–æ–≤\")\n                \n                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞\n                if isinstance(data, dict):\n                    print(f\"üîë –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}\")\n                    \n                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ endpoints\n                    if 'location_info' in data:\n                        loc = data['location_info']\n                        print(f\"üìç –õ–æ–∫–∞—Ü–∏—è: H3-{loc.get('resolution', 'N/A')} {loc.get('h3_index', 'N/A')}\")\n                        print(f\"üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {loc.get('center_lat', 'N/A')}, {loc.get('center_lon', 'N/A')}\")\n                        print(f\"üìè –ü–ª–æ—â–∞–¥—å: {loc.get('area_km2', 'N/A')} –∫–º¬≤\")\n                        \n                    if 'neighbor_coverage' in data:\n                        cov = data['neighbor_coverage']\n                        print(f\"üîó –ü–æ–∫—Ä—ã—Ç–∏–µ: {cov.get('rings', 'N/A')} –∫–æ–ª–µ—Ü, {cov.get('hexagon_count', 'N/A')} –≥–µ–∫—Å–∞–≥–æ–Ω–æ–≤\")\n                        print(f\"üìä –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {cov.get('area_km2', 'N/A')} –∫–º¬≤\")\n                        \n                    if 'poi_details' in data:\n                        poi_count = len(data['poi_details'])\n                        print(f\"üè™ POI –Ω–∞–π–¥–µ–Ω–æ: {poi_count}\")\n                        \n                        if poi_count > 0:\n                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ POI\n                            for i, poi in enumerate(data['poi_details'][:3]):\n                                name = poi.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')\n                                brand = poi.get('canonical_name', 'N/A')\n                                influence = poi.get('influence_weight', 'N/A')\n                                print(f\"  ‚îî‚îÄ POI {i+1}: {name} | –ë—Ä–µ–Ω–¥: {brand} | –í–ª–∏—è–Ω–∏–µ: {influence}\")\n                    \n                    if 'available_analyses' in data:\n                        analyses = data['available_analyses']\n                        print(f\"üìã –î–æ—Å—Ç—É–ø–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {len(analyses)}\")\n                        for analysis in analyses:\n                            name = analysis.get('name', 'N/A')\n                            rings = analysis.get('optimal_rings', 'N/A')\n                            area = analysis.get('estimated_area_km2', 'N/A')\n                            print(f\"  ‚îî‚îÄ {name}: {rings} –∫–æ–ª–µ—Ü, {area} –∫–º¬≤\")\n                    \n                    if 'coverage_breakdown' in data:\n                        breakdown = data['coverage_breakdown']\n                        print(f\"üìà Breakdown —à–∞–≥–æ–≤: {len(breakdown)}\")\n                        for step in breakdown[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3\n                            rings = step.get('rings', 'N/A')\n                            area = step.get('area_km2', 'N/A')\n                            count = step.get('hexagon_count', 'N/A')\n                            print(f\"  ‚îî‚îÄ {rings} –∫–æ–ª–µ—Ü: {area} –∫–º¬≤, {count} –≥–µ–∫—Å–∞–≥–æ–Ω–æ–≤\")\n                \n                elif isinstance(data, list):\n                    print(f\"üìã –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data)}\")\n                    \n                return True, data\n                \n            except json.JSONDecodeError:\n                print(f\"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON\")\n                print(f\"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}...\")\n                return response.status_code == expected_status, response.text\n                \n        else:\n            print(f\"‚ùå FAILED: –°—Ç–∞—Ç—É—Å {response.status_code} (–æ–∂–∏–¥–∞–ª—Å—è {expected_status})\")\n            print(f\"üìÑ –û—à–∏–±–∫–∞: {response.text[:300]}...\")\n            return False, response.text\n            \n    except requests.exceptions.ConnectionError:\n        print(f\"‚ùå CONNECTION ERROR: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {BASE_URL}\")\n        print(f\"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn src.main:app --reload\")\n        return False, \"Connection failed\"\n        \n    except requests.exceptions.Timeout:\n        print(f\"‚ùå TIMEOUT: –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 30 —Å–µ–∫—É–Ω–¥\")\n        return False, \"Timeout\"\n        \n    except Exception as e:\n        print(f\"‚ùå UNEXPECTED ERROR: {str(e)}\")\n        return False, str(e)\n\ndef main():\n    \"\"\"–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\"\"\"\n    print(f\"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï H3 MODAL API\")\n    print(f\"üåê Base URL: {BASE_URL}\")\n    print(f\"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    \n    # –°—á–µ—Ç—á–∏–∫–∏\n    total_tests = 0\n    passed_tests = 0\n    \n    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/health\",\n        description=\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ endpoint\n    h3_index = SAMPLE_H3_INDICES[10]\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/details/{h3_index}\",\n        params={\"resolution\": 10},\n        description=\"–ë–∞–∑–æ–≤—ã–π hexagon details endpoint\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—à–µ—Ö–æ–¥–Ω–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/details/{h3_index}\",\n        params={\"resolution\": 10, \"analysis_type\": \"pedestrian_competition\"},\n        description=\"–ê–Ω–∞–ª–∏–∑ –ø–µ—à–µ—Ö–æ–¥–Ω–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ market overview\n    h3_index_8 = SAMPLE_H3_INDICES[8]\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/details/{h3_index_8}\",\n        params={\"resolution\": 8, \"analysis_type\": \"market_overview\"},\n        description=\"–ê–Ω–∞–ª–∏–∑ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞ (H3-8)\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–µ—Ü\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/details/{h3_index}\",\n        params={\"resolution\": 10, \"analysis_type\": \"custom\", \"custom_rings\": 3},\n        description=\"–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–µ—Ü\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ analysis preview\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/analysis-preview/{h3_index}\",\n        params={\"resolution\": 10},\n        description=\"Preview –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ coverage calculator\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/coverage-calculator\",\n        params={\"resolution\": 10, \"rings\": 2},\n        description=\"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ POI –≤ –≥–µ–∫—Å–∞–≥–æ–Ω–µ\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/poi-in-hexagon/{h3_index}\",\n        params={\"resolution\": 10, \"include_neighbors\": 1},\n        description=\"POI –≤ –≥–µ–∫—Å–∞–≥–æ–Ω–µ —Å —Å–æ—Å–µ–¥—è–º–∏\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/competitive-analysis/{h3_index}\",\n        params={\"resolution\": 10, \"radius_rings\": 2},\n        description=\"–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π H3 –∏–Ω–¥–µ–∫—Å\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/details/invalid_h3_index\",\n        params={\"resolution\": 10},\n        expected_status=404,  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É\n        description=\"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ H3 –∏–Ω–¥–µ–∫—Å–∞\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π resolution\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/details/{h3_index}\",\n        params={\"resolution\": 15},  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π resolution\n        expected_status=422,  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n        description=\"–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ resolution\"\n    )\n    total_tests += 1\n    if success: passed_tests += 1\n    \n    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n    print(f\"\\n{'='*80}\")\n    print(f\"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\")\n    print(f\"{'='*80}\")\n    print(f\"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤\")\n    print(f\"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤\")\n    \n    if passed_tests == total_tests:\n        print(f\"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!\")\n        print(f\"üí° API –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å frontend\")\n    else:\n        print(f\"‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨\")\n        print(f\"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\")\n    \n    success_rate = (passed_tests / total_tests) * 100\n    print(f\"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%\")\n    \nif __name__ == \"__main__\":\n    main()\n