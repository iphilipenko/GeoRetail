# quick_api_test.py\n\"\"\"\nüöÄ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç H3 Modal API –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö\n–ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö endpoints\n\"\"\"\n\nimport requests\nimport json\nfrom datetime import datetime\nimport time\n\n# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è\nBASE_URL = \"http://localhost:8000\"\nTEST_H3_INDICES = {\n    7: \"871fb4662ffffff\",   # –†–∞–π–æ–Ω\n    8: \"881fb46622fffff\",   # –ß–∞—Å—Ç–∏–Ω–∞ —Ä–∞–π–æ–Ω—É  \n    9: \"891fb466227ffff\",   # –ö–≤–∞—Ä—Ç–∞–ª\n    10: \"8a1fb46622d7fff\"   # –í—É–ª–∏—Ü—è\n}\n\ndef colored_print(text, color=\"white\"):\n    \"\"\"–ö–æ–ª—å–æ—Ä–æ–≤–∏–π –≤–∏–≤—ñ–¥ –¥–ª—è Windows\"\"\"\n    colors = {\n        \"red\": \"\\033[91m\",\n        \"green\": \"\\033[92m\", \n        \"yellow\": \"\\033[93m\",\n        \"blue\": \"\\033[94m\",\n        \"purple\": \"\\033[95m\",\n        \"cyan\": \"\\033[96m\",\n        \"white\": \"\\033[97m\",\n        \"reset\": \"\\033[0m\"\n    }\n    print(f\"{colors.get(color, '')}{text}{colors['reset']}\")\n\ndef test_endpoint(method, url, params=None, expected_status=200, description=\"\"):\n    \"\"\"–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ endpoint\"\"\"\n    print(f\"\\n{'='*60}\")\n    colored_print(f\"üß™ –¢–ï–°–¢: {description}\", \"cyan\")\n    colored_print(f\"üì° {method.upper()} {url}\", \"blue\")\n    if params:\n        colored_print(f\"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {params}\", \"yellow\")\n    print(f\"{'='*60}\")\n    \n    try:\n        start_time = time.time()\n        \n        if method.lower() == 'get':\n            response = requests.get(url, params=params, timeout=10)\n        else:\n            response = requests.request(method, url, params=params, timeout=10)\n        \n        duration = (time.time() - start_time) * 1000\n        \n        colored_print(f\"‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {duration:.0f}ms\", \"white\")\n        colored_print(f\"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}\", \"white\")\n        \n        if response.status_code == expected_status:\n            colored_print(f\"‚úÖ SUCCESS: –°—Ç–∞—Ç—É—Å {response.status_code}\", \"green\")\n            \n            try:\n                data = response.json()\n                colored_print(f\"üì¶ JSON —Ä–æ–∑–º—ñ—Ä: {len(json.dumps(data))} —Å–∏–º–≤–æ–ª—ñ–≤\", \"white\")\n                \n                # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è\n                if isinstance(data, dict):\n                    colored_print(f\"üîë –û—Å–Ω–æ–≤–Ω—ñ –∫–ª—é—á—ñ: {list(data.keys())[:5]}\", \"white\")\n                    \n                    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\n                    if 'status' in data:\n                        colored_print(f\"üìà –°—Ç–∞—Ç—É—Å: {data['status']}\", \"green\" if data['status'] == 'success' else \"yellow\")\n                    \n                    if 'location_info' in data:\n                        loc = data['location_info']\n                        colored_print(f\"üìç H3-{loc.get('resolution', 'N/A')}: {loc.get('h3_index', 'N/A')[:12]}...\", \"cyan\")\n                        colored_print(f\"üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {loc.get('center_lat', 'N/A'):.6f}, {loc.get('center_lon', 'N/A'):.6f}\", \"cyan\")\n                    \n                    if 'neighbor_coverage' in data:\n                        cov = data['neighbor_coverage']\n                        colored_print(f\"üîó –ü–æ–∫—Ä–∏—Ç—Ç—è: {cov.get('rings', 'N/A')} –∫—ñ–ª–µ—Ü—å, {cov.get('hexagon_count', 'N/A')} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤\", \"purple\")\n                    \n                    if 'poi_details' in data:\n                        poi_count = len(data['poi_details'])\n                        colored_print(f\"üè™ POI –∑–Ω–∞–π–¥–µ–Ω–æ: {poi_count}\", \"green\")\n                    \n                    if 'competitors_found' in data.get('competitive_analysis', {}):\n                        comp_count = data['competitive_analysis']['competitors_found']\n                        colored_print(f\"üè¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤: {comp_count}\", \"yellow\")\n                        \n                return True, data\n                \n            except json.JSONDecodeError:\n                colored_print(f\"‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON\", \"yellow\")\n                colored_print(f\"üìÑ –¢–µ–∫—Å—Ç: {response.text[:100]}...\", \"white\")\n                return response.status_code == expected_status, response.text\n                \n        else:\n            colored_print(f\"‚ùå FAILED: –°—Ç–∞—Ç—É—Å {response.status_code} (–æ—á—ñ–∫—É–≤–∞–≤—Å—è {expected_status})\", \"red\")\n            colored_print(f\"üìÑ –ü–æ–º–∏–ª–∫–∞: {response.text[:200]}...\", \"red\")\n            return False, response.text\n            \n    except requests.exceptions.ConnectionError:\n        colored_print(f\"‚ùå CONNECTION ERROR: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\", \"red\")\n        colored_print(f\"üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: python start_test_server.py\", \"yellow\")\n        return False, \"Connection failed\"\n        \n    except requests.exceptions.Timeout:\n        colored_print(f\"‚ùå TIMEOUT: –ó–∞–ø–∏—Ç –ø–µ—Ä–µ–≤–∏—â–∏–≤ 10 —Å–µ–∫—É–Ω–¥\", \"red\")\n        return False, \"Timeout\"\n        \n    except Exception as e:\n        colored_print(f\"‚ùå UNEXPECTED ERROR: {str(e)}\", \"red\")\n        return False, str(e)\n\ndef main():\n    \"\"\"–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è\"\"\"\n    colored_print(f\"üöÄ H3 MODAL API - –®–í–ò–î–ö–ò–ô –¢–ï–°–¢ –ó –ë–ê–ó–û–Æ –î–ê–ù–ò–•\", \"cyan\")\n    colored_print(f\"üåê Base URL: {BASE_URL}\", \"blue\")\n    colored_print(f\"üìÖ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\", \"white\")\n    \n    tests = []\n    \n    # 1. Health Check\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/health\",\n        description=\"Health Check - –æ—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Ä–≤–µ—Ä–∞\"\n    )\n    tests.append((\"Health Check\", success))\n    \n    # 2. Database Connection Test\n    success, data = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/database/test-connection\",\n        description=\"Database Connection - —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL\"\n    )\n    tests.append((\"Database Connection\", success))\n    \n    # –Ø–∫—â–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ\n    if not success or (isinstance(data, dict) and data.get('status') == 'error'):\n        colored_print(\"\\n‚ö†Ô∏è –£–í–ê–ì–ê: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!\", \"yellow\")\n        colored_print(\"Endpoints –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É—Ç—å –∑ mock –¥–∞–Ω–∏–º–∏\", \"yellow\")\n    \n    # 3. Coverage Calculator (–Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –ë–î)\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/coverage-calculator\",\n        params={\"resolution\": 10, \"rings\": 2},\n        description=\"Coverage Calculator - H3 –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏\"\n    )\n    tests.append((\"Coverage Calculator\", success))\n    \n    # 4. Analysis Preview\n    h3_index = TEST_H3_INDICES[10]\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/analysis-preview/{h3_index}\",\n        params={\"resolution\": 10},\n        description=\"Analysis Preview - –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –∞–Ω–∞–ª—ñ–∑—É\"\n    )\n    tests.append((\"Analysis Preview\", success))\n    \n    # 5. Hexagon Details - –ø—ñ—à–æ—Ö—ñ–¥–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/details/{h3_index}\",\n        params={\"resolution\": 10, \"analysis_type\": \"pedestrian_competition\"},\n        description=\"Hexagon Details - –ø—ñ—à–æ—Ö—ñ–¥–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è\"\n    )\n    tests.append((\"Hexagon Details (pedestrian)\", success))\n    \n    # 6. POI in Hexagon\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/poi-in-hexagon/{h3_index}\",\n        params={\"resolution\": 10, \"include_neighbors\": 1},\n        description=\"POI in Hexagon - –ø–æ—à—É–∫ POI –≤ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ —Ç–∞ —Å—É—Å—ñ–¥–∞—Ö\"\n    )\n    tests.append((\"POI in Hexagon\", success))\n    \n    # 7. Competitive Analysis\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/competitive-analysis/{h3_index}\",\n        params={\"resolution\": 10, \"radius_rings\": 2},\n        description=\"Competitive Analysis - –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó\"\n    )\n    tests.append((\"Competitive Analysis\", success))\n    \n    # 8. –¢–µ—Å—Ç –ø–æ–º–∏–ª–æ–∫ - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π H3\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/hexagon-details/details/invalid_h3_index\",\n        params={\"resolution\": 10},\n        expected_status=400,  # –û—á—ñ–∫—É—î–º–æ –ø–æ–º–∏–ª–∫—É\n        description=\"Error Handling - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π H3 —ñ–Ω–¥–µ–∫—Å\"\n    )\n    tests.append((\"Error Handling\", success))\n    \n    # 9. Database H3 Test (—è–∫—â–æ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)\n    success, _ = test_endpoint(\n        \"GET\", f\"{BASE_URL}/api/v1/database/test-h3/{h3_index}\",\n        description=\"Database H3 Test - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ H3 –¥–∞–Ω–∏—Ö –≤ –ë–î\"\n    )\n    tests.append((\"Database H3 Test\", success))\n    \n    # –ü—ñ–¥—Å—É–º–æ–∫\n    print(f\"\\n{'='*80}\")\n    colored_print(f\"üèÅ –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø\", \"cyan\")\n    print(f\"{'='*80}\")\n    \n    passed = sum(1 for _, success in tests if success)\n    total = len(tests)\n    \n    for test_name, success in tests:\n        status = \"‚úÖ\" if success else \"‚ùå\"\n        color = \"green\" if success else \"red\"\n        colored_print(f\"{status} {test_name}\", color)\n    \n    print(f\"\\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ\")\n    \n    if passed == total:\n        colored_print(f\"üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò!\", \"green\")\n        colored_print(f\"‚úÖ API –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è\", \"green\")\n        colored_print(f\"üí° –í—ñ–¥–∫—Ä–∏–π—Ç–µ Swagger: {BASE_URL}/docs\", \"cyan\")\n    elif passed >= total * 0.7:  # 70%+ success\n        colored_print(f\"üü° –ë–Ü–õ–¨–®–Ü–°–¢–¨ –¢–ï–°–¢–Ü–í –ü–†–û–ô–®–õ–ê\", \"yellow\")\n        colored_print(f\"‚ö†Ô∏è –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î\", \"yellow\")\n    else:\n        colored_print(f\"üî¥ –ë–ê–ì–ê–¢–û –¢–ï–°–¢–Ü–í –ü–†–û–í–ê–õ–ò–õ–û–°–Ø\", \"red\")\n        colored_print(f\"üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –ë–î\", \"red\")\n    \n    success_rate = (passed / total) * 100\n    colored_print(f\"üìà –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ: {success_rate:.1f}%\", \"white\")\n    \n    print(f\"\\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:\")\n    print(f\"   1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ {BASE_URL}/docs –¥–ª—è Swagger UI\")\n    print(f\"   2. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ endpoints —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä\")\n    print(f\"   3. –Ü–Ω—Ç–µ–≥—Ä—É–π—Ç–µ –∑ frontend –¥–æ–¥–∞—Ç–∫–æ–º\")\n    \nif __name__ == \"__main__\":\n    main()\n