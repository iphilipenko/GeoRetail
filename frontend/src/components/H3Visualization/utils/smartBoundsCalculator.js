// frontend/src/components/H3Visualization/utils/smartBoundsCalculator.js
// –†–æ–∑—É–º–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ–∂ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è H3 –¥–∞–Ω–∏—Ö –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏

/**
 * SmartBoundsCalculator - Utility –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö bounds
 * –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö H3 resolutions —Ç–∞ loading strategies
 */
class SmartBoundsCalculator {
  
  /**
   * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bounds –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
   * @param {Object} viewport - –ü–æ—Ç–æ—á–Ω–∏–π viewport {longitude, latitude, zoom}
   * @param {string} strategy - –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: 'conservative', 'balanced', 'comprehensive'
   * @returns {Object} Bounds –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
   */
  static calculate(viewport, strategy = 'balanced') {
    const { longitude, latitude, zoom } = viewport;
    
    console.log(`üéØ Calculating bounds for strategy: ${strategy}, zoom: ${zoom}`);
    
    // –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç—Ä–µ–±
    const strategies = {
      'conservative': {
        // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è Tier 1 (—à–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç)
        description: 'Minimal area for instant loading',
        multiplier: 0.5,
        maxHexagons: 1000,
        targetLoadTime: 2000, // 2 —Å–µ–∫—É–Ω–¥–∏
        priority: 'speed'
      },
      
      'balanced': {
        // –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è Tier 2 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å)
        description: 'Balanced area for full functionality', 
        multiplier: 1.0,
        maxHexagons: 5000,
        targetLoadTime: 8000, // 8 —Å–µ–∫—É–Ω–¥
        priority: 'balance'
      },
      
      'comprehensive': {
        // –†–æ–∑—à–∏—Ä–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è Tier 3 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∏—Ç—Ç—è)
        description: 'Extended area for offline capability',
        multiplier: 2.0,
        maxHexagons: 20000,
        targetLoadTime: 20000, // 20 —Å–µ–∫—É–Ω–¥
        priority: 'coverage'
      }
    };
    
    const config = strategies[strategy];
    if (!config) {
      console.warn(`‚ö†Ô∏è Unknown strategy: ${strategy}, falling back to 'balanced'`);
      return this.calculate(viewport, 'balanced');
    }
    
    // –ë–∞–∑–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bounds
    const baseBounds = this.calculateBaseBounds(latitude, longitude, zoom, config.multiplier);
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ bounds –¥–ª—è different use cases
    const result = {
      // –û—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å
      current: baseBounds,
      
      // –†–æ–∑—à–∏—Ä–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å (–¥–ª—è preloading)
      extended: zoom > 8 ? 
        this.calculateBaseBounds(latitude, longitude, zoom, config.multiplier * 1.5) : 
        null,
      
      // Buffer –æ–±–ª–∞—Å—Ç—å (–¥–ª—è smooth panning)
      buffer: zoom > 6 ? 
        this.calculateBaseBounds(latitude, longitude, zoom, config.multiplier * 2.0) : 
        null,
      
      // Metadata
      metadata: {
        strategy,
        description: config.description,
        priority: config.priority,
        zoom,
        estimatedHexagons: this.estimateHexagonCount(baseBounds, zoom),
        maxHexagons: config.maxHexagons,
        targetLoadTime: config.targetLoadTime,
        optimalResolution: this.getOptimalResolution(zoom)
      }
    };
    
    console.log(`üì¶ Bounds calculated:`, {
      strategy,
      zoom,
      estimatedHexagons: result.metadata.estimatedHexagons,
      area: this.calculateAreaKm2(baseBounds)
    });
    
    return result;
  }
  
  /**
   * –ë–∞–∑–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bounds –¥–ª—è –∑–∞–¥–∞–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–∞ multiplier
   */
  static calculateBaseBounds(lat, lon, zoom, multiplier) {
    // Zoom-aware span calculation
    const baseSpan = 360 / Math.pow(2, zoom);
    const adjustedSpan = baseSpan * multiplier;
    
    // Latitude correction (–Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –∑ longitude)
    const latSpan = adjustedSpan;
    
    // Longitude correction (–≤—Ä–∞—Ö–æ–≤—É—î –∫—Ä–∏–≤–∏–∑–Ω—É –∑–µ–º–ª—ñ)
    const lonSpan = adjustedSpan * Math.cos(lat * Math.PI / 180);
    
    return {
      north: lat + latSpan,
      south: lat - latSpan,
      east: lon + lonSpan,
      west: lon - lonSpan,
      
      // Utility methods
      center: { lat, lon },
      span: { lat: latSpan * 2, lon: lonSpan * 2 }
    };
  }
  
  /**
   * –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ bounds –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—ñ–ª—å–æ–≤–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
   */
  static adaptiveBounds(viewport, targetHexagonCount = 1000) {
    const { zoom, latitude, longitude } = viewport;
    const resolution = this.getOptimalResolution(zoom);
    
    // –û—Ü—ñ–Ω–∫–∞ —â—ñ–ª—å–Ω–æ—Å—Ç—ñ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –Ω–∞ –∫–º¬≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö resolutions
    const densityEstimates = {
      7: 0.12,   // ~0.12 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –Ω–∞ –∫–º¬≤
      8: 0.85,   // ~0.85 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –Ω–∞ –∫–º¬≤
      9: 5.95,   // ~5.95 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –Ω–∞ –∫–º¬≤
      10: 41.65  // ~41.65 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –Ω–∞ –∫–º¬≤
    };
    
    const density = densityEstimates[resolution] || 1.0;
    
    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—ó –ø–ª–æ—â—ñ
    const requiredAreaKm2 = targetHexagonCount / density;
    const spanKm = Math.sqrt(requiredAreaKm2);
    
    console.log(`üéØ Adaptive bounds calculation:`, {
      targetHexagons: targetHexagonCount,
      resolution,
      density: density.toFixed(2),
      requiredAreaKm2: requiredAreaKm2.toFixed(2),
      spanKm: spanKm.toFixed(2)
    });
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ lat/lon degrees
    const latSpan = spanKm / 111; // ~111 –∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å —à–∏—Ä–æ—Ç–∏
    const lonSpan = spanKm / (111 * Math.cos(latitude * Math.PI / 180));
    
    return {
      north: latitude + latSpan,
      south: latitude - latSpan,
      east: longitude + lonSpan,
      west: longitude - lonSpan,
      
      metadata: {
        type: 'adaptive',
        targetHexagonCount,
        resolution,
        density,
        areaKm2: requiredAreaKm2,
        estimatedHexagons: targetHexagonCount
      }
    };
  }
  
  /**
   * –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π H3 resolution –Ω–∞ –æ—Å–Ω–æ–≤—ñ zoom level
   */
  static getOptimalResolution(zoom) {
    // Mapping zoom levels to H3 resolutions
    if (zoom < 7) return 7;   // Oblast level
    if (zoom < 9) return 8;   // District level  
    if (zoom < 11) return 9;  // City level
    if (zoom < 13) return 10; // Neighborhood level
    return 10; // Maximum detail
  }
  
  /**
   * –û—Ü—ñ–Ω–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ —É bounds
   */
  static estimateHexagonCount(bounds, zoom) {
    const resolution = this.getOptimalResolution(zoom);
    const areaKm2 = this.calculateAreaKm2(bounds);
    
    // Density estimates –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö resolutions
    const densityEstimates = {
      7: 0.12, 8: 0.85, 9: 5.95, 10: 41.65
    };
    
    const density = densityEstimates[resolution] || 1.0;
    return Math.round(areaKm2 * density);
  }
  
  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–ª–æ—â—ñ bounds —É –∫–º¬≤
   */
  static calculateAreaKm2(bounds) {
    // –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –Ω–∞ —Å—Ñ–µ—Ä—ñ
    const latDiff = bounds.north - bounds.south;
    const lonDiff = bounds.east - bounds.west;
    
    // –°–µ—Ä–µ–¥–Ω—è —à–∏—Ä–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–µ–∫—Ü—ñ—ó
    const avgLat = (bounds.north + bounds.south) / 2;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É –∫–º (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
    const latKm = latDiff * 111; // 111 –∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å —à–∏—Ä–æ—Ç–∏
    const lonKm = lonDiff * 111 * Math.cos(avgLat * Math.PI / 180);
    
    return Math.abs(latKm * lonKm);
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è bounds –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
   */
  static formatForAPI(bounds) {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: south,west,north,east
    return `${bounds.south.toFixed(6)},${bounds.west.toFixed(6)},${bounds.north.toFixed(6)},${bounds.east.toFixed(6)}`;
  }
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç–æ—á–∫–∞ –≤ bounds
   */
  static containsPoint(bounds, lat, lon) {
    return lat >= bounds.south && 
           lat <= bounds.north && 
           lon >= bounds.west && 
           lon <= bounds.east;
  }
  
  /**
   * –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö bounds —É –æ–¥–∏–Ω
   */
  static mergeBounds(boundsArray) {
    if (!boundsArray || boundsArray.length === 0) return null;
    if (boundsArray.length === 1) return boundsArray[0];
    
    const merged = {
      north: Math.max(...boundsArray.map(b => b.north)),
      south: Math.min(...boundsArray.map(b => b.south)),
      east: Math.max(...boundsArray.map(b => b.east)),
      west: Math.min(...boundsArray.map(b => b.west))
    };
    
    return merged;
  }
  
  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bounds –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ H3 resolution
   */
  static getBoundsForResolution(viewport, resolution, targetCount = 1000) {
    const strategy = this.getStrategyForResolution(resolution);
    const bounds = this.calculate(viewport, strategy);
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ resolution
    const estimated = this.estimateHexagonCount(bounds.current, viewport.zoom);
    
    if (estimated > targetCount * 2) {
      // –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ - –∑–º–µ–Ω—à—É—î–º–æ –æ–±–ª–∞—Å—Ç—å
      return this.calculate(viewport, 'conservative');
    } else if (estimated < targetCount * 0.5) {
      // –ó–∞–º–∞–ª–æ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ - –∑–±—ñ–ª—å—à—É—î–º–æ –æ–±–ª–∞—Å—Ç—å
      return this.calculate(viewport, 'comprehensive');
    }
    
    return bounds;
  }
  
  /**
   * –í–∏–±—ñ—Ä —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ H3 resolution
   */
  static getStrategyForResolution(resolution) {
    switch(resolution) {
      case 7: return 'comprehensive'; // –í–µ–ª–∏–∫—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏ - –º–æ–∂–Ω–∞ –±—ñ–ª—å—à–µ –æ–±–ª–∞—Å—Ç—å
      case 8: return 'balanced';      // –°–µ—Ä–µ–¥–Ω—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏ - –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ
      case 9: return 'balanced';      // –ú–∞–ª—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏ - –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ
      case 10: return 'conservative'; // –î—É–∂–µ –º–∞–ª—ñ - –æ–±–º–µ–∂–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å
      default: return 'balanced';
    }
  }
  
  /**
   * Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ bounds
   */
  static getDebugInfo(bounds, viewport) {
    return {
      bounds,
      viewport,
      areaKm2: this.calculateAreaKm2(bounds),
      estimatedHexagons: this.estimateHexagonCount(bounds, viewport.zoom),
      optimalResolution: this.getOptimalResolution(viewport.zoom),
      apiFormat: this.formatForAPI(bounds)
    };
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è ES6 modules
export { SmartBoundsCalculator };
export default SmartBoundsCalculator;