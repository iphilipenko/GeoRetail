// frontend/src/components/H3Visualization/utils/smartBoundsCalculator.js

/**
 * üéØ Smart Bounds Calculator - Viewport-Aware Bounds Utility
 * 
 * –†–æ–∑—É–º–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ–∂ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è H3 –¥–∞–Ω–∏—Ö –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º:
 * - –ü–æ—Ç–æ—á–Ω–æ–≥–æ viewport –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * - Zoom —Ä—ñ–≤–Ω—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –æ–±–ª–∞—Å—Ç—ñ
 * - –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (conservative/balanced/comprehensive)
 * - Performance –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö tier'—ñ–≤
 */

// ===============================================
// CORE BOUNDS CALCULATION CLASS
// ===============================================

class SmartBoundsCalculator {
  
  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bounds –¥–ª—è viewport –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
   * @param {Object} viewport - {longitude, latitude, zoom}
   * @param {string} strategy - 'conservative' | 'balanced' | 'comprehensive'
   * @returns {Object} bounds object –∑ detailed breakdown
   */
  static calculate(viewport, strategy = 'balanced') {
    const { longitude, latitude, zoom } = viewport;
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if (!this.validateViewport(viewport)) {
      throw new Error('Invalid viewport parameters');
    }
    
    // –ë–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
    const strategies = {
      'conservative': {
        description: 'Minimal area for instant loading (Tier 1)',
        multiplier: 0.8,
        maxArea: 2, // –∫–º¬≤
        bufferFactor: 0.5,
        targetLoadTime: '< 2 seconds'
      },
      
      'balanced': {
        description: 'Balanced area for full functionality (Tier 2)', 
        multiplier: 1.0,
        maxArea: 8, // –∫–º¬≤
        bufferFactor: 0.75,
        targetLoadTime: '2-8 seconds'
      },
      
      'comprehensive': {
        description: 'Extended area for complete dataset (Tier 3)',
        multiplier: 1.5,
        maxArea: 25, // –∫–º¬≤
        bufferFactor: 1.0,
        targetLoadTime: '8-20 seconds'
      }
    };
    
    const config = strategies[strategy];
    if (!config) {
      throw new Error(`Unknown strategy: ${strategy}`);
    }
    
    // –ë–∞–∑–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ span –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º zoom
    const baseSpan = this.calculateBaseSpan(zoom) * config.multiplier;
    
    // –û–±–º–µ–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –ø–ª–æ—â—ñ
    const constrainedSpan = this.constrainByMaxArea(baseSpan, config.maxArea);
    
    // –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —à–∏—Ä–æ—Ç–∏ (–ø—Ä–æ–µ–∫—Ü—ñ—è –ú–µ—Ä–∫–∞—Ç–æ—Ä–∞)
    const latSpan = constrainedSpan * config.bufferFactor;
    const lonSpan = (constrainedSpan * config.bufferFactor) * Math.cos(latitude * Math.PI / 180);
    
    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bounds
    const bounds = {
      north: latitude + latSpan,
      south: latitude - latSpan,
      east: longitude + lonSpan,
      west: longitude - lonSpan
    };
    
    // –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
    const analytics = this.calculateAnalytics(bounds, config, zoom);
    
    console.log(`üìê Smart Bounds [${strategy}]: ${analytics.estimatedArea}km¬≤ @ zoom ${zoom}`);
    
    return {
      ...bounds,
      strategy,
      config,
      analytics,
      meta: {
        viewport,
        calculatedAt: new Date().toISOString(),
        isOptimized: analytics.estimatedArea <= config.maxArea
      }
    };
  }
  
  /**
   * –®–≤–∏–¥–∫–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
   */
  static quick(latitude, longitude, zoom, radiusKm = 1) {
    const viewport = { latitude, longitude, zoom };
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ radiusKm
    let strategy;
    if (radiusKm <= 1) strategy = 'conservative';
    else if (radiusKm <= 3) strategy = 'balanced';
    else strategy = 'comprehensive';
    
    return this.calculate(viewport, strategy);
  }
  
  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è viewport –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
   */
  static validateViewport(viewport) {
    if (!viewport || typeof viewport !== 'object') return false;
    
    const { longitude, latitude, zoom } = viewport;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ longitude
    if (typeof longitude !== 'number' || longitude < -180 || longitude > 180) {
      return false;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ latitude
    if (typeof latitude !== 'number' || latitude < -90 || latitude > 90) {
      return false;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ zoom
    if (typeof zoom !== 'number' || zoom < 0 || zoom > 20) {
      return false;
    }
    
    return true;
  }
  
  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ–≥–æ span –Ω–∞ –æ—Å–Ω–æ–≤—ñ zoom
   */
  static calculateBaseSpan(zoom) {
    // –§–æ—Ä–º—É–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –µ–º–ø—ñ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ viewport
    // –ß–∏–º –±—ñ–ª—å—à–∏–π zoom, —Ç–∏–º –º–µ–Ω—à–∞ –æ–±–ª–∞—Å—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∞
    const zoomFactor = Math.max(0, 12 - zoom);
    return 0.01 * Math.pow(1.8, zoomFactor);
  }
  
  /**
   * –û–±–º–µ–∂–µ–Ω–Ω—è span –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ–π –ø–ª–æ—â—ñ
   */
  static constrainByMaxArea(span, maxAreaKm2) {
    // –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –ø–ª–æ—â–∞ –≤ –∫–º¬≤ –¥–ª—è span –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    const estimatedAreaKm2 = this.spanToAreaKm2(span);
    
    if (estimatedAreaKm2 <= maxAreaKm2) {
      return span; // –í –º–µ–∂–∞—Ö –ª—ñ–º—ñ—Ç—É
    }
    
    // –ö–æ—Ä–∏–≥—É—î–º–æ span —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ maxArea
    const scaleFactor = Math.sqrt(maxAreaKm2 / estimatedAreaKm2);
    return span * scaleFactor;
  }
  
  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è span –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –≤ –ø–ª–æ—â—É –≤ –∫–º¬≤
   */
  static spanToAreaKm2(span, latitude = 50.45) {
    // –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è —à–∏—Ä–æ—Ç–∏ –ö–∏—î–≤–∞
    const kmPerDegree = 111; // –∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å
    const latitudeCorrection = Math.cos(latitude * Math.PI / 180);
    
    const widthKm = span * 2 * kmPerDegree * latitudeCorrection;
    const heightKm = span * 2 * kmPerDegree;
    
    return widthKm * heightKm;
  }
  
  /**
   * –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ bounds
   */
  static calculateAnalytics(bounds, config, zoom) {
    const { north, south, east, west } = bounds;
    
    // –†–æ–∑–º—ñ—Ä–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    const latSpan = north - south;
    const lonSpan = east - west;
    
    // –¶–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç—ñ
    const centerLat = (north + south) / 2;
    const centerLon = (east + west) / 2;
    
    // –ü–ª–æ—â–∞ –≤ –∫–º¬≤
    const estimatedArea = this.spanToAreaKm2(Math.max(latSpan, lonSpan) / 2, centerLat);
    
    // –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö resolutions
    const hexagonCounts = this.estimateHexagonCounts(estimatedArea, zoom);
    
    // –û—Ü—ñ–Ω–∫–∞ —á–∞—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const estimatedLoadTime = this.estimateLoadTime(hexagonCounts.total, config);
    
    return {
      dimensions: {
        latSpan: parseFloat(latSpan.toFixed(6)),
        lonSpan: parseFloat(lonSpan.toFixed(6)),
        aspectRatio: parseFloat((lonSpan / latSpan).toFixed(2))
      },
      area: {
        estimatedArea: parseFloat(estimatedArea.toFixed(3)),
        maxAllowedArea: config.maxArea,
        utilizationPercent: Math.round((estimatedArea / config.maxArea) * 100)
      },
      performance: {
        hexagonCounts,
        estimatedLoadTime,
        networkRequests: this.estimateNetworkRequests(estimatedArea),
        memoryUsageKB: Math.round(hexagonCounts.total * 0.5)
      },
      center: {
        latitude: parseFloat(centerLat.toFixed(6)),
        longitude: parseFloat(centerLon.toFixed(6))
      }
    };
  }
  
  /**
   * –û—Ü—ñ–Ω–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –ø–æ resolutions
   */
  static estimateHexagonCounts(areaKm2, zoom) {
    // –ë–∞–∑–æ–≤—ñ –ø–ª–æ—â—ñ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ H3 (–∫–º¬≤)
    const hexagonAreas = {
      7: 5.16,    // ~5.16 –∫–º¬≤ –Ω–∞ –≥–µ–∫—Å–∞–≥–æ–Ω
      8: 0.737,   // ~0.737 –∫–º¬≤ –Ω–∞ –≥–µ–∫—Å–∞–≥–æ–Ω
      9: 0.105,   // ~0.105 –∫–º¬≤ –Ω–∞ –≥–µ–∫—Å–∞–≥–æ–Ω
      10: 0.015   // ~0.015 –∫–º¬≤ –Ω–∞ –≥–µ–∫—Å–∞–≥–æ–Ω
    };
    
    const counts = {};
    let total = 0;
    
    for (const [resolution, hexArea] of Object.entries(hexagonAreas)) {
      const count = Math.ceil(areaKm2 / hexArea);
      counts[`h3_${resolution}`] = count;
      total += count;
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π resolution –Ω–∞ –æ—Å–Ω–æ–≤—ñ zoom
    const recommendedResolution = this.getOptimalResolution(zoom);
    counts.recommended = counts[`h3_${recommendedResolution}`];
    counts.total = total;
    counts.optimalResolution = recommendedResolution;
    
    return counts;
  }
  
  /**
   * –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π H3 resolution –¥–ª—è zoom —Ä—ñ–≤–Ω—è
   */
  static getOptimalResolution(zoom) {
    if (zoom < 8) return 7;
    if (zoom < 10) return 8;
    if (zoom < 12) return 9;
    return 10;
  }
  
  /**
   * –û—Ü—ñ–Ω–∫–∞ —á–∞—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
   */
  static estimateLoadTime(hexagonCount, config) {
    // –ë–∞–∑–æ–≤–∞ –º–æ–¥–µ–ª—å: ~100 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤/—Å–µ–∫—É–Ω–¥–∞ –¥–ª—è API calls
    const baseRate = 1000; // –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤/—Å–µ–∫—É–Ω–¥–∞
    const networkLatency = 200; // –º—Å –±–∞–∑–æ–≤–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏
    
    const processingTime = (hexagonCount / baseRate) * 1000; // –º—Å
    const totalTime = Math.max(processingTime + networkLatency, 500); // –º—ñ–Ω—ñ–º—É–º 500–º—Å
    
    return {
      estimatedMs: Math.round(totalTime),
      category: this.categorizeLoadTime(totalTime),
      withinTarget: totalTime <= this.parseTargetTime(config.targetLoadTime)
    };
  }
  
  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è —á–∞—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
   */
  static categorizeLoadTime(timeMs) {
    if (timeMs < 2000) return 'instant';
    if (timeMs < 5000) return 'fast';
    if (timeMs < 10000) return 'moderate';
    return 'slow';
  }
  
  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ target time –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
   */
  static parseTargetTime(targetTimeStr) {
    // –ü–∞—Ä—Å–∏–º–æ "< 2 seconds" -> 2000ms
    const match = targetTimeStr.match(/(\d+)/);
    return match ? parseInt(match[1]) * 1000 : 5000;
  }
  
  /**
   * –û—Ü—ñ–Ω–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
   */
  static estimateNetworkRequests(areaKm2) {
    // –ë–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Ä–æ–∑–º—ñ—Ä—ñ –æ–±–ª–∞—Å—Ç—ñ —Ç–∞ pagination limits
    const avgRecordsPerKm2 = 500; // —Å–µ—Ä–µ–¥–Ω—è —â—ñ–ª—å–Ω—ñ—Å—Ç—å POI
    const totalRecords = areaKm2 * avgRecordsPerKm2;
    const recordsPerRequest = 1000; // API limit
    
    return Math.ceil(totalRecords / recordsPerRequest);
  }
}

// ===============================================
// SPECIALIZED CALCULATORS
// ===============================================

/**
 * Calculator –¥–ª—è Tier 1 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
 */
class Tier1BoundsCalculator extends SmartBoundsCalculator {
  static calculate(viewport) {
    const result = super.calculate(viewport, 'conservative');
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è Tier 1
    const optimized = {
      ...result,
      optimizations: {
        maxHexagons: 1000,
        priorityMetric: 'opportunity',
        priorityResolution: 8,
        cacheStrategy: 'aggressive',
        networkTimeout: 2000
      }
    };
    
    console.log(`üöÄ Tier 1 Bounds: ${optimized.analytics.performance.hexagonCounts.recommended} hexagons`);
    return optimized;
  }
}

/**
 * Calculator –¥–ª—è Tier 2 - –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
 */
class Tier2BoundsCalculator extends SmartBoundsCalculator {
  static calculate(viewport) {
    const result = super.calculate(viewport, 'balanced');
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Tier 2
    const enhanced = {
      ...result,
      enhancements: {
        includeNeighbors: true,
        multipleResolutions: [7, 8, 9, 10],
        multipleMetrics: ['opportunity', 'competition'],
        parallelRequests: 3,
        networkTimeout: 8000
      }
    };
    
    console.log(`‚ö° Tier 2 Bounds: ${enhanced.analytics.area.estimatedArea}km¬≤ coverage`);
    return enhanced;
  }
}

/**
 * Calculator –¥–ª—è Tier 3 - –ø–æ–≤–Ω–µ –ø–æ–∫—Ä–∏—Ç—Ç—è
 */
class Tier3BoundsCalculator extends SmartBoundsCalculator {
  static calculate(viewport) {
    const result = super.calculate(viewport, 'comprehensive');
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–ª—è Tier 3
    const comprehensive = {
      ...result,
      comprehensive: {
        fullDataset: true,
        allResolutions: [7, 8, 9, 10],
        allMetrics: ['opportunity', 'competition'],
        extendedRadius: true,
        offlineCapable: true,
        backgroundLoading: true
      }
    };
    
    console.log(`üìö Tier 3 Bounds: Full dataset with ${comprehensive.analytics.performance.networkRequests} requests`);
    return comprehensive;
  }
}

// ===============================================
// VIEWPORT UTILITIES
// ===============================================

/**
 * Utility —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ viewport
 */
class ViewportUtils {
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ viewport –∑–º—ñ–Ω–∏–≤—Å—è –∑–Ω–∞—á–Ω–æ
   */
  static hasSignificantChange(oldViewport, newViewport, threshold = 0.1) {
    if (!oldViewport || !newViewport) return true;
    
    const latDiff = Math.abs(oldViewport.latitude - newViewport.latitude);
    const lonDiff = Math.abs(oldViewport.longitude - newViewport.longitude);
    const zoomDiff = Math.abs(oldViewport.zoom - newViewport.zoom);
    
    return latDiff > threshold || lonDiff > threshold || zoomDiff > 1;
  }
  
  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ –¥–≤–æ–º–∞ viewport'–∞–º–∏
   */
  static calculateDistance(viewport1, viewport2) {
    const lat1 = viewport1.latitude * Math.PI / 180;
    const lat2 = viewport2.latitude * Math.PI / 180;
    const deltaLat = (viewport2.latitude - viewport1.latitude) * Math.PI / 180;
    const deltaLon = (viewport2.longitude - viewport1.longitude) * Math.PI / 180;
    
    const a = Math.sin(deltaLat/2) * Math.sin(deltaLat/2) +
             Math.cos(lat1) * Math.cos(lat2) *
             Math.sin(deltaLon/2) * Math.sin(deltaLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    
    return 6371 * c; // –≤—ñ–¥—Å—Ç–∞–Ω—å –≤ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö
  }
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ viewport —É –º–µ–∂–∞—Ö bounds
   */
  static isViewportInBounds(viewport, bounds, bufferPercent = 10) {
    const { latitude, longitude } = viewport;
    const { north, south, east, west } = bounds;
    
    // –î–æ–¥–∞—î–º–æ buffer
    const latBuffer = (north - south) * (bufferPercent / 100);
    const lonBuffer = (east - west) * (bufferPercent / 100);
    
    return latitude >= (south - latBuffer) &&
           latitude <= (north + latBuffer) &&
           longitude >= (west - lonBuffer) &&
           longitude <= (east + lonBuffer);
  }
  
  /**
   * –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π viewport –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ
   */
  static getOptimalViewport(bounds) {
    const centerLat = (bounds.north + bounds.south) / 2;
    const centerLon = (bounds.east + bounds.west) / 2;
    
    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ zoom
    const latSpan = bounds.north - bounds.south;
    const lonSpan = bounds.east - bounds.west;
    const maxSpan = Math.max(latSpan, lonSpan);
    
    // –ï–º–ø—ñ—Ä–∏—á–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è zoom
    const zoom = Math.max(6, Math.min(15, 12 - Math.log2(maxSpan * 100)));
    
    return {
      latitude: centerLat,
      longitude: centerLon,
      zoom: Math.round(zoom),
      pitch: 0,
      bearing: 0
    };
  }
}

// ===============================================
// PERFORMANCE MONITORING
// ===============================================

/**
 * –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ performance bounds calculations
 */
class BoundsPerformanceMonitor {
  constructor() {
    this.calculations = [];
    this.maxHistory = 100;
  }
  
  /**
   * –ó–∞–ø–∏—Å calculation –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
   */
  recordCalculation(strategy, viewport, result, executionTime) {
    const record = {
      timestamp: Date.now(),
      strategy,
      viewport: { ...viewport },
      result: {
        area: result.analytics.area.estimatedArea,
        hexagons: result.analytics.performance.hexagonCounts.recommended,
        requests: result.analytics.performance.networkRequests
      },
      performance: {
        executionTime,
        memoryUsage: result.analytics.performance.memoryUsageKB
      }
    };
    
    this.calculations.push(record);
    
    // –û–±–º–µ–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    if (this.calculations.length > this.maxHistory) {
      this.calculations.shift();
    }
    
    console.log(`üìä Bounds calculation [${strategy}]: ${executionTime}ms`);
  }
  
  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ performance
   */
  getPerformanceStats() {
    if (this.calculations.length === 0) return null;
    
    const executionTimes = this.calculations.map(c => c.performance.executionTime);
    const areas = this.calculations.map(c => c.result.area);
    
    return {
      totalCalculations: this.calculations.length,
      averageExecutionTime: executionTimes.reduce((a, b) => a + b, 0) / executionTimes.length,
      maxExecutionTime: Math.max(...executionTimes),
      minExecutionTime: Math.min(...executionTimes),
      averageArea: areas.reduce((a, b) => a + b, 0) / areas.length,
      strategyCounts: this.calculations.reduce((acc, calc) => {
        acc[calc.strategy] = (acc[calc.strategy] || 0) + 1;
        return acc;
      }, {})
    };
  }
  
  /**
   * –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
   */
  clearHistory() {
    this.calculations = [];
    console.log('üìä Bounds calculation history cleared');
  }
}

// ===============================================
// CACHING SYSTEM
// ===============================================

/**
 * Cache –¥–ª—è bounds calculations
 */
class BoundsCache {
  constructor(maxSize = 50) {
    this.cache = new Map();
    this.maxSize = maxSize;
    this.accessTimes = new Map();
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è cache key
   */
  generateKey(viewport, strategy) {
    const { latitude, longitude, zoom } = viewport;
    return `${strategy}_${latitude.toFixed(4)}_${longitude.toFixed(4)}_${zoom}`;
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ cache
   */
  get(viewport, strategy) {
    const key = this.generateKey(viewport, strategy);
    
    if (this.cache.has(key)) {
      this.accessTimes.set(key, Date.now());
      console.log(`üì¶ Bounds cache hit: ${key}`);
      return this.cache.get(key);
    }
    
    console.log(`üì¶ Bounds cache miss: ${key}`);
    return null;
  }
  
  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ cache
   */
  set(viewport, strategy, result) {
    const key = this.generateKey(viewport, strategy);
    
    // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ —è–∫—â–æ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É
    if (this.cache.size >= this.maxSize) {
      this.evictOldest();
    }
    
    this.cache.set(key, result);
    this.accessTimes.set(key, Date.now());
    
    console.log(`üì¶ Bounds cached: ${key} (${this.cache.size}/${this.maxSize})`);
  }
  
  /**
   * –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ –∑–∞–ø–∏—Å—É
   */
  evictOldest() {
    let oldestKey = null;
    let oldestTime = Date.now();
    
    for (const [key, time] of this.accessTimes.entries()) {
      if (time < oldestTime) {
        oldestTime = time;
        oldestKey = key;
      }
    }
    
    if (oldestKey) {
      this.cache.delete(oldestKey);
      this.accessTimes.delete(oldestKey);
      console.log(`üì¶ Evicted oldest bounds cache entry: ${oldestKey}`);
    }
  }
  
  /**
   * –û—á–∏—â–µ–Ω–Ω—è cache
   */
  clear() {
    this.cache.clear();
    this.accessTimes.clear();
    console.log('üì¶ Bounds cache cleared');
  }
  
  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ cache
   */
  getStats() {
    return {
      size: this.cache.size,
      maxSize: this.maxSize,
      keys: Array.from(this.cache.keys()),
      hitRate: this.calculateHitRate()
    };
  }
  
  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ hit rate (–Ω–∞–±–ª–∏–∂–µ–Ω–æ)
   */
  calculateHitRate() {
    // Simplified calculation - –≤ production –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–æ—á–Ω—ñ—à–µ
    return this.cache.size > 0 ? Math.min(this.cache.size / this.maxSize, 1) : 0;
  }
}

// ===============================================
// SINGLETON INSTANCES
// ===============================================

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç–∞–Ω—Å–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –¥–æ–¥–∞—Ç–∫—É
const performanceMonitor = new BoundsPerformanceMonitor();
const boundsCache = new BoundsCache();

// ===============================================
// MAIN EXPORT INTERFACE
// ===============================================

export {
  SmartBoundsCalculator,
  Tier1BoundsCalculator,
  Tier2BoundsCalculator, 
  Tier3BoundsCalculator,
  ViewportUtils,
  BoundsPerformanceMonitor,
  BoundsCache,
  performanceMonitor,
  boundsCache
};

export default SmartBoundsCalculator;