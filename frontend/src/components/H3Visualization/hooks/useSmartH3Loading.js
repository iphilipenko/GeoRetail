// frontend/src/components/H3Visualization/hooks/useSmartH3Loading.js
// FIXED VERSION - –í—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤–∏—Ä—ñ—à–µ–Ω–æ

import { useState, useEffect, useCallback, useRef } from 'react';

/**
 * Smart H3 Loading Hook - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø
 * 
 * –û—Å–Ω–æ–≤–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:
 * 1. Map() –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –∑–≤–∏—á–∞–π–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è React state
 * 2. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ useCallback dependencies
 * 3. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ race conditions
 * 4. –î–æ–¥–∞–Ω–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –≥–µ–æ–º–µ—Ç—Ä—ñ—ó
 * 5. –ü–æ–∫—Ä–∞—â–µ–Ω–æ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
 */

const API_BASE = 'http://localhost:8000/api/v1/visualization/kyiv-h3';
const TIMEOUT_MS = 30000;

const TIER_1_DATASETS = [
  { metric: 'opportunity', resolution: 7 },
  { metric: 'opportunity', resolution: 8 }
];

const BACKGROUND_DATASETS = [
  { metric: 'opportunity', resolution: 9 },
  { metric: 'competition', resolution: 7 },
  { metric: 'competition', resolution: 8 },
  { metric: 'competition', resolution: 9 },
  { metric: 'opportunity', resolution: 10 },
  { metric: 'competition', resolution: 10 }
];

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≥–µ–æ–º–µ—Ç—Ä—ñ—ó H3 –≥–µ–∫—Å–∞–≥–æ–Ω—É
const validateH3Geometry = (geometry) => {
  if (!geometry || geometry.type !== 'Polygon') {
    return false;
  }
  
  if (!geometry.coordinates || !Array.isArray(geometry.coordinates)) {
    return false;
  }
  
  const ring = geometry.coordinates[0];
  if (!Array.isArray(ring) || ring.length < 4) {
    return false;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—Å—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ
  return ring.every(coord => 
    Array.isArray(coord) && 
    coord.length === 2 && 
    typeof coord[0] === 'number' && 
    typeof coord[1] === 'number' &&
    !isNaN(coord[0]) && 
    !isNaN(coord[1])
  );
};

// –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –≥–µ–∫—Å–∞–≥–æ–Ω—É
const normalizeHexagonData = (hex, metric, resolution) => {
  // –í–∞–ª—ñ–¥—É—î–º–æ –≥–µ–æ–º–µ—Ç—Ä—ñ—é
  if (!validateH3Geometry(hex.geometry)) {
    console.warn(`‚ö†Ô∏è Invalid geometry for hexagon:`, hex);
    return null;
  }
  
  // –í–∏—Ç—è–≥—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫–∏
  let metricValue = 0;
  if (metric === 'opportunity') {
    metricValue = hex.market_opportunity_score || hex.display_value || 0;
  } else if (metric === 'competition') {
    metricValue = hex.competition_intensity || hex.display_value || 0;
  } else {
    metricValue = hex.display_value || hex.market_opportunity_score || hex.competition_intensity || 0;
  }
  
  // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è —á–∏—Å–ª–æ–≤–µ
  if (typeof metricValue === 'string') {
    metricValue = parseFloat(metricValue) || 0;
  }
  
  return {
    ...hex,
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω—ñ –ø–æ–ª—è –¥–ª—è deck.gl
    market_opportunity_score: hex.market_opportunity_score || metricValue,
    competition_intensity: hex.competition_intensity || metricValue,
    display_value: metricValue,
    
    // –í–∞–ª—ñ–¥–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—è
    geometry: hex.geometry,
    
    // –ú–µ—Ç–∞–¥–∞–Ω—ñ
    properties: {
      ...hex.properties,
      metricValue,
      metric,
      resolution,
      h3_index: hex.h3_index || hex.id
    }
  };
};

const useSmartH3Loading = (viewport = {}, initialMetric = 'opportunity') => {
  // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –æ–±'—î–∫—Ç –∑–∞–º—ñ—Å—Ç—å Map
  const [dataCache, setDataCache] = useState({});
  
  // –û—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–∞–Ω
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [progress, setProgress] = useState(0);
  const [status, setStatus] = useState('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...');
  const [tier1Complete, setTier1Complete] = useState(false);
  
  // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useRef –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
  const activeLoadsRef = useRef(new Set());
  const loadingInProgressRef = useRef(false);
  
  // –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API
  const fetchData = useCallback(async (metric, resolution) => {
    const url = `${API_BASE}?metric_type=${metric}&resolution=${resolution}&limit=1000000`;
    
    console.log(`üì° Fetching: ${url}`);
    const startTime = Date.now();
    
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_MS);
      
      const response = await fetch(url, {
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      const fetchTime = Date.now() - startTime;
      
      console.log(`‚è±Ô∏è Fetch completed in ${fetchTime}ms`);
      
      if (!response.ok) {
        const errorText = await response.text().catch(() => 'Unknown error');
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
      
      const data = await response.json();
      const totalTime = Date.now() - startTime;
      
      console.log(`‚úÖ Data parsed in ${totalTime}ms total`);
      
      // –í–∞–ª—ñ–¥—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
      if (!data?.hexagons || !Array.isArray(data.hexagons)) {
        throw new Error('Invalid response: missing hexagons array');
      }
      
      // –í–∞–ª—ñ–¥—É—î–º–æ —â–æ —î —Ö–æ—á–∞ –± –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞–ª—ñ–¥–Ω–∏—Ö –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
      const validHexagons = data.hexagons.filter(hex => validateH3Geometry(hex.geometry));
      
      if (validHexagons.length === 0) {
        throw new Error('No valid hexagons found in response');
      }
      
      if (validHexagons.length < data.hexagons.length) {
        console.warn(`‚ö†Ô∏è ${data.hexagons.length - validHexagons.length} invalid hexagons filtered out`);
      }
      
      console.log(`üéØ Success: ${validHexagons.length} valid hexagons received`);
      
      return {
        ...data,
        hexagons: validHexagons
      };
      
    } catch (err) {
      const totalTime = Date.now() - startTime;
      console.error(`‚ùå Fetch failed after ${totalTime}ms:`, err.message);
      throw err;
    }
  }, []);
  
  // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
  const loadDataset = useCallback(async (metric, resolution) => {
    const key = `${metric}-${resolution}`;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
    if (dataCache[key]) {
      console.log(`üì¶ Cache HIT: ${key} already loaded`);
      return { success: true, data: dataCache[key] };
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞—Ä–∞–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
    if (activeLoadsRef.current.has(key)) {
      console.log(`‚è≥ Already loading ${key}, skipping duplicate`);
      return { success: false, error: 'Already loading' };
    }
    
    // –î–æ–¥–∞—î–º–æ –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
    activeLoadsRef.current.add(key);
    console.log(`üöÄ Starting load: ${key}`);
    
    try {
      const data = await fetchData(metric, resolution);
      
      // –í–ò–ü–†–ê–í–õ–ï–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ dataCache –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è React
      setDataCache(prevCache => ({
        ...prevCache,
        [key]: data
      }));
      
      console.log(`‚úÖ SUCCESS: ${key} loaded with ${data.hexagons.length} hexagons`);
      
      return { success: true, data };
      
    } catch (err) {
      console.error(`‚ùå FAILED: ${key} - ${err.message}`);
      
      return {
        success: false,
        error: err.message,
        debugInfo: {
          dataset: key,
          url: `${API_BASE}?metric_type=${metric}&resolution=${resolution}`,
          error: err.message,
          timestamp: new Date().toISOString()
        }
      };
    } finally {
      // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
      activeLoadsRef.current.delete(key);
    }
  }, [fetchData, dataCache]); // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ dependencies
  
  // –í–ò–ü–†–ê–í–õ–ï–ù–û: –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–∑ race conditions
  const startLoading = useCallback(async () => {
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω–∏–º –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
    if (loadingInProgressRef.current) {
      console.log('üõë Loading already in progress, skipping');
      return;
    }
    
    loadingInProgressRef.current = true;
    
    console.log('üéØ ===== SMART H3 LOADING STARTED =====');
    
    setLoading(true);
    setError(null);
    setProgress(0);
    setTier1Complete(false);
    setStatus('–ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
    
    try {
      console.log('üìã Phase 1: Loading critical datasets');
      
      // Phase 1: –ö—Ä–∏—Ç–∏—á–Ω—ñ –¥–∞—Ç–∞—Å–µ—Ç–∏ (FAIL-STOP)
      for (let i = 0; i < TIER_1_DATASETS.length; i++) {
        const dataset = TIER_1_DATASETS[i];
        
        console.log(`üîÑ [${i+1}/${TIER_1_DATASETS.length}] Loading ${dataset.metric} H3-${dataset.resolution}`);
        
        setStatus(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${dataset.metric} H3-${dataset.resolution}...`);
        setProgress((i / (TIER_1_DATASETS.length + BACKGROUND_DATASETS.length)) * 100);
        
        const result = await loadDataset(dataset.metric, dataset.resolution);
        
        if (!result.success && result.error !== 'Already loading') {
          console.error(`üõë CRITICAL FAILURE: ${dataset.metric}-${dataset.resolution}`);
          
          setError(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${result.error}`);
          setLoading(false);
          loadingInProgressRef.current = false;
          return;
        }
      }
      
      // Phase 1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏
      console.log('üéâ PHASE 1 COMPLETE - Ready for interaction!');
      setTier1Complete(true);
      setStatus('–ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ');
      setProgress(50);
      
      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è UI
      await new Promise(resolve => setTimeout(resolve, 100));
      
      console.log('üìã Phase 2: Background loading');
      
      // Phase 2: –§–æ–Ω–æ–≤—ñ –¥–∞—Ç–∞—Å–µ—Ç–∏ (non-blocking)
      for (let i = 0; i < BACKGROUND_DATASETS.length; i++) {
        const dataset = BACKGROUND_DATASETS[i];
        
        setStatus(`–§–æ–Ω–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${dataset.metric} H3-${dataset.resolution}...`);
        setProgress(50 + ((i + 1) / BACKGROUND_DATASETS.length) * 50);
        
        const result = await loadDataset(dataset.metric, dataset.resolution);
        
        if (!result.success && result.error !== 'Already loading') {
          console.warn(`‚ö†Ô∏è Background dataset failed: ${dataset.metric}-${dataset.resolution}`);
        }
      }
      
      // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
      console.log('üéâ ===== ALL LOADING COMPLETED =====');
      setStatus('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      setProgress(100);
      setLoading(false);
      
    } catch (err) {
      console.error('üö® Unexpected error:', err);
      setError(`–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${err.message}`);
      setLoading(false);
    } finally {
      loadingInProgressRef.current = false;
    }
  }, [loadDataset]); // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ dependencies
  
  // –í–ò–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü—ñ—è retry –±–µ–∑ –ø—Ä–æ–±–ª–µ–º
  const retry = useCallback(() => {
    console.log('üîÑ Manual retry initiated');
    
    // –û—á–∏—â—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ
    setError(null);
    setLoading(false);
    setTier1Complete(false);
    loadingInProgressRef.current = false;
    activeLoadsRef.current.clear();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    setTimeout(startLoading, 100);
  }, [startLoading]);
  
  // –í–ò–ü–†–ê–í–õ–ï–ù–û: getAvailableData –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ dependencies —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
  const getAvailableData = useCallback((metric, resolution) => {
    const key = `${metric}-${resolution}`;
    const data = dataCache[key];
    
    console.log(`üîç getAvailableData(${key}):`, {
      hasData: !!data,
      hexagonsCount: data?.hexagons?.length || 0,
      availableKeys: Object.keys(dataCache)
    });
    
    if (!data?.hexagons || !Array.isArray(data.hexagons)) {
      console.warn(`‚ö†Ô∏è No valid data for ${key}`);
      return [];
    }
    
    // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–∞ –≤–∞–ª—ñ–¥—É—î–º–æ –≤—Å—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
    const normalizedHexagons = data.hexagons
      .map(hex => normalizeHexagonData(hex, metric, resolution))
      .filter(Boolean); // –í–∏–¥–∞–ª—è—î–º–æ null –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏)
    
    console.log(`‚úÖ Returning ${normalizedHexagons.length} normalized hexagons for ${key}`);
    return normalizedHexagons;
    
  }, [dataCache]); // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ dependencies
  
  // –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ
  useEffect(() => {
    if (!loadingInProgressRef.current && Object.keys(dataCache).length === 0) {
      console.log('üé¨ Auto-starting loading on mount');
      startLoading();
    }
  }, []); // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—É—Å—Ç–∏–π dependency array –¥–ª—è one-time effect
  
  // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  return {
    // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    isLoading: loading,
    canInteract: tier1Complete,
    tier1Complete: tier1Complete,
    
    // –ü—Ä–æ–≥—Ä–µ—Å
    progress: Math.round(progress),
    currentStep: status,
    
    // –î–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö
    getAvailableData,
    
    // –í–ò–ü–†–ê–í–õ–ï–ù–û: getCachedData –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ dependencies
    getCachedData: useCallback((metric, resolution) => {
      const key = `${metric}-${resolution}`;
      const result = dataCache[key] || null;
      console.log(`üîç getCachedData(${key}):`, !!result);
      return result;
    }, [dataCache]),
    
    // Legacy compatibility
    getVisibleData: getAvailableData,
    
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    hasError: !!error,
    error,
    retryLoading: retry,
    
    // Compatibility –ø–æ–ª—è
    isBasicReady: tier1Complete,
    isFullyFunctional: tier1Complete,
    isCompletelyLoaded: !loading && tier1Complete,
    
    // –ú–µ—Ç—Ä–∏–∫–∏ —Ç–∞ –¥–µ–±–∞–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    debugInfo: {
      cacheSize: Object.keys(dataCache).length,
      cachedKeys: Object.keys(dataCache),
      totalHexagons: Object.values(dataCache).reduce((sum, data) => {
        return sum + (data?.hexagons?.length || 0);
      }, 0),
      loadingState: loading ? 'loading' : (error ? 'error' : 'complete'),
      tier1Complete: tier1Complete
    },
    
    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
    updateViewport: useCallback(() => {
      console.log('Viewport updated');
    }, []),
    
    prioritizeMetric: useCallback((metric) => {
      console.log(`Prioritizing metric: ${metric}`);
    }, [])
  };
};

export default useSmartH3Loading;