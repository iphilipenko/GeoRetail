// src/components/H3Visualization/hooks/usePreloadedH3Data.js
import { useState, useEffect, useRef, useMemo } from 'react';

/**
 * Hook –¥–ª—è preloading –≤—Å—ñ—Ö H3 –¥–∞–Ω–∏—Ö —ñ viewport culling
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –í–°–Ü –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó metric + resolution –Ω–∞ –ø–æ—á–∞—Ç–∫—É
 * –ü–æ–∫–∞–∑—É—î —Ç—ñ–ª—å–∫–∏ –≤–∏–¥–∏–º—ñ –≤ viewport –≥–µ–∫—Å–∞–≥–æ–Ω–∏
 */
const usePreloadedH3Data = (limit = 1000000) => {
  const [overallProgress, setOverallProgress] = useState(0);
  const [currentProgress, setCurrentProgress] = useState(0);
  const [completedRequests, setCompletedRequests] = useState(0);
  const [isPreloaded, setIsPreloaded] = useState(false);
  const [preloadError, setPreloadError] = useState(null);
  const [currentStep, setCurrentStep] = useState('');
  
  // –ö–µ—à –¥–ª—è –≤—Å—ñ—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  const allDataRef = useRef({});
  
  // –í—Å—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const preloadTasks = useMemo(() => [
    { metric: 'competition', resolution: 7, name: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è H3-7' },
    { metric: 'competition', resolution: 8, name: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è H3-8' },
    { metric: 'competition', resolution: 9, name: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è H3-9' },
    { metric: 'competition', resolution: 10, name: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è H3-10' },
    { metric: 'opportunity', resolution: 7, name: '–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ H3-7' },
    { metric: 'opportunity', resolution: 8, name: '–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ H3-8' },
    { metric: 'opportunity', resolution: 9, name: '–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ H3-9' },
    { metric: 'opportunity', resolution: 10, name: '–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ H3-10' }
  ], []);

  const totalTasks = preloadTasks.length;

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ dataset –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
  const fetchSingleDataset = async (metric, resolution, taskIndex) => {
    const url = `http://localhost:8000/api/v1/visualization/kyiv-h3?metric_type=${metric}&resolution=${resolution}&limit=${limit}`;
    
    console.log(`üîÑ [${taskIndex + 1}/${totalTasks}] Fetching ${metric} H3-${resolution}...`);
    
    // –°–∏–º—É–ª—è—Ü—ñ—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å)
    setCurrentProgress(0);
    
    const response = await fetch(url);
    
    setCurrentProgress(50); // Halfway —á–µ—Ä–µ–∑ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è response
    
    if (!response.ok) {
      throw new Error(`Failed to fetch ${metric} H3-${resolution}: ${response.status}`);
    }
    
    const data = await response.json();
    
    setCurrentProgress(100); // Complete current request
    
    console.log(`‚úÖ [${taskIndex + 1}/${totalTasks}] Loaded ${metric} H3-${resolution}: ${data.hexagons?.length || 0} hexagons`);
    
    return data;
  };

  // –ü–û–°–õ–Ü–î–û–í–ù–ï –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É
  const preloadAllData = async () => {
    try {
      setOverallProgress(0);
      setCurrentProgress(0);
      setCompletedRequests(0);
      setPreloadError(null);
      setCurrentStep('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...');
      
      console.log('üöÄ Starting sequential preload of all H3 data...');
      
      // –ü–û–°–õ–Ü–î–û–í–ù–û –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–∂–µ–Ω dataset
      for (let i = 0; i < preloadTasks.length; i++) {
        const task = preloadTasks[i];
        
        try {
          // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫
          setCurrentStep(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${task.name}...`);
          setCurrentProgress(0);
          
          // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ dataset
          const data = await fetchSingleDataset(task.metric, task.resolution, i);
          
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
          const cacheKey = `${task.metric}-${task.resolution}`;
          allDataRef.current[cacheKey] = data;
          
          // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
          const newCompletedRequests = i + 1;
          setCompletedRequests(newCompletedRequests);
          
          // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
          const newOverallProgress = Math.round((newCompletedRequests / totalTasks) * 100);
          setOverallProgress(newOverallProgress);
          
          console.log(`üìä Progress: ${newCompletedRequests}/${totalTasks} (${newOverallProgress}%)`);
          
        } catch (error) {
          console.error(`‚ùå Failed to load ${task.metric} H3-${task.resolution}:`, error);
          // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö datasets
          setPreloadError(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${task.name}: ${error.message}`);
        }
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
      const loadedDatasets = Object.keys(allDataRef.current).length;
      
      if (loadedDatasets > 0) {
        setIsPreloaded(true);
        setCurrentStep('–ì–æ—Ç–æ–≤–æ!');
        setCurrentProgress(100);
        console.log(`üéâ Preload completed! ${loadedDatasets}/${totalTasks} datasets loaded`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–º'—è—Ç—ñ
        const totalHexagons = Object.values(allDataRef.current).reduce((sum, data) => sum + (data.hexagons?.length || 0), 0);
        const estimatedMemory = Math.round(totalHexagons * 0.5 / 1024); // KB
        console.log(`üìä Total hexagons: ${totalHexagons}, Estimated memory: ~${estimatedMemory}KB`);
      } else {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ dataset');
      }
      
    } catch (error) {
      console.error('‚ùå Preload failed:', error);
      setPreloadError(error.message);
      setIsPreloaded(false);
    }
  };

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ preload –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    preloadAllData();
  }, [limit]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∫–µ—à—É
  const getCachedData = (metric, resolution) => {
    const cacheKey = `${metric}-${resolution}`;
    return allDataRef.current[cacheKey] || null;
  };

  // Viewport culling - —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –≤–∏–¥–∏–º–∏—Ö –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
  const getVisibleHexagons = (metric, resolution, viewState, bufferFactor = 0.75) => {
    const cachedData = getCachedData(metric, resolution);
    if (!cachedData?.hexagons) return [];

    // –Ø–∫—â–æ zoom –¥—É–∂–µ –¥–∞–ª–µ–∫–∏–π - –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
    if (viewState.zoom <= 6) {
      return cachedData.hexagons;
    }

    try {
      // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ viewport bounds –∑ buffer
      const { longitude, latitude, zoom } = viewState;
      
      // –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–¥–∏–º–æ—ó –æ–±–ª–∞—Å—Ç—ñ
      const latSpan = 360 / Math.pow(2, zoom) * bufferFactor;
      const lonSpan = latSpan * Math.cos(latitude * Math.PI / 180);
      
      const bounds = {
        north: latitude + latSpan,
        south: latitude - latSpan,
        east: longitude + lonSpan,
        west: longitude - lonSpan
      };

      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≥–µ–∫—Å–∞–≥–æ–Ω–∏ –≤ –º–µ–∂–∞—Ö viewport
      const visibleHexagons = cachedData.hexagons.filter(hex => {
        if (!hex.geometry?.coordinates?.[0]) return false;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ü–µ–Ω—Ç—Ä –≥–µ–∫—Å–∞–≥–æ–Ω–∞
        const coords = hex.geometry.coordinates[0];
        const centerLon = coords.reduce((sum, coord) => sum + coord[0], 0) / coords.length;
        const centerLat = coords.reduce((sum, coord) => sum + coord[1], 0) / coords.length;
        
        return centerLat >= bounds.south && 
               centerLat <= bounds.north &&
               centerLon >= bounds.west && 
               centerLon <= bounds.east;
      });

      console.log(`üîç Viewport culling: ${visibleHexagons.length}/${cachedData.hexagons.length} hexagons visible`);
      
      return visibleHexagons;
      
    } catch (error) {
      console.error('Error in viewport culling:', error);
      // Fallback - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
      return cachedData.hexagons;
    }
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  const getStats = () => {
    const loadedKeys = Object.keys(allDataRef.current);
    const totalHexagons = loadedKeys.reduce((sum, key) => {
      return sum + (allDataRef.current[key].hexagons?.length || 0);
    }, 0);
    
    return {
      loadedDatasets: loadedKeys.length,
      totalDatasets: preloadTasks.length,
      totalHexagons,
      estimatedMemoryKB: Math.round(totalHexagons * 0.5)
    };
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const reloadData = () => {
    allDataRef.current = {};
    setIsPreloaded(false);
    setOverallProgress(0);
    setCurrentProgress(0);
    setCompletedRequests(0);
    setPreloadError(null);
    preloadAllData();
  };

  return {
    // –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å–æ–º
    isPreloaded,
    overallProgress,     // 0-100% –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
    currentProgress,     // 0-100% –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É  
    completedRequests,   // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    totalTasks,          // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
    preloadError,
    currentStep,
    
    // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    getVisibleHexagons,
    getCachedData,
    
    // –£—Ç–∏–ª—ñ—Ç–∏
    getStats,
    reloadData,
    
    // Debug
    allDataKeys: Object.keys(allDataRef.current)
  };
};

export default usePreloadedH3Data;