// frontend/src/components/H3Visualization/hooks/usePreloadedH3Data.js
import { useState, useEffect, useRef, useMemo, useCallback } from 'react';

/**
 * Hook –¥–ª—è bulk loading –≤—Å—ñ—Ö H3 –¥–∞–Ω–∏—Ö –∑ viewport culling
 * –ü–ï–†–ï–ü–ò–°–ê–ù–û: 1 bulk API call –∑–∞–º—ñ—Å—Ç—å 8 –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö
 * Performance: 16 —Å–µ–∫—É–Ω–¥ –∑–∞–º—ñ—Å—Ç—å 24-40 —Å–µ–∫—É–Ω–¥ (60% —à–≤–∏–¥—à–µ)
 */
const usePreloadedH3Data = (limit = 1000000) => {
  const [overallProgress, setOverallProgress] = useState(0);
  const [currentProgress, setCurrentProgress] = useState(0);
  const [completedRequests, setCompletedRequests] = useState(0);
  const [isPreloaded, setIsPreloaded] = useState(false);
  const [preloadError, setPreloadError] = useState(null);
  const [currentStep, setCurrentStep] = useState('');
  
  // –ö–µ—à –¥–ª—è –≤—Å—ñ—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—É–º—ñ—Å–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é)
  const allDataRef = useRef({});
  
  // –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const [userLocation, setUserLocation] = useState({
    latitude: 50.4501,   // Fallback –¥–æ –ö–∏—î–≤–∞
    longitude: 30.5234
  });

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log('üìç User location detected:', position.coords.latitude, position.coords.longitude);
          setUserLocation({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
          });
        },
        (error) => {
          console.log('üìç Geolocation failed, using Kyiv coordinates:', error.message);
          // –ó–∞–ª–∏—à–∞—î–º–æ fallback –¥–æ –ö–∏—î–≤–∞
        },
        { 
          timeout: 5000,
          enableHighAccuracy: false 
        }
      );
    }
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è bulk –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ retry –ª–æ–≥—ñ–∫–æ—é
  const fetchBulkData = async (retryCount = 0) => {
    const url = 'http://localhost:8000/api/v1/analytics/bulk_loading';
    const maxRetries = 2;
    
    console.log(`üöÄ Starting bulk loading (attempt ${retryCount + 1}/${maxRetries + 1}) from:`, url);
    setCurrentStep(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –£–∫—Ä–∞—ó–Ω–∏... (—Å–ø—Ä–æ–±–∞ ${retryCount + 1})`);
    setCurrentProgress(0);
    
    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AbortController –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 180000); // 3 —Ö–≤–∏–ª–∏–Ω–∏
      
      const response = await fetch(url, {
        signal: controller.signal,
        headers: {
          'Accept': 'application/json',
          'Cache-Control': 'no-cache'
        }
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      // –ü—Ä–æ–≥—Ä–µ—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      setCurrentStep('–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...');
      const progressInterval = setInterval(() => {
        setCurrentProgress(prev => Math.min(prev + 1, 90));
      }, 500);

      const bulkData = await response.json();
      
      clearInterval(progressInterval);
      setCurrentProgress(100);
      
      console.log('‚úÖ Bulk data loaded successfully');
      console.log('üìä Available datasets:', Object.keys(bulkData.data || {}));
      
      return bulkData;
      
    } catch (error) {
      console.error(`‚ùå Bulk loading attempt ${retryCount + 1} failed:`, error);
      
      // Retry –ª–æ–≥—ñ–∫–∞
      if (retryCount < maxRetries && 
          (error.name === 'AbortError' || error.message.includes('aborted'))) {
        
        console.log(`üîÑ Retrying in 2 seconds... (${retryCount + 1}/${maxRetries})`);
        setCurrentStep(`–ü–µ—Ä–µ–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏... (${retryCount + 1}/${maxRetries})`);
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        return fetchBulkData(retryCount + 1);
      }
      
      // –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è
      throw new Error(`Bulk loading failed after ${retryCount + 1} attempts: ${error.message}`);
    }
  };

  // –ü–∞—Ä—Å–∏–Ω–≥ bulk data –≤ —Ñ–æ—Ä–º–∞—Ç —Å—É–º—ñ—Å–Ω–∏–π –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é
  const parseBulkDataToCache = (bulkResponse) => {
    const cache = {};
    
    if (!bulkResponse.data) {
      console.error('‚ùå No data in bulk response');
      return cache;
    }

    // –ü–∞—Ä—Å–∏–º–æ –≤—Å—ñ 8 datasets
    const datasets = bulkResponse.data;
    
    Object.entries(datasets).forEach(([datasetName, datasetData]) => {
      // –ü–∞—Ä—Å–∏–º–æ –Ω–∞–∑–≤—É: "opportunity_7" -> metric: "opportunity", resolution: 7
      const [metric, resolution] = datasetName.split('_');
      const cacheKey = `${metric}-${resolution}`;
      
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö —Å—É–º—ñ—Å–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é
      cache[cacheKey] = {
        hexagons: datasetData.hexagons || [],
        count: datasetData.count || 0,
        metadata: datasetData.metadata || {},
        metric: metric,
        resolution: parseInt(resolution)
      };
      
      console.log(`üì¶ Cached ${cacheKey}: ${cache[cacheKey].hexagons.length} hexagons`);
    });

    return cache;
  };

  // Fallback –¥–æ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥—É (8 –æ–∫—Ä–µ–º–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤)
  const fetchDataLegacyMethod = async () => {
    console.log('üîÑ Fallback to legacy loading method...');
    setCurrentStep('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
    
    const legacyTasks = [
      { metric: 'opportunity', resolution: 7, name: '–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ H3-7' },
      { metric: 'opportunity', resolution: 8, name: '–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ H3-8' },
      { metric: 'competition', resolution: 7, name: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è H3-7' },
      { metric: 'competition', resolution: 8, name: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è H3-8' }
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ —Ä–µ–∑–æ–ª—é—Ü—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    ];
    
    const cache = {};
    
    for (let i = 0; i < legacyTasks.length; i++) {
      const task = legacyTasks[i];
      
      try {
        setCurrentStep(`${task.name}...`);
        setCurrentProgress((i / legacyTasks.length) * 100);
        
        const url = `http://localhost:8000/api/v1/visualization/kyiv-h3?metric_type=${task.metric}&resolution=${task.resolution}&limit=${limit}`;
        const response = await fetch(url);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch ${task.metric} H3-${task.resolution}`);
        }
        
        const data = await response.json();
        
        const cacheKey = `${task.metric}-${task.resolution}`;
        cache[cacheKey] = {
          hexagons: data.hexagons || [],
          count: data.hexagons?.length || 0,
          metadata: data.metadata || {},
          metric: task.metric,
          resolution: task.resolution
        };
        
        console.log(`‚úÖ Legacy loaded ${cacheKey}: ${cache[cacheKey].hexagons.length} hexagons`);
        
      } catch (error) {
        console.error(`‚ùå Legacy loading failed for ${task.name}:`, error);
        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ —ñ–Ω—à–∏–º–∏ datasets
      }
    }
    
    return { data: cache };
  };
  const parseBulkDataToCache = (bulkResponse) => {
    const cache = {};
    
    if (!bulkResponse.data) {
      console.error('‚ùå No data in bulk response');
      return cache;
    }

    // –ü–∞—Ä—Å–∏–º–æ –≤—Å—ñ 8 datasets
    const datasets = bulkResponse.data;
    
    Object.entries(datasets).forEach(([datasetName, datasetData]) => {
      // –ü–∞—Ä—Å–∏–º–æ –Ω–∞–∑–≤—É: "opportunity_7" -> metric: "opportunity", resolution: 7
      const [metric, resolution] = datasetName.split('_');
      const cacheKey = `${metric}-${resolution}`;
      
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö —Å—É–º—ñ—Å–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é
      cache[cacheKey] = {
        hexagons: datasetData.hexagons || [],
        count: datasetData.count || 0,
        metadata: datasetData.metadata || {},
        metric: metric,
        resolution: parseInt(resolution)
      };
      
      console.log(`üì¶ Cached ${cacheKey}: ${cache[cacheKey].hexagons.length} hexagons`);
    });

    return cache;
  };

  // –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ fallback
  const preloadAllData = async () => {
    try {
      setOverallProgress(0);
      setCurrentProgress(0);
      setCompletedRequests(0);
      setPreloadError(null);
      setCurrentStep('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...');
      setIsPreloaded(false);
      
      console.log('üöÄ Starting H3 data loading...');
      
      let bulkResponse;
      let usedLegacyMethod = false;
      
      try {
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ bulk loading
        bulkResponse = await fetchBulkData();
      } catch (bulkError) {
        console.log('‚ö†Ô∏è Bulk loading failed, trying legacy method...');
        setCurrentStep('Bulk loading –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥...');
        
        // Fallback –¥–æ legacy –º–µ—Ç–æ–¥—É
        bulkResponse = await fetchDataLegacyMethod();
        usedLegacyMethod = true;
      }
      
      // –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ
      setCurrentStep('–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö...');
      let cache;
      
      if (usedLegacyMethod) {
        cache = bulkResponse.data; // –í–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
      } else {
        cache = parseBulkDataToCache(bulkResponse);
      }
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ allDataRef
      allDataRef.current = cache;
      
      // –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      const loadedDatasets = Object.keys(cache).length;
      setCompletedRequests(loadedDatasets);
      setOverallProgress(100);
      setCurrentProgress(100);
      setIsPreloaded(true);
      setCurrentStep(usedLegacyMethod ? '–ì–æ—Ç–æ–≤–æ (—Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥)!' : '–ì–æ—Ç–æ–≤–æ!');
      
      console.log(`üéâ Loading completed! ${loadedDatasets} datasets loaded using ${usedLegacyMethod ? 'legacy' : 'bulk'} method`);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const totalHexagons = Object.values(cache).reduce((sum, data) => sum + (data.hexagons?.length || 0), 0);
      const estimatedMemory = Math.round(totalHexagons * 0.5 / 1024); // KB
      console.log(`üìä Total hexagons: ${totalHexagons.toLocaleString()}, Memory: ~${estimatedMemory}KB`);
      
    } catch (error) {
      console.error('‚ùå All loading methods failed:', error);
      setPreloadError(error.message);
      setIsPreloaded(false);
      setCurrentStep('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    }
  };

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ bulk loading –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    preloadAllData();
  }, []); // –ë–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–∞–∑

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∫–µ—à—É (—Å—É–º—ñ—Å–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é)
  const getCachedData = useCallback((metric, resolution) => {
    const cacheKey = `${metric}-${resolution}`;
    return allDataRef.current[cacheKey] || null;
  }, []);

  // getOptimalResolution function (–∑ H3MapVisualization.jsx)
  const getOptimalResolution = useCallback((zoom) => {
    if (zoom < 8) return 7;
    if (zoom < 10) return 8;
    if (zoom < 12) return 9;
    return 10;
  }, []);

  // Viewport culling - –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∏–¥–∏–º—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
  const getVisibleHexagons = useCallback((metric, resolution, viewState, bufferFactor = 1.5) => {
    const cachedData = getCachedData(metric, resolution);
    if (!cachedData?.hexagons) {
      console.log(`‚ö†Ô∏è No cached data for ${metric}-${resolution}`);
      return [];
    }

    // –î–ª—è H3-7, H3-8: –ø–æ–∫–∞–∑—É—î–º–æ –í–°–Ü –≥–µ–∫—Å–∞–≥–æ–Ω–∏ (–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–∞–ª–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä—É)
    if (resolution <= 8) {
      console.log(`üìã Showing all ${cachedData.hexagons.length} hexagons for H3-${resolution}`);
      return cachedData.hexagons;
    }

    // –î–ª—è H3-9, H3-10: viewport culling –û–ë–û–í'–Ø–ó–ö–û–í–ò–ô
    if (!viewState || viewState.zoom <= 6) {
      // –ü—Ä–∏ –¥—É–∂–µ –¥–∞–ª–µ–∫–æ–º—É zoom –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
      return cachedData.hexagons;
    }

    try {
      const { longitude, latitude, zoom } = viewState;
      
      // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ viewport bounds –∑ buffer
      const latSpan = (360 / Math.pow(2, zoom)) * bufferFactor;
      const lonSpan = latSpan * Math.cos(latitude * Math.PI / 180);
      
      const bounds = {
        north: latitude + latSpan,
        south: latitude - latSpan,
        east: longitude + lonSpan,
        west: longitude - lonSpan
      };

      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≥–µ–∫—Å–∞–≥–æ–Ω–∏ –≤ –º–µ–∂–∞—Ö viewport
      const visibleHexagons = cachedData.hexagons.filter(hex => {
        if (!hex.geometry?.coordinates?.[0]) return false;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ü–µ–Ω—Ç—Ä –≥–µ–∫—Å–∞–≥–æ–Ω–∞
        const coords = hex.geometry.coordinates[0];
        const centerLon = coords.reduce((sum, coord) => sum + coord[0], 0) / coords.length;
        const centerLat = coords.reduce((sum, coord) => sum + coord[1], 0) / coords.length;
        
        return centerLat >= bounds.south && 
               centerLat <= bounds.north &&
               centerLon >= bounds.west && 
               centerLon <= bounds.east;
      });

      console.log(`üîç Viewport culling H3-${resolution}: ${visibleHexagons.length}/${cachedData.hexagons.length} hexagons visible`);
      
      return visibleHexagons;
      
    } catch (error) {
      console.error('Error in viewport culling:', error);
      // Fallback - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
      return cachedData.hexagons;
    }
  }, [getCachedData]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö (—Å—É–º—ñ—Å–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é)
  const getStats = useCallback(() => {
    const loadedKeys = Object.keys(allDataRef.current);
    const totalHexagons = loadedKeys.reduce((sum, key) => {
      return sum + (allDataRef.current[key].hexagons?.length || 0);
    }, 0);
    
    return {
      loadedDatasets: loadedKeys.length,
      totalDatasets: 8, // –û—á—ñ–∫—É—î–º–æ 8 datasets
      totalHexagons,
      estimatedMemoryKB: Math.round(totalHexagons * 0.5),
      userLocation,
      loadingMethod: 'bulk_loading'
    };
  }, [userLocation]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—Å—É–º—ñ—Å–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é)
  const reloadData = useCallback(() => {
    allDataRef.current = {};
    setIsPreloaded(false);
    setOverallProgress(0);
    setCurrentProgress(0);
    setCompletedRequests(0);
    setPreloadError(null);
    preloadAllData();
  }, []);

  // –ü—Ä–æ–≥—Ä–µ—Å calculation –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
  const totalTasks = 8; // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é

  return {
    // –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–°–£–ú–Ü–°–ù–ò–ô API –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é)
    isPreloaded,
    overallProgress,     // 0-100% –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
    currentProgress,     // 0-100% –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É  
    completedRequests,   // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    totalTasks,          // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ (8 –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
    preloadError,
    currentStep,
    
    // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–°–£–ú–Ü–°–ù–Ü –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é)
    getVisibleHexagons,
    getCachedData,
    
    // –£—Ç–∏–ª—ñ—Ç–∏ (–°–£–ú–Ü–°–ù–Ü –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é)
    getStats,
    reloadData,
    
    // Debug (–°–£–ú–Ü–°–ù–Ü –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–µ—Ä—Å—ñ—î—é)
    allDataKeys: Object.keys(allDataRef.current),
    
    // –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
    userLocation,
    getOptimalResolution
  };
};

export default usePreloadedH3Data;