"""
Test graph builder for Lviv store location
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—É –¥–ª—è –ª–æ–∫–∞—Ü—ñ—ó –º–∞–≥–∞–∑–∏–Ω—É —É –õ—å–≤–æ–≤—ñ
"""
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from src.data.osm_extractor import geo_osm_extractor
from src.graph.neo4j_client import geo_neo4j_client

def test_lviv_store_graph_building():
    """Test building graph for a potential store location in Lviv"""
    
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—É –¥–ª—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó –º–∞–≥–∞–∑–∏–Ω—É —É –õ—å–≤–æ–≤—ñ")
    print("=" * 80)
    
    # Lviv coordinates - —Ü–µ–Ω—Ç—Ä –º—ñ—Å—Ç–∞
    lat, lon = 49.8424, 24.0316
    store_id = "lviv_test_001"
    
    # Store parameters for revenue prediction
    store_params = {
        "store_id": store_id,
        "area_sqm": 1200,
        "format": "supermarket", 
        "assortment_categories": 18,
        "parking_spaces": 50,
        "planned_revenue": 2500000  # 2.5M UAH annually
    }
    
    try:
        # Step 1: Extract OSM data
        print(f"1. üìç –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö OSM –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {lat:.6f}, {lon:.6f}")
        location_data = geo_osm_extractor.extract_location_data(lat, lon)
        
        print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ: {len(location_data['pois'])} POIs, {location_data['buildings']['count']} –±—É–¥—ñ–≤–µ–ª—å")
        
        # Step 2: Create location node
        print("2. üéØ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—É–∑–ª–∞ –ª–æ–∫–∞—Ü—ñ—ó...")
        location_id = geo_neo4j_client.create_location_node(
            lat=lat,
            lon=lon,
            **store_params,
            **location_data["spatial_metrics"]
        )
        
        # Step 3: Create POI nodes
        print(f"3. üè™ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è {len(location_data['pois'])} POI –≤—É–∑–ª—ñ–≤...")
        poi_count = 0
        
        for poi_data in location_data['pois']:
            try:
                geo_neo4j_client.create_poi_node(poi_data)
                poi_count += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è POI {poi_data.get('osm_id')}: {e}")
                continue
        
        # Step 4: Create spatial relationships
        print("4. üîó –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä–æ–≤–∏—Ö –∑–≤'—è–∑–∫—ñ–≤...")
        relationship_count = geo_neo4j_client.create_spatial_relationships(
            location_id, 
            radius_km=0.5
        )
        
        print(f"   –ì—Ä–∞—Ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        # Step 5: Analyze created graph
        print("5. –ê–Ω–∞–ª—ñ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ—É:")
        print(f"   Location ID: {location_id}")
        print(f"   POIs —Å—Ç–≤–æ—Ä–µ–Ω–æ: {poi_count}")
        print(f"   –ó–≤'—è–∑–∫—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {relationship_count}")
        
        # Step 6: Verify data in Neo4j
        print("6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö —É Neo4j...")
        
        # Get location summary
        summary = geo_neo4j_client.get_location_summary(location_id)
        
        if summary:
            coords = summary.get('coordinates', {})
            print(f"   –õ–æ–∫–∞—Ü—ñ—è —É –≥—Ä–∞—Ñ—ñ: {summary.get('location_id', 'N/A')}")
            print(f"   –ó–∞–ø–∏—Å–∞–Ω–∏–π –≤–∏—Ç–æ—Ä–≥: {store_params['planned_revenue']:,} –≥—Ä–Ω")
            print(f"   –ü—ñ–¥–∫–ª—é—á–µ–Ω—ñ POI: {summary.get('total_pois', 0)}")
            print(f"   –ü—Ä–∏–∫–ª–∞–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {summary.get('categories', [])}")
        
        # Step 7: Competition analysis
        print("7. –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ —É –≥—Ä–∞—Ñ—ñ...")
        
        # Query for nearby competitors (shopping POIs)
        competition_query = """
        MATCH (l:Location {location_id: $location_id})-[:NEAR_POI]->(p:POI)
        WHERE p.category = 'shopping'
        WITH l, count(p) as competitor_count, avg(p.distance_km) as avg_distance
        RETURN competitor_count, avg_distance
        """
        
        result = geo_neo4j_client.execute_query(competition_query, {"location_id": location_id})
        
        if result:
            comp_data = result[0]
            competitor_count = comp_data.get('competitor_count', 0)
            avg_distance = comp_data.get('avg_distance')
            
            print(f"   –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏ –ø–æ—Ä—É—á: {competitor_count}")
            
            # Handle None values safely
            if avg_distance is not None:
                print(f"   –°–µ—Ä–µ–¥–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—å: {avg_distance:.3f} –∫–º")
            else:
                print(f"   –°–µ—Ä–µ–¥–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—å: –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        
        # Step 8: Revenue prediction factors
        print("8. üìä –§–∞–∫—Ç–æ—Ä–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤–∏—Ç–æ—Ä–≥—É:")
        
        factors_query = """
        MATCH (l:Location {location_id: $location_id})
        OPTIONAL MATCH (l)-[:NEAR_POI]->(food:POI {category: 'food'})
        OPTIONAL MATCH (l)-[:NEAR_POI]->(transport:POI {category: 'transport'})
        OPTIONAL MATCH (l)-[:NEAR_POI]->(services:POI {category: 'services'})
        WITH l, 
             count(DISTINCT food) as food_nearby,
             count(DISTINCT transport) as transport_nearby,
             count(DISTINCT services) as services_nearby
        RETURN 
            l.poi_density as poi_density,
            l.retail_density as retail_density,
            l.transport_accessibility as transport_access,
            food_nearby,
            transport_nearby, 
            services_nearby
        """
        
        factors_result = geo_neo4j_client.execute_query(factors_query, {"location_id": location_id})
        
        if factors_result:
            factors = factors_result[0]
            
            # Handle None values safely for all factors
            poi_density = factors.get('poi_density') or 0
            retail_density = factors.get('retail_density') or 0
            transport_access = factors.get('transport_access') or 0
            food_nearby = factors.get('food_nearby') or 0
            transport_nearby = factors.get('transport_nearby') or 0
            services_nearby = factors.get('services_nearby') or 0
            
            print(f"   POI —â—ñ–ª—å–Ω—ñ—Å—Ç—å: {poi_density:.2f} –Ω–∞ –∫–º¬≤")
            print(f"   –¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å: {retail_density:.2f} –Ω–∞ –∫–º¬≤")
            print(f"   –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å: {transport_access:.2f}")
            print(f"   –ó–∞–∫–ª–∞–¥–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–æ—Ä—É—á: {food_nearby}")
            print(f"   –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –≤—É–∑–ª–∏ –ø–æ—Ä—É—á: {transport_nearby}")
            print(f"   –°–µ—Ä–≤—ñ—Å–∏ –ø–æ—Ä—É—á: {services_nearby}")
        
        # Step 9: Simple revenue prediction
        print("9. üéØ –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç–æ—Ä–≥—É:")
        
        if factors_result:
            factors = factors_result[0]
            
            # Simple scoring model
            base_score = 1.0
            
            # POI density factor (more POIs = more foot traffic)
            poi_density = factors.get('poi_density') or 0
            poi_factor = min(poi_density / 100.0, 1.5)  # Cap at 1.5x
            
            # Transport accessibility factor
            transport_access = factors.get('transport_access') or 0
            transport_factor = 1.0 + (transport_access / 10.0)  # Up to 1.1x
            
            # Competition factor (some competition is good, too much is bad)
            competition_factor = 1.0
            if competitor_count == 0:
                competition_factor = 0.8  # No competition might mean poor location
            elif competitor_count <= 3:
                competition_factor = 1.2  # Healthy competition
            else:
                competition_factor = 0.9  # Too much competition
            
            # Calculate adjusted revenue
            total_factor = base_score * poi_factor * transport_factor * competition_factor
            predicted_revenue = store_params['planned_revenue'] * total_factor
            
            print(f"   –ë–∞–∑–æ–≤–∏–π –ø–ª–∞–Ω: {store_params['planned_revenue']:,} –≥—Ä–Ω")
            print(f"   –§–∞–∫—Ç–æ—Ä POI: {poi_factor:.2f}")
            print(f"   –§–∞–∫—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {transport_factor:.2f}")
            print(f"   –§–∞–∫—Ç–æ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó: {competition_factor:.2f}")
            print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π –º–Ω–æ–∂–Ω–∏–∫: {total_factor:.2f}")
            print(f"   üìà –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–π –≤–∏—Ç–æ—Ä–≥: {predicted_revenue:,.0f} –≥—Ä–Ω")
            
            # Risk assessment
            if total_factor >= 1.2:
                risk_level = "üü¢ –ù–∏–∑—å–∫–∏–π —Ä–∏–∑–∏–∫ - –≤—ñ–¥–º—ñ–Ω–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è"
            elif total_factor >= 1.0:
                risk_level = "üü° –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∏–∑–∏–∫ - —Ö–æ—Ä–æ—à–∞ –ª–æ–∫–∞—Ü—ñ—è"
            elif total_factor >= 0.8:
                risk_level = "üü† –ü—ñ–¥–≤–∏—â–µ–Ω–∏–π —Ä–∏–∑–∏–∫ - –ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏"
            else:
                risk_level = "üî¥ –í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫ - –ø—Ä–æ–±–ª–µ–º–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è"
            
            print(f"   –û—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—É: {risk_level}")
        
        print("\n" + "=" * 80)
        print("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –õ–æ–∫–∞—Ü—ñ—è {location_id} –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –≥—Ä–∞—Ñ—ñ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—É: {e}")
        import traceback
        traceback.print_exc()
        return False

def cleanup_test_data():
    """Clean up test data from Neo4j"""
    print("\nüßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    try:
        # Delete test location and related data
        cleanup_query = """
        MATCH (l:Location {store_id: 'lviv_test_001'})
        OPTIONAL MATCH (l)-[r]-()
        DELETE r, l
        """
        
        geo_neo4j_client.execute_query(cleanup_query)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")

def main():
    """Main test function"""
    print("üè™ GeoRetail: –¢–µ—Å—Ç –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—É –¥–ª—è –õ—å–≤–æ–≤–∞")
    print("=" * 60)
    
    try:
        # Test graph building
        success = test_lviv_store_graph_building()
        
        if success:
            print("\nüéâ –£—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
            
            # Ask if user wants to keep the data
            response = input("\n–ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≤ –≥—Ä–∞—Ñ—ñ? (y/N): ")
            if response.lower() != 'y':
                cleanup_test_data()
        else:
            print("\n‚ùå –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        # Always close connections
        try:
            geo_neo4j_client.close()
        except:
            pass

if __name__ == "__main__":
    main()