#!/usr/bin/env python3
"""
H3 Grid Generator –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–∏—Ö H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤ –∑ osm_ukraine.osm_raw
–ß–∞—Å—Ç–∏–Ω–∞ –ú–æ–¥—É–ª—è 2: Data Processing & Normalization

–¶–µ–π —Å–∫—Ä–∏–ø—Ç —Å—Ç–≤–æ—Ä—é—î H3 –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö
"""

import json
import logging
import sys
from dataclasses import dataclass
from typing import Dict, List, Set, Tuple
from pathlib import Path

import h3
import psycopg2
from psycopg2.extras import execute_batch
from shapely.geometry import Polygon, Point

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@dataclass
class H3Cell:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è H3 –∫–æ–º—ñ—Ä–∫–∏ –∑ –≥–µ–æ–º–µ—Ç—Ä—ñ—î—é"""
    h3_index: str
    resolution: int
    geom_wkt: str          # PostGIS POLYGON
    geojson_geometry: dict # GeoJSON –¥–ª—è Qlik Sense
    center_lat: float
    center_lon: float
    area_km2: float
    ukraine_region: str = None


class H3GridFromExistingData:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä H3 —Å—ñ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–∏—Ö H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤ –∑ osm_raw
    """
    
    def __init__(self, db_connection_string: str):
        self.db_connection_string = db_connection_string
        self.resolutions = [7, 8, 9, 10]
        
    def extract_existing_h3_indexes(self) -> Dict[int, Set[str]]:
        """
        –í–∏—Ç—è–≥—É—î –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ H3 —ñ–Ω–¥–µ–∫—Å–∏ –∑ osm_ukraine.osm_raw
        
        Returns:
            Dict[int, Set[str]]: –°–ª–æ–≤–Ω–∏–∫ {resolution: {h3_index, ...}}
        """
        logger.info("üîç –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤ –∑ osm_ukraine.osm_raw")
        
        h3_indexes = {res: set() for res in self.resolutions}
        
        with psycopg2.connect(self.db_connection_string) as conn:
            with conn.cursor() as cursor:
                
                for resolution in self.resolutions:
                    column_name = f"h3_res_{resolution}"
                    
                    logger.info(f"üìä –û–±—Ä–æ–±–∫–∞ {column_name}...")
                    
                    # –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ H3 —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è —Ü—å–æ–≥–æ resolution
                    query = f"""
                        SELECT DISTINCT {column_name} 
                        FROM osm_ukraine.osm_raw 
                        WHERE {column_name} IS NOT NULL 
                          AND {column_name} != ''
                    """
                    
                    cursor.execute(query)
                    results = cursor.fetchall()
                    
                    # –î–æ–¥–∞—î–º–æ –¥–æ –º–Ω–æ–∂–∏–Ω–∏
                    for row in results:
                        h3_index = row[0].strip()
                        if h3_index:  # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
                            h3_indexes[resolution].add(h3_index)
                    
                    logger.info(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(h3_indexes[resolution]):,} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤")
        
        # –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_indexes = sum(len(indexes) for indexes in h3_indexes.values())
        logger.info(f"üéâ –ó–∞–≥–∞–ª–æ–º –≤–∏—Ç—è–≥–Ω—É—Ç–æ {total_indexes:,} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤")
        
        return h3_indexes
    
    def generate_geometries_for_h3_indexes(self, h3_indexes: Dict[int, Set[str]]) -> Dict[int, List[H3Cell]]:
        """
        –°—Ç–≤–æ—Ä—é—î –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤
        
        Args:
            h3_indexes: –°–ª–æ–≤–Ω–∏–∫ –∑ H3 —ñ–Ω–¥–µ–∫—Å–∞–º–∏ –ø–æ resolutions
            
        Returns:
            Dict[int, List[H3Cell]]: –°–ª–æ–≤–Ω–∏–∫ –∑ H3Cell –æ–±'—î–∫—Ç–∞–º–∏
        """
        logger.info("üó∫Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–µ–æ–º–µ—Ç—Ä—ñ–π –¥–ª—è H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤")
        
        all_cells = {}
        total_cells = 0
        
        for resolution, indexes in h3_indexes.items():
            if not indexes:
                logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è resolution {resolution}")
                all_cells[resolution] = []
                continue
                
            logger.info(f"üî¢ –û–±—Ä–æ–±–∫–∞ resolution {resolution}: {len(indexes):,} —ñ–Ω–¥–µ–∫—Å—ñ–≤")
            
            cells = []
            processed = 0
            
            for h3_index in indexes:
                try:
                    # –í–∞–ª—ñ–¥—É—î–º–æ H3 —ñ–Ω–¥–µ–∫—Å
                    if not h3.is_valid_cell(h3_index):
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π H3 —ñ–Ω–¥–µ–∫—Å: {h3_index}")
                        continue
                        
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ resolution
                    actual_resolution = h3.get_resolution(h3_index)
                    if actual_resolution != resolution:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π resolution –¥–ª—è {h3_index}: {actual_resolution} != {resolution}")
                        continue
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ H3Cell
                    cell = self._create_h3_cell(h3_index, resolution)
                    cells.append(cell)
                    
                    processed += 1
                    if processed % 5000 == 0:
                        logger.info(f"   ‚öôÔ∏è –û–±—Ä–æ–±–ª–µ–Ω–æ {processed:,}/{len(indexes):,} —ñ–Ω–¥–µ–∫—Å—ñ–≤")
                        
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ H3 —ñ–Ω–¥–µ–∫—Å—É {h3_index}: {e}")
                    continue
            
            all_cells[resolution] = cells
            total_cells += len(cells)
            logger.info(f"‚úÖ Resolution {resolution}: {len(cells):,} –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ–º—ñ—Ä–æ–∫")
        
        logger.info(f"üéâ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–µ–æ–º–µ—Ç—Ä—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å—å–æ–≥–æ –∫–æ–º—ñ—Ä–æ–∫: {total_cells:,}")
        return all_cells
    
    def _create_h3_cell(self, h3_index: str, resolution: int) -> H3Cell:
        """
        –°—Ç–≤–æ—Ä—é—î H3Cell –æ–±'—î–∫—Ç –∑ –ø–æ–≤–Ω–æ—é –≥–µ–æ–º–µ—Ç—Ä—ñ—î—é
        
        Args:
            h3_index: H3 —ñ–Ω–¥–µ–∫—Å –∫–æ–º—ñ—Ä–∫–∏
            resolution: –†—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
            
        Returns:
            H3Cell: –û–±'—î–∫—Ç –∑ –≥–µ–æ–º–µ—Ç—Ä—ñ—î—é —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ boundary coordinates (H3 v4+ API)
        boundary_coords = h3.cell_to_boundary(h3_index)
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        boundary_list = [(lat, lon) for lat, lon in boundary_coords]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PostGIS WKT –≥–µ–æ–º–µ—Ç—Ä—ñ—é (lon, lat –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è WKT)
        wkt_coords = [(lon, lat) for lat, lon in boundary_list]
        wkt_coords.append(wkt_coords[0])  # –ó–∞–º–∏–∫–∞—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω
        geom_wkt = f"POLYGON(({', '.join([f'{lon} {lat}' for lon, lat in wkt_coords])}))"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ GeoJSON –≥–µ–æ–º–µ—Ç—Ä—ñ—é –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó (lon, lat –ø–æ—Ä—è–¥–æ–∫)
        geojson_coords = [[lon, lat] for lat, lon in boundary_list]
        geojson_coords.append(geojson_coords[0])  # –ó–∞–º–∏–∫–∞—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω
        geojson_geometry = {
            "type": "Polygon",
            "coordinates": [geojson_coords]
        }
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü–µ–Ω—Ç—Ä –∫–æ–º—ñ—Ä–∫–∏ (H3 v4+ API)
        center_lat, center_lon = h3.cell_to_latlng(h3_index)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–ª–æ—â—É (H3 v4+ API)
        area_km2 = h3.average_hexagon_area(resolution, unit='km^2')
        
        return H3Cell(
            h3_index=h3_index,
            resolution=resolution,
            geom_wkt=geom_wkt,
            geojson_geometry=geojson_geometry,
            center_lat=center_lat,
            center_lon=center_lon,
            area_km2=area_km2
        )
    
    def save_to_database(self, h3_cells: Dict[int, List[H3Cell]]):
        """
        –ó–±–µ—Ä—ñ–≥–∞—î H3 —Å—ñ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        
        Args:
            h3_cells: –°–ª–æ–≤–Ω–∏–∫ –∑ H3 –∫–æ–º—ñ—Ä–∫–∞–º–∏ –ø–æ resolutions
        """
        logger.info("üíæ –ü–æ—á–∞—Ç–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è H3 —Å—ñ—Ç–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
        
        with psycopg2.connect(self.db_connection_string) as conn:
            with conn.cursor() as cursor:
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
                self._create_h3_grid_table(cursor)
                
                # –û—á–∏—â—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ
                logger.info("üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö H3 –¥–∞–Ω–∏—Ö")
                cursor.execute("TRUNCATE TABLE osm_ukraine.h3_grid")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ resolutions
                total_saved = 0
                for resolution, cells in h3_cells.items():
                    if not cells:
                        logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ resolution {resolution}: –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö")
                        continue
                        
                    logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è resolution {resolution}: {len(cells):,} –∫–æ–º—ñ—Ä–æ–∫")
                    
                    # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –¥–ª—è batch insert
                    batch_data = []
                    for cell in cells:
                        batch_data.append((
                            cell.h3_index,
                            cell.resolution,
                            cell.geom_wkt,
                            json.dumps(cell.geojson_geometry),
                            f"POINT({cell.center_lon} {cell.center_lat})",
                            cell.area_km2
                        ))
                    
                    # Batch insert
                    insert_query = """
                        INSERT INTO osm_ukraine.h3_grid 
                        (h3_index, resolution, geom, geojson_geometry, center_point, area_km2)
                        VALUES (%s, %s, ST_GeomFromText(%s, 4326), %s, ST_GeomFromText(%s, 4326), %s)
                    """
                    
                    execute_batch(cursor, insert_query, batch_data, page_size=1000)
                    total_saved += len(cells)
                    logger.info(f"   ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(cells):,} –∫–æ–º—ñ—Ä–æ–∫")
                
                conn.commit()
                logger.info(f"üéâ –£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ {total_saved:,} H3 –∫–æ–º—ñ—Ä–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
    
    def _create_h3_grid_table(self, cursor):
        """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—é h3_grid —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î"""
        
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS osm_ukraine.h3_grid (
            h3_index VARCHAR(15) PRIMARY KEY,
            resolution INTEGER NOT NULL,
            geom GEOMETRY(POLYGON, 4326) NOT NULL,
            geojson_geometry JSONB,
            center_point GEOMETRY(POINT, 4326) NOT NULL,
            area_km2 DECIMAL(8,4) NOT NULL,
            ukraine_region VARCHAR(50),
            created_at TIMESTAMP DEFAULT NOW(),
            
            CONSTRAINT h3_grid_resolution_check CHECK (resolution BETWEEN 7 AND 10)
        );
        
        -- –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
        CREATE INDEX IF NOT EXISTS idx_h3_grid_resolution 
            ON osm_ukraine.h3_grid (resolution);
            
        CREATE INDEX IF NOT EXISTS idx_h3_grid_geom 
            ON osm_ukraine.h3_grid USING GIST (geom);
            
        CREATE INDEX IF NOT EXISTS idx_h3_grid_center 
            ON osm_ukraine.h3_grid USING GIST (center_point);
        """
        
        cursor.execute(create_table_sql)
        logger.info("üìã –¢–∞–±–ª–∏—Ü—è h3_grid —Å—Ç–≤–æ—Ä–µ–Ω–∞/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞")
    
    def generate_statistics(self) -> Dict[str, any]:
        """
        –ì–µ–Ω–µ—Ä—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ–π H3 —Å—ñ—Ç—Ü—ñ
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ resolutions
        """
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ H3 —Å—ñ—Ç–∫–∏")
        
        stats = {}
        
        with psycopg2.connect(self.db_connection_string) as conn:
            with conn.cursor() as cursor:
                # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cursor.execute("""
                    SELECT 
                        resolution,
                        COUNT(*) as cell_count,
                        SUM(area_km2) as total_area_km2,
                        AVG(area_km2) as avg_cell_area,
                        MIN(area_km2) as min_cell_area,
                        MAX(area_km2) as max_cell_area
                    FROM osm_ukraine.h3_grid 
                    GROUP BY resolution 
                    ORDER BY resolution
                """)
                
                resolution_stats = {}
                for row in cursor.fetchall():
                    resolution_stats[row[0]] = {
                        'cell_count': row[1],
                        'total_area_km2': float(row[2]),
                        'avg_cell_area': float(row[3]),
                        'min_cell_area': float(row[4]),
                        'max_cell_area': float(row[5])
                    }
                
                stats['by_resolution'] = resolution_stats
                
                # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                cursor.execute("SELECT COUNT(*) FROM osm_ukraine.h3_grid")
                stats['total_cells'] = cursor.fetchone()[0]
                
                # –ü–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó (–±–µ—Ä–µ–º–æ resolution 9 –¥–ª—è –æ—Ü—ñ–Ω–∫–∏)
                cursor.execute("""
                    SELECT SUM(area_km2) FROM osm_ukraine.h3_grid 
                    WHERE resolution = 9
                """)
                result = cursor.fetchone()[0]
                stats['ukraine_coverage_km2'] = float(result) if result else 0.0
        
        return stats
    
    def print_statistics(self, stats: Dict[str, any]):
        """–í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—Ä–∞—Å–∏–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
        
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê H3 –°–Ü–¢–ö–ò –£–ö–†–ê–á–ù–ò (–Ω–∞ –æ—Å–Ω–æ–≤—ñ OSM –¥–∞–Ω–∏—Ö)")
        print("="*60)
        print(f"üó∫Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º—ñ—Ä–æ–∫: {stats['total_cells']:,}")
        print(f"üá∫üá¶ –ü–æ–∫—Ä–∏—Ç—Ç—è –£–∫—Ä–∞—ó–Ω–∏ (res 9): {stats['ukraine_coverage_km2']:,.0f} –∫–º¬≤")
        print("\nüìè –ü–æ —Ä—ñ–≤–Ω—è—Ö –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó:")
        
        for resolution, res_stats in stats['by_resolution'].items():
            print(f"\n   Resolution {resolution}:")
            print(f"     ‚Ä¢ –ö–æ–º—ñ—Ä–æ–∫: {res_stats['cell_count']:,}")
            print(f"     ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –ø–ª–æ—â–∞: {res_stats['avg_cell_area']:.2f} –∫–º¬≤")
            print(f"     ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞: {res_stats['total_area_km2']:,.0f} –∫–º¬≤")
        
        print("\n" + "="*60)
        print("üí° –¶–µ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –¥–ª—è H3 —ñ–Ω–¥–µ–∫—Å—ñ–≤, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ —î –≤ OSM –¥–∞–Ω–∏—Ö!")
        print("="*60)

    def run_full_process(self):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è H3 Grid"""
        try:
            # 1. –í–∏—Ç—è–≥—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ H3 —ñ–Ω–¥–µ–∫—Å–∏
            h3_indexes = self.extract_existing_h3_indexes()
            
            # 2. –°—Ç–≤–æ—Ä—é—î–º–æ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó
            h3_cells = self.generate_geometries_for_h3_indexes(h3_indexes)
            
            # 3. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            self.save_to_database(h3_cells)
            
            # 4. –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∞ –≤–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.generate_statistics()
            self.print_statistics(stats)
            
            logger.info("‚úÖ H3 Grid Generator –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            sys.exit(1)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó H3 —Å—ñ—Ç–∫–∏"""
    
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    DB_CONNECTION_STRING = "postgresql://georetail_user:georetail_secure_2024@localhost:5432/georetail"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å
    generator = H3GridFromExistingData(DB_CONNECTION_STRING)
    generator.run_full_process()


if __name__ == "__main__":
    main()