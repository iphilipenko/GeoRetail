#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å—ñ–≤
"""

from module1_raw_import import ImportConfig, RawDataImporter
import geopandas as gpd
from pathlib import Path

def test_record_preparation():
    """–¢–µ—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å—ñ–≤"""
    
    print("üß™ –¢–µ—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å—ñ–≤")
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞
        config = ImportConfig(batch_size=100)
        importer = RawDataImporter(config)
        print("‚úÖ –Ü–º–ø–æ—Ä—Ç–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        file_path = Path(r"C:\OSMData\UA_MAP_Kherson.gpkg")
        print(f"üìñ –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {file_path}")
        
        gdf = gpd.read_file(file_path)
        print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(gdf):,} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –¢–µ—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–µ—Ä—à–∏—Ö 5 –∑–∞–ø–∏—Å—ñ–≤
        print("\nüîç –¢–µ—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å—ñ–≤:")
        successful = 0
        
        for i in range(5):
            print(f"\n--- –ó–∞–ø–∏—Å {i+1} ---")
            record = gdf.iloc[i].to_dict()
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
            print(f"üìù OSM ID: {record.get('osm_id')}")
            print(f"üè∑Ô∏è –¢–µ–≥–∏: {record.get('tags')[:100]}..." if record.get('tags') else "üè∑Ô∏è –¢–µ–≥–∏: –Ω–µ–º–∞—î")
            print(f"üìç –ì–µ–æ–º–µ—Ç—Ä—ñ—è: {type(record.get('geometry'))}")
            
            # –¢–µ—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏
            try:
                prepared = importer._prepare_record(record, 'Kherson_Test')
                if prepared:
                    print(f"‚úÖ –ó–∞–ø–∏—Å –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π:")
                    print(f"   OSM ID: {prepared['osm_id']}")
                    print(f"   –ù–∞–∑–≤–∞: {prepared['name'] or '–Ω–µ–º–∞—î'}")
                    print(f"   H3-8: {prepared['h3_res_8'] or '–Ω–µ–º–∞—î'}")
                    print(f"   –Ø–∫—ñ—Å—Ç—å: {prepared['data_quality_score']:.2f}")
                    successful += 1
                else:
                    print(f"‚ùå –ó–∞–ø–∏—Å –≤—ñ–¥–∫–∏–Ω—É—Ç–∏–π")
            except Exception as e:
                print(f"üí• –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏: {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/5 –∑–∞–ø–∏—Å—ñ–≤ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ")
        
        if successful > 0:
            print("\nüéâ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–∞—Ü—é—î! –ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø–æ–≤–Ω–∏–π —ñ–º–ø–æ—Ä—Ç.")
            
            # –¢–µ—Å—Ç –º–∞–ª–æ–≥–æ –±–∞—Ç—á—É
            print("\nüß™ –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –º–∞–ª–æ–≥–æ –±–∞—Ç—á—É (10 –∑–∞–ø–∏—Å—ñ–≤):")
            
            small_batch = []
            for i in range(10):
                record = gdf.iloc[i].to_dict()
                prepared = importer._prepare_record(record, 'Kherson_Test')
                if prepared:
                    small_batch.append(prepared)
            
            if small_batch:
                print(f"üì¶ –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(small_batch)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
                
                try:
                    inserted = importer._insert_batch(small_batch)
                    print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted} –∑–∞–ø–∏—Å—ñ–≤ –≤ –ë–î")
                    
                    if inserted > 0:
                        print("üéâ –í–°–ï –ü–†–ê–¶–Æ–Ñ! –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
                    else:
                        print("‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ, –∞–ª–µ –Ω–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ñ. –ú–æ–∂–ª–∏–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –ë–î.")
                        
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î: {e}")
            else:
                print("‚ùå –ñ–æ–¥–µ–Ω –∑–∞–ø–∏—Å –Ω–µ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        else:
            print("‚ùå –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ –ø—Ä–∞—Ü—é—î. –ü–æ—Ç—Ä—ñ–±–Ω–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è.")
            
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_record_preparation()