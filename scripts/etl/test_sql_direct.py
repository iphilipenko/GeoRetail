#!/usr/bin/env python3
"""
–ü—Ä—è–º–∏–π —Ç–µ—Å—Ç SQL –≤—Å—Ç–∞–≤–∫–∏ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é
"""

from module1_raw_import import ImportConfig, RawDataImporter
from sqlalchemy import create_engine, text
import geopandas as gpd
import json

def test_sql_direct():
    """–ü—Ä—è–º–∏–π —Ç–µ—Å—Ç SQL –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é"""
    
    print("üîç –ü—Ä—è–º–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SQL –≤—Å—Ç–∞–≤–∫–∏")
    
    try:
        config = ImportConfig()
        engine = create_engine(config.connection_string)
        
        # –ß–∏—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        gdf = gpd.read_file(r"C:\OSMData\UA_MAP_Kherson.gpkg")
        test_record = gdf.iloc[0]
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å: OSM_ID {test_record['osm_id']}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–º–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å—É
        importer = RawDataImporter(config)
        prepared = importer._prepare_record(test_record.to_dict(), 'Kherson')  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ 'Kherson'
        
        if not prepared:
            print("‚ùå –ó–∞–ø–∏—Å –Ω–µ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π")
            return
        
        print("‚úÖ –ó–∞–ø–∏—Å –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π")
        print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É:")
        for key, value in prepared.items():
            if key == 'geom':
                print(f"  {key}: {type(value)} - {value.geom_type if hasattr(value, 'geom_type') else 'Unknown'}")
            else:
                value_str = str(value)[:50] + "..." if len(str(value)) > 50 else str(value)
                print(f"  {key}: {value_str}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≥–µ–æ–º–µ—Ç—Ä—ñ—é –≤ WKT (—è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—ñ)
        if prepared.get('geom'):
            try:
                if hasattr(prepared['geom'], 'wkt'):
                    prepared['geom_wkt'] = prepared['geom'].wkt
                    print(f"‚úÖ WKT –∫–æ–Ω–≤–µ—Ä—Å—ñ—è: {len(prepared['geom_wkt'])} —Å–∏–º–≤–æ–ª—ñ–≤")
                else:
                    prepared['geom_wkt'] = str(prepared['geom'])
                    print(f"‚úÖ WKT fallback: {len(prepared['geom_wkt'])} —Å–∏–º–≤–æ–ª—ñ–≤")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ WKT –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó: {e}")
                return
            
            # –í–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –≥–µ–æ–º–µ—Ç—Ä—ñ—é
            del prepared['geom']
        
        # –¢–û–ß–ù–ò–ô SQL –ó –†–û–ë–û–ß–û–ì–û –ö–û–î–£
        sql = """
        INSERT INTO osm_ukraine.osm_raw 
        (region_name, original_fid, osm_id, geom, tags, name, 
         h3_res_7, h3_res_8, h3_res_9, h3_res_10, data_quality_score)
        VALUES (:region_name, :original_fid, :osm_id, 
                ST_GeomFromText(:geom_wkt, 4326), :tags, :name,
                :h3_res_7, :h3_res_8, :h3_res_9, :h3_res_10, 
                :data_quality_score)
        """
        
        print("\nüîß –¢–µ—Å—Ç SQL –≤—Å—Ç–∞–≤–∫–∏:")
        print("SQL:", sql.replace('\n', '\\n'))
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:")
        for key, value in prepared.items():
            print(f"  :{key} = {value}")
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–≤–∫—É
        try:
            with engine.connect() as conn:
                with conn.begin():
                    result = conn.execute(text(sql), prepared)
                    print(f"‚úÖ SQL –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ! Rows affected: {result.rowcount}")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —â–æ –≤—Å—Ç–∞–≤–∏–ª–æ—Å—è
                    check_sql = """
                    SELECT osm_id, name, h3_res_8, ST_AsText(geom) as geom_text
                    FROM osm_ukraine.osm_raw 
                    WHERE region_name = :region_name AND osm_id = :osm_id
                    LIMIT 1
                    """
                    
                    check_result = conn.execute(text(check_sql), {
                        'region_name': prepared['region_name'],
                        'osm_id': prepared['osm_id']
                    })
                    
                    row = check_result.fetchone()
                    if row:
                        print(f"‚úÖ –ó–∞–ø–∏—Å –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î:")
                        print(f"   OSM_ID: {row[0]}")
                        print(f"   Name: {row[1]}")
                        print(f"   H3: {row[2]}")
                        print(f"   Geom: {row[3][:100]}...")
                    else:
                        print("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏")
                        
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SQL –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
            print(f"üìä –¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e)}")
            
            # –°–ø—Ä–æ–±—É—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø—Ä–æ–±–ª–µ–º—É
            import traceback
            print("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
            traceback.print_exc()
            
            # –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
            print("\nüîç –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:")
            print("1. –ü–∞—Ä—Ç–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ - –º–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ä—Ç–∏—Ü—ñ—é –¥–ª—è 'Kherson_Test'")
            print("2. Constraint violations")
            print("3. –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
            print("4. –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–∏—Ö")
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_sql_direct()