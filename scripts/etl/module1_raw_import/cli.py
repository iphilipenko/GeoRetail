#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å 1: Raw Data Import - CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–ü—Ä–æ—Å—Ç–∏–π –∫–æ–º–∞–Ω–¥–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É OSM –¥–∞–Ω–∏—Ö
"""

import sys
from pathlib import Path

import click

from .config import ImportConfig
from .importer import RawDataImporter


@click.group()
def cli():
    """–ú–æ–¥—É–ª—å 1: Raw Data Import - –Ü–º–ø–æ—Ä—Ç OSM GPKG —Ñ–∞–π–ª—ñ–≤ –≤ PostGIS"""
    pass


@cli.command()
@click.option('--data-dir', 
              default=None,
              help='–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ GPKG —Ñ–∞–π–ª–∞–º–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)')
@click.option('--batch-size', 
              default=5000, 
              help='–†–æ–∑–º—ñ—Ä –±–∞—Ç—á—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏')
@click.option('--regions', 
              help='–°–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ - –≤—Å—ñ)')
@click.option('--test-run', 
              is_flag=True, 
              help='–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫ –Ω–∞ 1 –Ω–∞–π–º–µ–Ω—à–æ–º—É —Ñ–∞–π–ª—ñ')
@click.option('--log-level',
              default='INFO',
              type=click.Choice(['DEBUG', 'INFO', 'WARNING', 'ERROR']),
              help='–†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è')
def import_data(data_dir, batch_size, regions, test_run, log_level):
    """–Ü–º–ø–æ—Ä—Ç OSM –¥–∞–Ω–∏—Ö –≤ PostGIS"""
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = ImportConfig.from_env()
        config.batch_size = batch_size
        config.log_level = log_level
        
        if data_dir:
            config.data_directory = data_dir
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞
        importer = RawDataImporter(config)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        regions_list = None
        if regions:
            regions_list = [r.strip() for r in regions.split(',')]
        
        # –ó–∞–ø—É—Å–∫ —ñ–º–ø–æ—Ä—Ç—É
        result = importer.run_import(
            data_dir=data_dir,
            regions=regions_list,
            test_run=test_run
        )
        
        # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if result['successful_files'] > 0:
            click.echo(f"\n‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            click.echo(f"   –§–∞–π–ª—ñ–≤: {result['successful_files']}/{result['total_files']}")
            click.echo(f"   –ó–∞–ø–∏—Å—ñ–≤: {result['total_records_imported']:,}")
            click.echo(f"   –ß–∞—Å: {result['total_processing_time']}—Å")
            
            if result['failed_files'] > 0:
                click.echo(f"\n‚ö†Ô∏è –§–∞–π–ª—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {result['failed_files']}")
        else:
            click.echo(f"\n‚ùå –Ü–º–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è")
            if result['failed_files'] > 0:
                click.echo(f"   –§–∞–π–ª—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {result['failed_files']}")
        
        # Exit –∫–æ–¥
        sys.exit(0 if result['failed_files'] == 0 else 1)
        
    except KeyboardInterrupt:
        click.echo("\nüõë –Ü–º–ø–æ—Ä—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(2)
    except Exception as e:
        click.echo(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(3)


@cli.command()
@click.option('--data-dir', 
              default=None,
              help='–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ GPKG —Ñ–∞–π–ª–∞–º–∏')
def list_files(data_dir):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö GPKG —Ñ–∞–π–ª—ñ–≤"""
    
    try:
        config = ImportConfig.from_env()
        if data_dir:
            config.data_directory = data_dir
            
        importer = RawDataImporter(config)
        files = importer.discover_files(data_dir)
        
        if not files:
            click.echo("GPKG —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
            return
        
        click.echo(f"\n–ó–Ω–∞–π–¥–µ–Ω–æ {len(files)} GPKG —Ñ–∞–π–ª—ñ–≤:")
        click.echo("-" * 60)
        
        total_size = 0
        for file_path in files:
            size_mb = file_path.stat().st_size / (1024 * 1024)
            total_size += size_mb
            
            region = file_path.stem
            click.echo(f"{region:<30} {size_mb:>8.1f} MB")
        
        click.echo("-" * 60)
        click.echo(f"{'–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:':<30} {total_size:>8.1f} MB")
        
    except Exception as e:
        click.echo(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)


@cli.command()
def test_connection():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    
    try:
        config = ImportConfig.from_env()
        
        click.echo("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î...")
        click.echo(f"Host: {config.db_host}:{config.db_port}")
        click.echo(f"Database: {config.db_name}")
        click.echo(f"User: {config.db_user}")
        
        importer = RawDataImporter(config)
        click.echo("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
        
    except Exception as e:
        click.echo(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        sys.exit(1)


if __name__ == '__main__':
    cli()