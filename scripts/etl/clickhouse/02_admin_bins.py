"""
scripts/etl/clickhouse/02_admin_bins.py
–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bins (terciles) —Ç–∞ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ClickHouse —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
"""

import logging
import sys
from datetime import datetime
from typing import Dict, List, Tuple, Optional
from config import CH_CONFIG, BINS_CONFIG, BIVARIATE_COMBINATIONS
from utils import ClickHouseConnector, ETLProgress

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class AdminBinsCalculator:
    """
    –ö–ª–∞—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins (–∫–≤–∞–Ω—Ç–∏–ª—ñ–≤) —Ç–∞ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π
    –ü—Ä–∞—Ü—é—î –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ ClickHouse –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    """
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ bins"""
        self.ch_conn = ClickHouseConnector(CH_CONFIG)
        self.start_time = datetime.now()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins (–∑ config.py)
        self.metrics_for_bins = BINS_CONFIG.get('metrics_for_bins', [
            'population_density',
            'economic_activity_index', 
            'competitor_density',
            'transport_accessibility_score'
        ])
        
        # Bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó (–∑ config.py)
        self.bivariate_pairs = BIVARIATE_COMBINATIONS or [
            ('population_density', 'economic_activity_index'),
            ('competitor_density', 'transport_accessibility_score'),
            ('poi_density', 'retail_potential_score'),
            ('residential_coverage', 'commercial_activity_score')
        ]
        
    def get_admin_levels(self) -> List[int]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö admin_level –∑ –ë–î
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä—ñ–≤–Ω—ñ–≤ –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å
        """
        with self.ch_conn.connect():
            result = self.ch_conn.client.execute("""
                SELECT DISTINCT admin_level 
                FROM geo_analytics.admin_analytics
                ORDER BY admin_level
            """)
            levels = [row[0] for row in result]
            logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(levels)} —Ä—ñ–≤–Ω—ñ–≤ –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å: {levels}")
            return levels
    
    def calculate_bins_for_metric(
        self, 
        metric: str, 
        admin_level: int, 
        num_bins: int = 3
    ) -> Dict[str, int]:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î bins –¥–ª—è –æ–¥–Ω—ñ—î—ó –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –ø–µ–≤–Ω–æ–º—É admin_level
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ClickHouse —Ñ—É–Ω–∫—Ü—ñ—é ntile –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É
        
        Args:
            metric: –ù–∞–∑–≤–∞ –º–µ—Ç—Ä–∏–∫–∏
            admin_level: –†—ñ–≤–µ–Ω—å –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—ñ
            num_bins: –ö—ñ–ª—å–∫—ñ—Å—Ç—å bins (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 3 –¥–ª—è terciles)
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ {admin_id: bin_value}
        """
        logger.info(f"  üìà –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ {num_bins} bins –¥–ª—è {metric} (level={admin_level})")
        
        with self.ch_conn.connect():
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ntile –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –Ω–∞ bins
            # –¢—ñ–ª—å–∫–∏ NULL –∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É—é—Ç—å bin=0, –Ω—É–ª—ñ - —Ü–µ –≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
            query = f"""
                SELECT 
                    admin_id,
                    CASE 
                        WHEN {metric} IS NULL THEN 0
                        ELSE ntile({num_bins}) OVER (
                            PARTITION BY admin_level 
                            ORDER BY {metric}
                        )
                    END as bin_value
                FROM geo_analytics.admin_analytics
                WHERE admin_level = {admin_level}
            """
            
            result = self.ch_conn.client.execute(query)
            bins_dict = {row[0]: row[1] for row in result}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
            distribution = {}
            for bin_val in bins_dict.values():
                distribution[bin_val] = distribution.get(bin_val, 0) + 1
            
            logger.info(f"    –†–æ–∑–ø–æ–¥—ñ–ª: {distribution}")
            return bins_dict
    
    def calculate_all_bins(self) -> Dict[Tuple[int, int], Dict[str, int]]:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î bins –¥–ª—è –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫ —Ç–∞ —Ä—ñ–≤–Ω—ñ–≤
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ {(admin_level, admin_id): {metric_bin: value, ...}}
        """
        logger.info("üî¢ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bins –¥–ª—è –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫...")
        all_bins = {}
        
        admin_levels = self.get_admin_levels()
        
        for level in admin_levels:
            logger.info(f"\nüèõÔ∏è –û–±—Ä–æ–±–∫–∞ —Ä—ñ–≤–Ω—è {level}:")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ admin_id –¥–ª—è —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è
            with self.ch_conn.connect():
                result = self.ch_conn.client.execute(f"""
                    SELECT admin_id 
                    FROM geo_analytics.admin_analytics
                    WHERE admin_level = {level}
                """)
                admin_ids = [row[0] for row in result]
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è bins
            for admin_id in admin_ids:
                all_bins[(level, admin_id)] = {}
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ bins –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–µ—Ç—Ä–∏–∫–∏
            for metric in self.metrics_for_bins:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –º–µ—Ç—Ä–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ
                if not self._check_metric_exists(metric):
                    logger.warning(f"  ‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∞ {metric} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
                    continue
                
                bins = self.calculate_bins_for_metric(metric, level, num_bins=3)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                for admin_id, bin_value in bins.items():
                    if (level, admin_id) in all_bins:
                        # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–æ–ª—è –¥–ª—è bin
                        bin_field = self._get_bin_field_name(metric)
                        all_bins[(level, admin_id)][bin_field] = bin_value
        
        return all_bins
    
    def _get_bin_field_name(self, metric: str) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –Ω–∞–∑–≤—É –ø–æ–ª—è –¥–ª—è bin –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        
        Args:
            metric: –ù–∞–∑–≤–∞ –º–µ—Ç—Ä–∏–∫–∏
            
        Returns:
            –ù–∞–∑–≤–∞ –ø–æ–ª—è –¥–ª—è bin
        """
        # –ú–∞–ø—ñ–Ω–≥ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –Ω–∞–∑–≤–∏ bin –ø–æ–ª—ñ–≤
        mapping = {
            'population_density': 'population_bin',
            'economic_activity_index': 'economic_bin',
            'competitor_density': 'competitor_bin',
            'transport_accessibility_score': 'accessibility_bin',
            'poi_density': 'infrastructure_bin',
            'retail_potential_score': 'retail_bin',
            'residential_coverage': 'residential_bin',
            'commercial_activity_score': 'commercial_bin'
        }
        return mapping.get(metric, f"{metric.replace('_', '')}_bin")
    
    def _check_metric_exists(self, metric: str) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ—Å–Ω—É—î –º–µ—Ç—Ä–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ
        
        Args:
            metric: –ù–∞–∑–≤–∞ –º–µ—Ç—Ä–∏–∫–∏
            
        Returns:
            True —è–∫—â–æ –º–µ—Ç—Ä–∏–∫–∞ —ñ—Å–Ω—É—î
        """
        with self.ch_conn.connect():
            columns = self.ch_conn.get_table_columns('geo_analytics.admin_analytics')
            return metric in columns
    
    def calculate_bivariate_combinations(
        self, 
        bins_data: Dict[Tuple[int, int], Dict[str, int]]
    ) -> Dict[Tuple[int, int], Dict[str, str]]:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ bins
        
        Args:
            bins_data: –°–ª–æ–≤–Ω–∏–∫ –∑ bins –¥–ª—è –∫–æ–∂–Ω–æ—ó –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—ñ
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è–º–∏
        """
        logger.info("\nüé® –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π...")
        bivariate_data = {}
        
        for (level, admin_id), bins in bins_data.items():
            bivariate_data[(level, admin_id)] = {}
            
            for metric1, metric2 in self.bivariate_pairs:
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ bin –ø–æ–ª—ñ–≤
                bin1_field = self._get_bin_field_name(metric1)
                bin2_field = self._get_bin_field_name(metric2)
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è bins (0 —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—î)
                bin1_value = bins.get(bin1_field, 0)
                bin2_value = bins.get(bin2_field, 0)
                
                # –§–æ—Ä–º—É—î–º–æ –∫–æ–¥ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó (—Ñ–æ—Ä–º–∞—Ç: "1-2")
                bivar_code = f"{bin1_value}-{bin2_value}"
                
                # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É bivariate –ø–æ–ª—è
                bivar_field = self._get_bivariate_field_name(metric1, metric2)
                bivariate_data[(level, admin_id)][bivar_field] = bivar_code
        
        return bivariate_data
    
    def _get_bivariate_field_name(self, metric1: str, metric2: str) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –Ω–∞–∑–≤—É –ø–æ–ª—è –¥–ª—è bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
        
        Args:
            metric1: –ü–µ—Ä—à–∞ –º–µ—Ç—Ä–∏–∫–∞
            metric2: –î—Ä—É–≥–∞ –º–µ—Ç—Ä–∏–∫–∞
            
        Returns:
            –ù–∞–∑–≤–∞ bivariate –ø–æ–ª—è
        """
        # –ú–∞–ø—ñ–Ω–≥ –ø–∞—Ä –º–µ—Ç—Ä–∏–∫ –Ω–∞ –Ω–∞–∑–≤–∏ bivariate –ø–æ–ª—ñ–≤
        mapping = {
            ('population_density', 'economic_activity_index'): 'bivar_pop_economic',
            ('competitor_density', 'transport_accessibility_score'): 'bivar_comp_infrastructure', 
            ('poi_density', 'retail_potential_score'): 'bivar_access_economic',
            ('residential_coverage', 'commercial_activity_score'): 'bivar_urban_competitor'
        }
        
        # –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤ –º–∞–ø—ñ–Ω–≥—É
        if (metric1, metric2) in mapping:
            return mapping[(metric1, metric2)]
        elif (metric2, metric1) in mapping:
            return mapping[(metric2, metric1)]
        else:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–∞–∑–≤—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
            m1_short = metric1.split('_')[0][:3]
            m2_short = metric2.split('_')[0][:3]
            return f"bivar_{m1_short}_{m2_short}"
    
    def update_clickhouse_records(
        self,
        bins_data: Dict[Tuple[int, int], Dict[str, int]],
        bivariate_data: Dict[Tuple[int, int], Dict[str, str]]
    ) -> int:
        """
        –û–Ω–æ–≤–ª—é—î –∑–∞–ø–∏—Å–∏ –≤ ClickHouse –∑ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–º–∏ bins —Ç–∞ bivariate
        
        Args:
            bins_data: –î–∞–Ω—ñ bins
            bivariate_data: –î–∞–Ω—ñ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π
            
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        """
        logger.info("\nüì§ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –≤ ClickHouse...")
        
        with self.ch_conn.connect():
            total_updated = 0
            progress = ETLProgress(len(bins_data), "–û–Ω–æ–≤–ª–µ–Ω–Ω—è bins")
            
            # –ì—Ä—É–ø—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ admin_level –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            updates_by_level = {}
            
            for (level, admin_id), bins in bins_data.items():
                if level not in updates_by_level:
                    updates_by_level[level] = []
                
                # –û–±'—î–¥–Ω—É—î–º–æ bins —Ç–∞ bivariate –¥–∞–Ω—ñ
                update_data = {**bins}
                if (level, admin_id) in bivariate_data:
                    update_data.update(bivariate_data[(level, admin_id)])
                
                update_data['admin_id'] = admin_id
                updates_by_level[level].append(update_data)
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
            for level, updates in updates_by_level.items():
                logger.info(f"  –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è {level}: {len(updates)} –∑–∞–ø–∏—Å—ñ–≤")
                
                if not updates:
                    continue
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                sample_update = updates[0]
                fields_to_update = [k for k in sample_update.keys() if k != 'admin_id']
                
                # –§–æ—Ä–º—É—î–º–æ SQL –¥–ª—è batch update
                for batch_start in range(0, len(updates), 100):
                    batch = updates[batch_start:batch_start + 100]
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ALTER TABLE UPDATE –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                    for field in fields_to_update:
                        if field.endswith('_bin') or field.startswith('bivar_'):
                            values_clause = []
                            for record in batch:
                                admin_id = record['admin_id']
                                value = record.get(field, 0) if field.endswith('_bin') else record.get(field, '')
                                
                                if isinstance(value, str):
                                    values_clause.append(f"admin_id = {admin_id} THEN '{value}'")
                                else:
                                    values_clause.append(f"admin_id = {admin_id} THEN {value}")
                            
                            if values_clause:
                                update_sql = f"""
                                    ALTER TABLE geo_analytics.admin_analytics
                                    UPDATE {field} = CASE
                                        WHEN {' WHEN '.join(values_clause)}
                                        ELSE {field}
                                    END
                                    WHERE admin_level = {level} 
                                        AND admin_id IN ({','.join(str(r['admin_id']) for r in batch)})
                                """
                                
                                try:
                                    self.ch_conn.client.execute(update_sql)
                                except Exception as e:
                                    logger.warning(f"    ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {field}: {str(e)[:100]}")
                    
                    total_updated += len(batch)
                    progress.update(len(batch))
            
            # –ü—Ä–∏–º—ñ—Ç–∫–∞: updated_at –Ω–µ –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏, –±–æ —Ü–µ –∫–ª—é—á–æ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞
            # –í ClickHouse –∫–ª—é—á–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ (ORDER BY) –Ω–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ UPDATE
            
            logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {total_updated} –∑–∞–ø–∏—Å—ñ–≤")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ bins –¥—ñ–π—Å–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ
            check_result = self.ch_conn.client.execute("""
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN population_bin > 0 THEN 1 ELSE 0 END) as with_bins
                FROM geo_analytics.admin_analytics
            """)
            
            if check_result:
                total, with_bins = check_result[0]
                logger.info(f"üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: {with_bins}/{total} –∑–∞–ø–∏—Å—ñ–≤ –º–∞—é—Ç—å bins")
            
            return total_updated
    
    def generate_statistics(self):
        """
        –ì–µ–Ω–µ—Ä—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É bins —Ç–∞ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π
        """
        logger.info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ bins —Ç–∞ bivariate —Ä–æ–∑–ø–æ–¥—ñ–ª—É:")
        
        with self.ch_conn.connect():
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ bins –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
            for level in self.get_admin_levels():
                logger.info(f"\nüèõÔ∏è –†—ñ–≤–µ–Ω—å {level}:")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–∂–Ω–æ–º—É bin
                for metric in ['population_bin', 'economic_bin', 'competitor_bin', 'accessibility_bin']:
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–ª–µ –¥–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
                    if metric == 'population_bin':
                        avg_field = 'population_density'
                    elif metric == 'economic_bin':
                        avg_field = 'economic_activity_index'
                    elif metric == 'competitor_bin':
                        avg_field = 'competitor_density'
                    elif metric == 'accessibility_bin':
                        avg_field = 'transport_accessibility_score'
                    else:
                        avg_field = 'NULL'
                    
                    result = self.ch_conn.client.execute(f"""
                        SELECT 
                            {metric} as bin_value,
                            COUNT(*) as count,
                            AVG({avg_field}) as avg_value
                        FROM geo_analytics.admin_analytics
                        WHERE admin_level = {level}
                        GROUP BY {metric}
                        ORDER BY {metric}
                    """)
                    
                    if result:
                        logger.info(f"  {metric}:")
                        for row in result:
                            bin_val, count, avg_val = row
                            label = ['–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ', '–ù–∏–∑—å–∫–∏–π', '–°–µ—Ä–µ–¥–Ω—ñ–π', '–í–∏—Å–æ–∫–∏–π'][bin_val] if bin_val <= 3 else f"Bin {bin_val}"
                            if avg_val:
                                logger.info(f"    {label} (bin={bin_val}): {count} –æ–¥., —Å–µ—Ä–µ–¥–Ω—î={avg_val:.2f}")
                            else:
                                logger.info(f"    {label} (bin={bin_val}): {count} –æ–¥.")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è–º
                logger.info(f"  Bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó:")
                result = self.ch_conn.client.execute(f"""
                    SELECT 
                        bivar_pop_economic,
                        COUNT(*) as count
                    FROM geo_analytics.admin_analytics
                    WHERE admin_level = {level}
                        AND bivar_pop_economic != ''
                    GROUP BY bivar_pop_economic
                    ORDER BY count DESC
                    LIMIT 10
                """)
                
                if result:
                    for row in result:
                        bivar_code, count = row
                        logger.info(f"    {bivar_code}: {count} –æ–¥.")
    
    def validate_results(self) -> bool:
        """
        –í–∞–ª—ñ–¥—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins
        
        Returns:
            True —è–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ
        """
        logger.info("\nüîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...")
        
        with self.ch_conn.connect():
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ bins
            result = self.ch_conn.client.execute("""
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN population_bin > 0 THEN 1 ELSE 0 END) as with_pop_bin,
                    SUM(CASE WHEN economic_bin > 0 THEN 1 ELSE 0 END) as with_econ_bin,
                    SUM(CASE WHEN bivar_pop_economic != '' THEN 1 ELSE 0 END) as with_bivar
                FROM geo_analytics.admin_analytics
            """)
            
            if result:
                total, with_pop, with_econ, with_bivar = result[0]
                logger.info(f"  –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total}")
                logger.info(f"  –ó population_bin: {with_pop} ({with_pop*100/total:.1f}%)")
                logger.info(f"  –ó economic_bin: {with_econ} ({with_econ*100/total:.1f}%)")
                logger.info(f"  –ó bivariate: {with_bivar} ({with_bivar*100/total:.1f}%)")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø–æ bins (–º–∞—î –±—É—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π)
                for bin_field in ['population_bin', 'economic_bin']:
                    result = self.ch_conn.client.execute(f"""
                        SELECT 
                            {bin_field},
                            COUNT(*) as cnt,
                            COUNT(*) * 100.0 / SUM(COUNT(*)) OVER() as percentage
                        FROM geo_analytics.admin_analytics
                        WHERE {bin_field} > 0
                        GROUP BY {bin_field}
                        ORDER BY {bin_field}
                    """)
                    
                    logger.info(f"\n  –†–æ–∑–ø–æ–¥—ñ–ª {bin_field}:")
                    for row in result:
                        bin_val, count, percentage = row
                        logger.info(f"    Bin {bin_val}: {count} ({percentage:.1f}%)")
                        
                        # –î–ª—è terciles –æ—á—ñ–∫—É—î–º–æ ~33% –≤ –∫–æ–∂–Ω–æ–º—É bin
                        if 20 < percentage < 45:
                            logger.info(f"      ‚úÖ –†–æ–∑–ø–æ–¥—ñ–ª –≤ –Ω–æ—Ä–º—ñ")
                        else:
                            logger.warning(f"      ‚ö†Ô∏è –ù–µ—Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª")
                
                return with_pop > 0 and with_econ > 0
            
            return False
    
    def run(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins
        
        Returns:
            True —è–∫—â–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ
        """
        try:
            logger.info("=" * 60)
            logger.info("üöÄ –ü–û–ß–ê–¢–û–ö: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bins —Ç–∞ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π")
            logger.info("=" * 60)
            
            # 1. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bins –¥–ª—è –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫
            bins_data = self.calculate_all_bins()
            
            if not bins_data:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ bins")
                return False
            
            logger.info(f"‚úÖ –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ bins –¥–ª—è {len(bins_data)} –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å")
            
            # 2. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π
            bivariate_data = self.calculate_bivariate_combinations(bins_data)
            logger.info(f"‚úÖ –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ bivariate –¥–ª—è {len(bivariate_data)} –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å")
            
            # 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –≤ ClickHouse
            updated = self.update_clickhouse_records(bins_data, bivariate_data)
            
            # 4. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.generate_statistics()
            
            # 5. –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            success = self.validate_results()
            
            # –ü—ñ–¥—Å—É–º–æ–∫
            elapsed = datetime.now() - self.start_time
            logger.info("\n" + "=" * 60)
            if success:
                logger.info(f"‚úÖ BINS –†–û–ó–†–ê–•–û–í–ê–ù–û –£–°–ü–Ü–®–ù–û")
                logger.info(f"‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {elapsed}")
                logger.info(f"üìä –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {updated}")
                logger.info(f"\nüéØ Bins –≥–æ—Ç–æ–≤—ñ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–∞ –∫–∞—Ä—Ç–∞—Ö!")
                logger.info("   –§–æ—Ä–º–∞—Ç bivariate: '0-0' –¥–æ '3-3' (4√ó4 –º–∞—Ç—Ä–∏—Ü—è)")
                logger.info("   0 = –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ, 1 = –Ω–∏–∑—å–∫–∏–π, 2 = —Å–µ—Ä–µ–¥–Ω—ñ–π, 3 = –≤–∏—Å–æ–∫–∏–π")
            else:
                logger.error(f"‚ùå –†–û–ó–†–ê–•–£–ù–û–ö –ó–ê–í–ï–†–®–ï–ù–û –ó –ü–û–ú–ò–õ–ö–ê–ú–ò")
            logger.info("=" * 60)
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    calculator = AdminBinsCalculator()
    success = calculator.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()