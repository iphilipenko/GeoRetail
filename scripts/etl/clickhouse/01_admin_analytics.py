"""
scripts/etl/clickhouse/01_admin_analytics.py
ETL –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å –∑ PostGIS –≤ ClickHouse
–í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø - –∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é None –∑–Ω–∞—á–µ–Ω—å
"""

import logging
import sys
from datetime import datetime
from typing import Dict, List, Any, Optional
import psycopg2
from psycopg2.extras import RealDictCursor
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from config import PG_CONFIG, CH_CONFIG, BATCH_SIZE
from utils import PostgresConnector, ClickHouseConnector, ETLProgress

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class AdminAnalyticsETL:
    """
    ETL –∫–ª–∞—Å –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
    –û–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ –∑ admin_boundaries —Ç–∞ –∞–≥—Ä–µ–≥—É—î –º–µ—Ç—Ä–∏–∫–∏
    """
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ETL –ø—Ä–æ—Ü–µ—Å—É"""
        self.pg_conn = PostgresConnector(PG_CONFIG)
        self.ch_conn = ClickHouseConnector(CH_CONFIG)
        self.start_time = datetime.now()
        self.records_processed = 0
        
    def extract_admin_units(self) -> List[Dict]:
        """
        –í–∏—Ç—è–≥—É—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ –∑ PostGIS
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏ –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å
        """
        logger.info("üì• –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å –∑ PostGIS...")
        
        query = """
        WITH admin_data AS (
            SELECT 
                -- –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
                ab.id as admin_id,
                ab.admin_level,
                ab.name as admin_name,
                ab.name_uk as admin_name_uk,
                ab.parent_id,
                ab.osm_id,
                
                -- –ë–∞–∑–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                COALESCE(ab.area_km2, ST_Area(ab.geometry::geography) / 1000000) as area_km2,
                ST_Perimeter(ab.geometry::geography) / 1000 as perimeter_km,
                
                -- –ì–µ–æ–º–µ—Ç—Ä—ñ—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
                ab.geometry
                
            FROM osm_ukraine.admin_boundaries ab
            WHERE ab.admin_level IN (4, 5, 6, 7, 8, 9)
        )
        SELECT * FROM admin_data
        ORDER BY admin_level, admin_id
        """
        
        with self.pg_conn.connect():
            results = self.pg_conn.execute_query(query)
            logger.info(f"‚úÖ –í–∏—Ç—è–≥–Ω—É—Ç–æ {len(results)} –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å")
            return results
    
    def enrich_with_h3_counts(self, admin_units: List[Dict]) -> List[Dict]:
        """
        –î–æ–¥–∞—î –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—ñ
        """
        logger.info("üî¢ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å...")
        
        with self.pg_conn.connect(autocommit=True):
            progress = ETLProgress(len(admin_units), "H3 –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫")
            
            for unit in admin_units:
                try:
                    h3_query = """
                    SELECT 
                        h3_resolution,
                        COUNT(*) as hex_count
                    FROM osm_ukraine.h3_admin_mapping
                    WHERE 
                        CASE %s
                            WHEN 4 THEN oblast_id = %s
                            WHEN 5 THEN raion_id = %s
                            WHEN 6 THEN gromada_id = %s
                            WHEN 7 THEN settlement_id = %s
                            WHEN 8 THEN settlement_id = %s
                            WHEN 9 THEN settlement_id = %s
                        END
                    GROUP BY h3_resolution
                    """
                    
                    self.pg_conn.cursor.execute(
                        h3_query,
                        (unit['admin_level'], unit['admin_id'], unit['admin_id'], 
                         unit['admin_id'], unit['admin_id'], unit['admin_id'], unit['admin_id'])
                    )
                    
                    h3_counts = self.pg_conn.cursor.fetchall()
                    
                    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω—É–ª—è–º–∏
                    unit['hex_count_r7'] = 0
                    unit['hex_count_r8'] = 0
                    unit['hex_count_r9'] = 0
                    unit['hex_count_r10'] = 0
                    
                    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
                    for row in h3_counts:
                        if row['h3_resolution'] == 7:
                            unit['hex_count_r7'] = row['hex_count']
                        elif row['h3_resolution'] == 8:
                            unit['hex_count_r8'] = row['hex_count']
                        elif row['h3_resolution'] == 9:
                            unit['hex_count_r9'] = row['hex_count']
                        elif row['h3_resolution'] == 10:
                            unit['hex_count_r10'] = row['hex_count']
                            
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ H3 –¥–ª—è {unit.get('admin_name', 'unknown')}: {str(e)[:100]}")
                    unit['hex_count_r7'] = 0
                    unit['hex_count_r8'] = 0
                    unit['hex_count_r9'] = 0
                    unit['hex_count_r10'] = 0
                
                progress.update(1)
        
        return admin_units
    
    def enrich_with_population(self, admin_units: List[Dict]) -> List[Dict]:
        """
        –î–æ–¥–∞—î —Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –∑ demographics.h3_population
        """
        logger.info("üë• –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å...")
        
        with self.pg_conn.connect(autocommit=True):
            progress = ETLProgress(len(admin_units), "–ù–∞—Å–µ–ª–µ–Ω–Ω—è")
            
            for unit in admin_units:
                try:
                    pop_query = """
                    SELECT 
                        SUM(hp.population) as total_population,
                        AVG(hp.population_density) as avg_density,
                        AVG(hp.population) as avg_population,
                        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY hp.population) as median_population,
                        STDDEV(hp.population) as std_population
                    FROM demographics.h3_population hp
                    JOIN osm_ukraine.h3_admin_mapping ham ON ham.h3_index = hp.hex_id
                    WHERE ham.h3_resolution = 8
                        AND CASE %s
                            WHEN 4 THEN ham.oblast_id = %s
                            WHEN 5 THEN ham.raion_id = %s
                            WHEN 6 THEN ham.gromada_id = %s
                            WHEN 7 THEN ham.settlement_id = %s
                            WHEN 8 THEN ham.settlement_id = %s
                            WHEN 9 THEN ham.settlement_id = %s
                        END
                    """
                    
                    self.pg_conn.cursor.execute(
                        pop_query,
                        (unit['admin_level'], unit['admin_id'], unit['admin_id'],
                         unit['admin_id'], unit['admin_id'], unit['admin_id'], unit['admin_id'])
                    )
                    
                    result = self.pg_conn.cursor.fetchone()
                    
                    if result and result['total_population']:
                        unit['population_estimated'] = float(result['total_population'])
                        unit['h3_population_avg'] = float(result['avg_population']) if result['avg_population'] else None
                        unit['h3_population_median'] = float(result['median_population']) if result['median_population'] else None
                        unit['h3_population_std'] = float(result['std_population']) if result['std_population'] else None
                        
                        if unit['area_km2'] and unit['area_km2'] > 0:
                            unit['population_density'] = unit['population_estimated'] / unit['area_km2']
                        elif result['avg_density']:
                            unit['population_density'] = float(result['avg_density'])
                        else:
                            unit['population_density'] = None
                    else:
                        unit['population_estimated'] = None
                        unit['population_density'] = None
                        unit['h3_population_avg'] = None
                        unit['h3_population_median'] = None
                        unit['h3_population_std'] = None
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –¥–ª—è {unit.get('admin_name', 'unknown')}: {str(e)[:100]}")
                    unit['population_estimated'] = None
                    unit['population_density'] = None
                    unit['h3_population_avg'] = None
                    unit['h3_population_median'] = None
                    unit['h3_population_std'] = None
                
                progress.update(1)
        
        return admin_units
    
    def enrich_with_poi_metrics(self, admin_units: List[Dict]) -> List[Dict]:
        """
        –î–æ–¥–∞—î –º–µ—Ç—Ä–∏–∫–∏ POI –¥–ª—è –∫–æ–∂–Ω–æ—ó –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—ñ
        –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î secondary_category –∑–∞–º—ñ—Å—Ç—å shop_type
        """
        logger.info("üìç –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ POI –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å...")
        
        with self.pg_conn.connect(autocommit=True):
            progress = ETLProgress(len(admin_units), "POI –º–µ—Ç—Ä–∏–∫–∏")
            
            for unit in admin_units:
                try:
                    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ secondary_category –∑–∞–º—ñ—Å—Ç—å shop_type
                    poi_query = """
                    SELECT 
                        COUNT(*) as poi_total,
                        COUNT(*) FILTER (WHERE functional_group = 'competitor') as competitors_total,
                        COUNT(*) FILTER (WHERE functional_group = 'competitor' AND secondary_category = 'supermarket') as comp_supermarket,
                        COUNT(*) FILTER (WHERE functional_group = 'competitor' AND secondary_category = 'convenience') as comp_convenience,
                        COUNT(*) FILTER (WHERE functional_group = 'competitor' AND secondary_category IN ('kiosk', 'variety_store')) as comp_minimarket,
                        COUNT(*) FILTER (WHERE primary_category = 'retail') as retail_count,
                        COUNT(*) FILTER (WHERE primary_category = 'food_service') as food_count,
                        COUNT(*) FILTER (WHERE primary_category IN ('amenity', 'healthcare')) as services_count,
                        COUNT(*) FILTER (WHERE primary_category = 'transport') as transport_count,
                        COUNT(*) FILTER (WHERE primary_category = 'education') as social_count,
                        COUNT(DISTINCT brand_normalized) FILTER (WHERE brand_normalized IS NOT NULL) as unique_brands
                    FROM osm_ukraine.poi_processed pp
                    WHERE ST_Contains(
                        (SELECT geometry FROM osm_ukraine.admin_boundaries WHERE id = %s),
                        pp.geom
                    )
                    """
                    
                    self.pg_conn.cursor.execute(poi_query, (unit['admin_id'],))
                    poi_stats = self.pg_conn.cursor.fetchone()
                    
                    if poi_stats:
                        # –û—Å–Ω–æ–≤–Ω—ñ POI –º–µ—Ç—Ä–∏–∫–∏
                        unit['poi_total_count'] = poi_stats['poi_total'] or 0
                        unit['competitors_total'] = poi_stats['competitors_total'] or 0
                        unit['competitors_supermarket'] = poi_stats['comp_supermarket'] or 0
                        unit['competitors_convenience'] = poi_stats['comp_convenience'] or 0
                        unit['competitors_minimarket'] = poi_stats['comp_minimarket'] or 0
                        
                        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó POI
                        unit['retail_count'] = poi_stats['retail_count'] or 0
                        unit['food_count'] = poi_stats['food_count'] or 0
                        unit['services_count'] = poi_stats['services_count'] or 0
                        unit['transport_count'] = poi_stats['transport_count'] or 0
                        unit['poi_retail_count'] = poi_stats['retail_count'] or 0
                        unit['poi_service_count'] = poi_stats['services_count'] or 0
                        unit['poi_social_count'] = poi_stats['social_count'] or 0
                        unit['poi_food_count'] = poi_stats['food_count'] or 0
                        unit['unique_brands_count'] = poi_stats['unique_brands'] or 0
                        
                        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —â—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ —ñ–Ω–¥–µ–∫—Å–∏
                        if unit['area_km2'] and unit['area_km2'] > 0:
                            unit['poi_density'] = unit['poi_total_count'] / unit['area_km2']
                            unit['competitor_density'] = unit['competitors_total'] / unit['area_km2']
                            unit['competitor_coverage'] = min(1.0, unit['competitor_density'] / 5)
                            
                            # –Ü–Ω–¥–µ–∫—Å —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ POI
                            categories = [unit['retail_count'], unit['food_count'], 
                                        unit['services_count'], unit['transport_count']]
                            total = sum(categories)
                            if total > 0:
                                diversity = 0
                                for cat in categories:
                                    if cat > 0:
                                        p = cat / total
                                        diversity -= p * (p if p > 0 else 0)
                                unit['poi_diversity_index'] = diversity
                            else:
                                unit['poi_diversity_index'] = 0
                            
                            unit['poi_retail_ratio'] = unit['retail_count'] / unit['poi_total_count'] if unit['poi_total_count'] > 0 else 0
                        else:
                            unit['poi_density'] = 0
                            unit['competitor_density'] = 0
                            unit['competitor_coverage'] = 0
                            unit['poi_diversity_index'] = 0
                            unit['poi_retail_ratio'] = 0
                    else:
                        self._set_default_poi_metrics(unit)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ POI –¥–ª—è {unit.get('admin_name', 'unknown')}: {str(e)[:100]}")
                    self._set_default_poi_metrics(unit)
                
                progress.update(1)
        
        return admin_units
    
    def _set_default_poi_metrics(self, unit: Dict):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è POI –º–µ—Ç—Ä–∏–∫"""
        poi_fields = [
            'poi_total_count', 'competitors_total', 'competitors_supermarket',
            'competitors_convenience', 'competitors_minimarket', 'retail_count',
            'food_count', 'services_count', 'transport_count', 'poi_retail_count',
            'poi_service_count', 'poi_social_count', 'poi_food_count',
            'unique_brands_count'
        ]
        for field in poi_fields:
            unit[field] = 0
        
        density_fields = [
            'poi_density', 'competitor_density', 'competitor_coverage',
            'poi_diversity_index', 'poi_retail_ratio'
        ]
        for field in density_fields:
            unit[field] = 0.0
    
    def enrich_with_economic_metrics(self, admin_units: List[Dict]) -> List[Dict]:
        """
        –î–æ–¥–∞—î –µ–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ rbc_h3_data
        –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–æ–ª—è avg_check_per_client –∑–∞–º—ñ—Å—Ç—å avg_check_p50
        """
        logger.info("üí∞ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫...")
        
        progress = ETLProgress(len(admin_units), "–ï–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏")
        success_count = 0
        error_count = 0
        
        for unit in admin_units:
            try:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
                conn = psycopg2.connect(
                    host=PG_CONFIG['host'],
                    port=PG_CONFIG['port'],
                    database=PG_CONFIG['database'],
                    user=PG_CONFIG['user'],
                    password=PG_CONFIG['password']
                )
                conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
                cursor = conn.cursor(cursor_factory=RealDictCursor)
                
                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ avg_check_per_client –∞–±–æ —Å–µ—Ä–µ–¥–Ω—î p25 —Ç–∞ p75
                econ_query = """
                SELECT 
                    COUNT(DISTINCT rbc.h3_index) as h3_with_transactions,
                    SUM(rbc.cnt_transaction) as total_transactions,
                    AVG(rbc.avg_check_per_client) as avg_check,
                    AVG((rbc.avg_check_p25 + rbc.avg_check_p75) / 2) as avg_check_median,
                    SUM(rbc.total_sum) as total_sum
                FROM osm_ukraine.rbc_h3_data rbc
                JOIN osm_ukraine.h3_admin_mapping ham ON ham.h3_index = rbc.h3_index
                WHERE ham.h3_resolution = 8
                    AND CASE %s
                        WHEN 4 THEN ham.oblast_id = %s
                        WHEN 5 THEN ham.raion_id = %s
                        WHEN 6 THEN ham.gromada_id = %s
                        WHEN 7 THEN ham.settlement_id = %s
                        WHEN 8 THEN ham.settlement_id = %s
                        WHEN 9 THEN ham.settlement_id = %s
                    END
                """
                
                cursor.execute(
                    econ_query,
                    (unit['admin_level'], unit['admin_id'], unit['admin_id'],
                     unit['admin_id'], unit['admin_id'], unit['admin_id'], unit['admin_id'])
                )
                
                result = cursor.fetchone()
                
                if result and result['total_transactions']:
                    # –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π–Ω–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å
                    if unit['area_km2'] and unit['area_km2'] > 0:
                        unit['mcc_transaction_density'] = float(result['total_transactions']) / unit['area_km2']
                    else:
                        unit['mcc_transaction_density'] = None
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ avg_check_per_client —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫
                    unit['mcc_avg_transaction_value'] = float(result['avg_check']) if result['avg_check'] else None
                    
                    # –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å
                    if result['total_sum'] and unit.get('population_estimated') and unit['population_estimated'] > 0:
                        income_per_capita = float(result['total_sum']) / unit['population_estimated']
                        unit['economic_activity_index'] = min(1.0, income_per_capita / 100000)
                    else:
                        unit['economic_activity_index'] = None
                    
                    success_count += 1
                else:
                    unit['mcc_transaction_density'] = None
                    unit['mcc_avg_transaction_value'] = None
                    unit['economic_activity_index'] = None
                
                # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
                cursor.close()
                conn.close()
                
            except Exception as e:
                error_count += 1
                if error_count <= 10:  # –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10 –ø–æ–º–∏–ª–æ–∫
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –µ–∫–æ–Ω–æ–º—ñ–∫–∏ –¥–ª—è {unit.get('admin_name', 'unknown')}: {str(e)[:100]}")
                
                unit['mcc_transaction_density'] = None
                unit['mcc_avg_transaction_value'] = None
                unit['economic_activity_index'] = None
                
                # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–µ
                try:
                    if 'cursor' in locals():
                        cursor.close()
                    if 'conn' in locals():
                        conn.close()
                except:
                    pass
            
            progress.update(1)
        
        if error_count > 0:
            logger.warning(f"‚ö†Ô∏è –í—Å—å–æ–≥–æ {error_count} –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫")
            logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –µ–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {success_count} –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å")
        else:
            logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –µ–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö {success_count} –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å")
        
        return admin_units
    
    def transform_for_clickhouse(self, admin_units: List[Dict]) -> List[Dict]:
        """
        –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç –¥–ª—è ClickHouse
        –î–æ–¥–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ (87 –ø–æ–ª—ñ–≤)
        –í–ò–ü–†–ê–í–õ–ï–ù–û: –∫–æ—Ä–µ–∫—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ None –∑–Ω–∞—á–µ–Ω—å –ø—Ä–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è—Ö
        """
        logger.info("üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è ClickHouse...")
        
        transformed = []
        current_date = datetime.now()
        
        for unit in admin_units:
            # –ö–æ–ø—ñ—é—î–º–æ —Ç–∞ –æ—á–∏—â–∞—î–º–æ
            unit_copy = unit.copy()
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ª–µ geometry
            if 'geometry' in unit_copy:
                del unit_copy['geometry']
            
            # === –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ ===
            
            # –ù–∞—Å–µ–ª–µ–Ω–Ω—è —Ç–∞ –±—É–¥—ñ–≤–ª—ñ
            unit_copy.setdefault('residential_coverage', 0.0)
            unit_copy.setdefault('residential_buildings_count', 0)
            unit_copy.setdefault('avg_building_floors', None)
            
            # –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –¥–∞–Ω—ñ
            unit_copy.setdefault('bank_terminals_count', None)
            unit_copy.setdefault('bank_branches_count', None)
            unit_copy.setdefault('mcc_top_category', None)
            unit_copy.setdefault('last_mcc_update', None)
            
            # –î–æ—Ä–æ–∂–Ω—è —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            unit_copy.setdefault('road_density_km_per_km2', 0.0)
            unit_copy.setdefault('road_primary_km', 0.0)
            unit_copy.setdefault('road_secondary_km', 0.0)
            unit_copy.setdefault('public_transport_stops', 0)
            unit_copy.setdefault('railway_stations', 0)
            
            # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ (–í–ò–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å)
            poi_density = unit_copy.get('poi_density')
            if poi_density is not None and poi_density > 0:
                connectivity = min(1.0, poi_density / 10)
            else:
                connectivity = 0.0
            unit_copy['connectivity_index'] = connectivity
            
            transport_count = unit_copy.get('transport_count')
            area_km2 = unit_copy.get('area_km2')
            transport_score = 0.0
            if transport_count is not None and transport_count > 0 and area_km2 is not None and area_km2 > 0:
                transport_density = transport_count / area_km2
                transport_score = min(1.0, transport_density / 5)
            unit_copy['transport_accessibility_score'] = transport_score
            
            # –ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–í–ò–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å)
            retail_count = unit_copy.get('retail_count')
            commercial_score = 0.0
            if retail_count is not None and retail_count > 0 and area_km2 is not None and area_km2 > 0:
                retail_density = retail_count / area_km2
                commercial_score = min(1.0, retail_density / 10)
            unit_copy['commercial_activity_score'] = commercial_score
            
            # –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –¥–ª—è —Ä–∏—Ç–µ–π–ª—É (–í–ò–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
            factors = []
            pop_density = unit_copy.get('population_density')
            if pop_density is not None:
                factors.append(min(1.0, pop_density / 1000))
            
            economic_index = unit_copy.get('economic_activity_index')
            if economic_index is not None:
                factors.append(economic_index)
            
            if transport_score > 0:
                factors.append(transport_score)
            
            unit_copy['retail_potential_score'] = sum(factors) / len(factors) if factors else 0.0
            
            # H3 –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
            unit_copy.setdefault('h3_competitor_avg', None)
            unit_copy.setdefault('h3_poi_avg', None)
            unit_copy.setdefault('h3_income_avg', None)
            unit_copy.setdefault('h3_income_median', None)
            
            # –¢—É—Ä–∏—Å—Ç–∏—á–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏
            unit_copy.setdefault('tourist_index', None)
            unit_copy.setdefault('agricultural_index', None)
            unit_copy.setdefault('tourist_zone_type', None)
            unit_copy.setdefault('tourist_attractions_count', None)
            unit_copy.setdefault('hotels_count', None)
            unit_copy.setdefault('seasonal_factor', None)
            
            # –†–∏–Ω–∫–æ–≤–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è
            unit_copy.setdefault('market_concentration_hhi', None)
            unit_copy.setdefault('dominant_chain', None)
            
            # –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            unit_copy.setdefault('distance_to_regional_center', 0.0)
            unit_copy.setdefault('border_distance_km', None)
            unit_copy.setdefault('industrial_specialization', None)
            unit_copy.setdefault('regional_center_type', None)
            
            # –£—Ä–±–∞–Ω—ñ–∑–∞—Ü—ñ—è (–í–ò–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–ø–µ—á–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è)
            pop_density = unit_copy.get('population_density')
            if pop_density is not None and pop_density > 100:
                urbanization = 'urban'
            else:
                urbanization = 'rural'
            unit_copy['urbanization_level'] = urbanization
            
            # Bins (–∑–∞–≥–ª—É—à–∫–∏ - –±—É–¥—É—Ç—å —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—ñ)
            unit_copy.setdefault('population_bin', 0)
            unit_copy.setdefault('population_quintile', 0)
            unit_copy.setdefault('economic_bin', 0)
            unit_copy.setdefault('economic_quintile', 0)
            unit_copy.setdefault('competitor_bin', 0)
            unit_copy.setdefault('infrastructure_bin', 0)
            unit_copy.setdefault('accessibility_bin', 0)
            
            # Bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó (–∑–∞–≥–ª—É—à–∫–∏)
            unit_copy.setdefault('bivar_pop_economic', '')
            unit_copy.setdefault('bivar_access_economic', '')
            unit_copy.setdefault('bivar_urban_competitor', '')
            unit_copy.setdefault('bivar_comp_infrastructure', '')
            
            # –ú–µ—Ç–∞–¥–∞–Ω—ñ
            unit_copy['data_completeness'] = self._calculate_completeness(unit_copy)
            unit_copy['last_osm_update'] = current_date.date()
            unit_copy['calculated_at'] = current_date
            unit_copy['updated_at'] = current_date
            
            transformed.append(unit_copy)
        
        return transformed
    
    def _calculate_completeness(self, unit: Dict) -> float:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø–æ–≤–Ω–æ—Ç–∏ –¥–∞–Ω–∏—Ö
        –í–ò–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ None —ñ 0
        """
        important_fields = [
            'population_estimated', 'poi_total_count', 'competitors_total',
            'economic_activity_index', 'transport_count'
        ]
        
        filled = 0
        for field in important_fields:
            value = unit.get(field)
            if value is not None and value != 0:
                filled += 1
        
        return filled / len(important_fields)
    
    def load_to_clickhouse(self, data: List[Dict]) -> int:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –≤ ClickHouse
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ñ—ñ–ª—å—Ç—Ä—É—î –ø–æ–ª—è, —è–∫—ñ —ñ—Å–Ω—É—é—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—ñ
        """
        logger.info("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ ClickHouse...")
        
        if not data:
            logger.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
            return 0
        
        with self.ch_conn.connect():
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –∑ —Ç–∞–±–ª–∏—Ü—ñ
            existing_columns = self.ch_conn.get_table_columns('geo_analytics.admin_analytics')
            
            if not existing_columns:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ")
                return 0
            
            logger.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(existing_columns)} –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
            
            # –û—á–∏—â–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
            self.ch_conn.client.execute("TRUNCATE TABLE geo_analytics.admin_analytics")
            logger.info("üóëÔ∏è –¢–∞–±–ª–∏—Ü—è admin_analytics –æ—á–∏—â–µ–Ω–∞")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞—Ç—á–∞–º–∏
            batch_size = BATCH_SIZE
            total_loaded = 0
            progress = ETLProgress(len(data), "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ ClickHouse")
            
            for i in range(0, len(data), batch_size):
                batch = data[i:i + batch_size]
                
                # insert_data –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ñ—ñ–ª—å—Ç—Ä—É—î –∫–æ–ª–æ–Ω–∫–∏
                loaded = self.ch_conn.insert_data(
                    'geo_analytics.admin_analytics',
                    batch,
                    existing_columns
                )
                total_loaded += loaded
                progress.update(len(batch))
            
            logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_loaded} –∑–∞–ø–∏—Å—ñ–≤ –≤ ClickHouse")
            return total_loaded
    
    def verify_migration(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –º—ñ–≥—Ä–∞—Ü—ñ—ó
        """
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º—ñ–≥—Ä–∞—Ü—ñ—ó...")
        
        with self.ch_conn.connect():
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤
            result = self.ch_conn.client.execute(
                "SELECT COUNT(*) as cnt FROM geo_analytics.admin_analytics"
            )
            ch_count = result[0][0]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ —Ä—ñ–≤–Ω—è—Ö
            level_stats = self.ch_conn.client.execute("""
                SELECT 
                    admin_level,
                    COUNT(*) as cnt,
                    AVG(population_density) as avg_pop_density,
                    AVG(poi_density) as avg_poi_density,
                    AVG(economic_activity_index) as avg_economic,
                    AVG(competitor_density) as avg_competitor,
                    SUM(CASE WHEN economic_activity_index IS NOT NULL THEN 1 ELSE 0 END) as with_economics
                FROM geo_analytics.admin_analytics
                GROUP BY admin_level
                ORDER BY admin_level
            """)
            
            logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:")
            logger.info(f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {ch_count:,}")
            logger.info(f"\n–ü–æ —Ä—ñ–≤–Ω—è—Ö:")
            
            level_names = {
                4: "–û–±–ª–∞—Å—Ç—ñ",
                5: "–†–∞–π–æ–Ω–∏", 
                6: "–ì—Ä–æ–º–∞–¥–∏",
                7: "–ú—ñ—Å—Ç–∞ –æ–±–ª–∞—Å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è",
                8: "–ú—ñ—Å—Ç–∞ —Ä–∞–π–æ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è",
                9: "–°–µ–ª–∞ —Ç–∞ —Å–µ–ª–∏—â–∞"
            }
            
            total_with_economics = 0
            for row in level_stats:
                level, count, avg_pop, avg_poi, avg_econ, avg_comp, with_econ = row
                name = level_names.get(level, f"–†—ñ–≤–µ–Ω—å {level}")
                total_with_economics += with_econ
                
                logger.info(f"\n  {name}: {count:,} –æ–¥.")
                
                if avg_pop:
                    logger.info(f"    - –©—ñ–ª—å–Ω—ñ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—è: {avg_pop:.1f} —á–æ–ª/–∫–º¬≤")
                if avg_poi:
                    logger.info(f"    - –©—ñ–ª—å–Ω—ñ—Å—Ç—å POI: {avg_poi:.1f}/–∫–º¬≤")
                if avg_comp:
                    logger.info(f"    - –©—ñ–ª—å–Ω—ñ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤: {avg_comp:.2f}/–∫–º¬≤")
                if avg_econ:
                    logger.info(f"    - –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å: {avg_econ:.3f}")
                logger.info(f"    - –ó –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏: {with_econ}/{count} ({with_econ*100/count:.1f}%)")
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            logger.info(f"\nüìà –ï–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –¥–ª—è {total_with_economics}/{ch_count} "
                       f"({total_with_economics*100/ch_count:.1f}%) –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å")
            
            if total_with_economics < ch_count:
                missing = ch_count - total_with_economics
                logger.warning(f"‚ö†Ô∏è {missing} –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å –±–µ–∑ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            
            # –¢–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤
            top_competitors = self.ch_conn.client.execute("""
                SELECT 
                    admin_name,
                    admin_level,
                    competitors_total,
                    competitors_supermarket,
                    competitors_convenience
                FROM geo_analytics.admin_analytics
                WHERE competitors_total > 0
                ORDER BY competitors_total DESC
                LIMIT 5
            """)
            
            logger.info(f"\nüè™ –¢–û–ü-5 –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤:")
            for row in top_competitors:
                name, level, total, supermarket, convenience = row
                logger.info(f"  - {name}: {total} (—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∏: {supermarket}, convenience: {convenience})")
            
            return ch_count > 0
    
    def run(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π ETL –ø—Ä–æ—Ü–µ—Å
        """
        try:
            logger.info("=" * 60)
            logger.info("üöÄ –ü–û–ß–ê–¢–û–ö ETL: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ ‚Üí ClickHouse")
            logger.info("=" * 60)
            
            # 1. –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è
            admin_units = self.extract_admin_units()
            
            if not admin_units:
                logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
                return False
            
            # 2. –ó–±–∞–≥–∞—á–µ–Ω–Ω—è –¥–∞–Ω–∏–º–∏
            admin_units = self.enrich_with_h3_counts(admin_units)
            admin_units = self.enrich_with_population(admin_units)
            admin_units = self.enrich_with_poi_metrics(admin_units)
            admin_units = self.enrich_with_economic_metrics(admin_units)
            
            # 3. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è
            transformed = self.transform_for_clickhouse(admin_units)
            
            # 4. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            loaded = self.load_to_clickhouse(transformed)
            
            # 5. –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
            success = self.verify_migration()
            
            # –ü—ñ–¥—Å—É–º–æ–∫
            elapsed = datetime.now() - self.start_time
            logger.info("\n" + "=" * 60)
            if success:
                logger.info(f"‚úÖ ETL –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û")
                logger.info(f"‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {elapsed}")
                logger.info(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {loaded:,}")
                logger.info(f"\nüéØ –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: —Ä–æ–∑—Ä–æ–±–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ 02_admin_bins.py –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins")
            else:
                logger.error(f"‚ùå ETL –ó–ê–í–ï–†–®–ï–ù–û –ó –ü–û–ú–ò–õ–ö–ê–ú–ò")
            logger.info("=" * 60)
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ETL: {e}")
            import traceback
            traceback.print_exc()
            return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    etl = AdminAnalyticsETL()
    success = etl.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()