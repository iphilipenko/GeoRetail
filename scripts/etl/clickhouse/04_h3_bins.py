"""
scripts/etl/clickhouse/03_h3_bins.py
–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bins (terciles) —Ç–∞ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –¥–ª—è H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –º—ñ–ª—å–π–æ–Ω—ñ–≤ –∑–∞–ø–∏—Å—ñ–≤
"""

import logging
import sys
from datetime import datetime
from typing import Dict, List, Tuple, Optional
from config import CH_CONFIG, BINS_CONFIG
from utils import ClickHouseConnector, ETLProgress

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class H3BinsCalculator:
    """
    –ö–ª–∞—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins –¥–ª—è H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
    –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –æ–±'—î–º—ñ–≤ –¥–∞–Ω–∏—Ö (8M+ –∑–∞–ø–∏—Å—ñ–≤)
    """
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ H3 bins"""
        self.ch_conn = ClickHouseConnector(CH_CONFIG)
        self.start_time = datetime.now()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins (–æ—Å–Ω–æ–≤–Ω—ñ 8 –º–µ—Ç—Ä–∏–∫ –∑ h3_analytics)
        self.h3_metrics_for_bins = [
            'population_density',      # –©—ñ–ª—å–Ω—ñ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—è
            'income_index',            # –Ü–Ω–¥–µ–∫—Å –¥–æ—Ö–æ–¥—ñ–≤
            'competitor_intensity',    # –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó
            'poi_density',            # –©—ñ–ª—å–Ω—ñ—Å—Ç—å POI
            'accessibility_score',     # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
            'traffic_index',          # –¢—Ä–∞—Ñ—ñ–∫ —ñ–Ω–¥–µ–∫—Å
            'retail_potential',       # –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –¥–ª—è —Ä–∏—Ç–µ–π–ª—É
            'risk_score'              # –†–∏–∑–∏–∫ score
        ]
        
        # Bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è H3
        self.h3_bivariate_pairs = [
            ('population_density', 'income_index'),           # –ù–∞—Å–µ–ª–µ–Ω–Ω—è √ó –î–æ—Ö–æ–¥–∏
            ('competitor_intensity', 'accessibility_score'),  # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è √ó –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
            ('poi_density', 'retail_potential'),             # –Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ √ó –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª
            ('traffic_index', 'risk_score')                  # –¢—Ä–∞—Ñ—ñ–∫ √ó –†–∏–∑–∏–∫
        ]
        
        # –ë–∞—Ç—á —Ä–æ–∑–º—ñ—Ä –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–±—ñ–ª—å—à–∏–π –¥–ª—è H3)
        self.batch_size = 10000
    
    def get_h3_resolutions(self) -> List[int]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ä–µ–∑–æ–ª—é—Ü—ñ–π H3 –∑ –ë–î
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑–æ–ª—é—Ü—ñ–π (7, 8, 9, 10)
        """
        with self.ch_conn.connect():
            result = self.ch_conn.client.execute("""
                SELECT DISTINCT resolution 
                FROM geo_analytics.h3_analytics
                ORDER BY resolution
            """)
            resolutions = [row[0] for row in result]
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
            for res in resolutions:
                count_result = self.ch_conn.client.execute(f"""
                    SELECT COUNT(*) 
                    FROM geo_analytics.h3_analytics 
                    WHERE resolution = {res}
                """)
                count = count_result[0][0] if count_result else 0
                logger.info(f"üìä –†–µ–∑–æ–ª—é—Ü—ñ—è {res}: {count:,} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
            
            return resolutions
    
    def check_table_exists(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è h3_analytics
        
        Returns:
            True —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—è —ñ—Å–Ω—É—î
        """
        with self.ch_conn.connect():
            result = self.ch_conn.client.execute("""
                SELECT COUNT(*) 
                FROM system.tables 
                WHERE database = 'geo_analytics' 
                    AND name = 'h3_analytics'
            """)
            exists = result[0][0] > 0 if result else False
            
            if exists:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
                count_result = self.ch_conn.client.execute("""
                    SELECT COUNT(*) FROM geo_analytics.h3_analytics
                """)
                count = count_result[0][0] if count_result else 0
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü—è h3_analytics —ñ—Å–Ω—É—î –∑ {count:,} –∑–∞–ø–∏—Å–∞–º–∏")
            else:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è h3_analytics –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            
            return exists
    
    def calculate_bins_for_h3_metric(
        self, 
        metric: str, 
        resolution: int,
        num_bins: int = 3
    ) -> None:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –æ–¥—Ä–∞–∑—É –æ–Ω–æ–≤–ª—é—î bins –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –ø–µ–≤–Ω—ñ–π —Ä–µ–∑–æ–ª—é—Ü—ñ—ó
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ALTER TABLE UPDATE –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        
        Args:
            metric: –ù–∞–∑–≤–∞ –º–µ—Ç—Ä–∏–∫–∏
            resolution: –†–µ–∑–æ–ª—é—Ü—ñ—è H3 (7-10)
            num_bins: –ö—ñ–ª—å–∫—ñ—Å—Ç—å bins (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 3)
        """
        logger.info(f"  üìà –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {num_bins} bins –¥–ª—è {metric} (res={resolution})")
        
        with self.ch_conn.connect():
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–∑–≤—É bin –ø–æ–ª—è
            bin_field = self._get_h3_bin_field_name(metric)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ø–æ–ª–µ bin –≤ —Ç–∞–±–ª–∏—Ü—ñ
            columns = self.ch_conn.get_table_columns('geo_analytics.h3_analytics')
            if bin_field not in columns:
                logger.warning(f"    ‚ö†Ô∏è –ü–æ–ª–µ {bin_field} –Ω–µ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–≤–∞–Ω—Ç–∏–ª—ñ –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –Ω–∞ bins
            quantiles_query = f"""
                SELECT 
                    quantileExact(0.333)({metric}) as q1,
                    quantileExact(0.667)({metric}) as q2
                FROM geo_analytics.h3_analytics
                WHERE resolution = {resolution}
                    AND {metric} IS NOT NULL
            """
            
            result = self.ch_conn.client.execute(quantiles_query)
            if not result or not result[0][0]:
                logger.warning(f"    ‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {metric} –Ω–∞ —Ä–µ–∑–æ–ª—é—Ü—ñ—ó {resolution}")
                return
            
            q1, q2 = result[0]
            logger.info(f"    –ö–≤–∞–Ω—Ç–∏–ª—ñ: Q33={q1:.4f}, Q67={q2:.4f}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ bins —á–µ—Ä–µ–∑ ALTER TABLE UPDATE
            # –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –≤ 0 (–≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ)
            self.ch_conn.client.execute(f"""
                ALTER TABLE geo_analytics.h3_analytics
                UPDATE {bin_field} = 0
                WHERE resolution = {resolution}
            """)
            
            # –ü–æ—Ç—ñ–º –ø—Ä–∏—Å–≤–æ—é—î–º–æ bins –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–≤–∞–Ω—Ç–∏–ª—ñ–≤
            # Bin 1 - –Ω–∏–∑—å–∫–∏–π (–¥–æ 33 –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è)
            self.ch_conn.client.execute(f"""
                ALTER TABLE geo_analytics.h3_analytics
                UPDATE {bin_field} = 1
                WHERE resolution = {resolution}
                    AND {metric} IS NOT NULL
                    AND {metric} <= {q1}
            """)
            
            # Bin 2 - —Å–µ—Ä–µ–¥–Ω—ñ–π (33-67 –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å)
            self.ch_conn.client.execute(f"""
                ALTER TABLE geo_analytics.h3_analytics
                UPDATE {bin_field} = 2
                WHERE resolution = {resolution}
                    AND {metric} > {q1}
                    AND {metric} <= {q2}
            """)
            
            # Bin 3 - –≤–∏—Å–æ–∫–∏–π (–≤–∏—â–µ 67 –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è)
            self.ch_conn.client.execute(f"""
                ALTER TABLE geo_analytics.h3_analytics
                UPDATE {bin_field} = 3
                WHERE resolution = {resolution}
                    AND {metric} > {q2}
            """)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
            distribution = self.ch_conn.client.execute(f"""
                SELECT 
                    {bin_field} as bin_value,
                    COUNT(*) as count
                FROM geo_analytics.h3_analytics
                WHERE resolution = {resolution}
                GROUP BY {bin_field}
                ORDER BY {bin_field}
            """)
            
            if distribution:
                dist_str = ", ".join([f"Bin {row[0]}={row[1]:,}" for row in distribution])
                logger.info(f"    –†–æ–∑–ø–æ–¥—ñ–ª: {dist_str}")
    
    def _get_h3_bin_field_name(self, metric: str) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –Ω–∞–∑–≤—É –ø–æ–ª—è –¥–ª—è bin –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        
        Args:
            metric: –ù–∞–∑–≤–∞ –º–µ—Ç—Ä–∏–∫–∏
            
        Returns:
            –ù–∞–∑–≤–∞ –ø–æ–ª—è –¥–ª—è bin
        """
        # –î–ª—è H3 –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç—ñ –Ω–∞–∑–≤–∏ bins
        if metric == 'population_density':
            return 'population_bin'
        elif metric == 'income_index':
            return 'income_bin'
        elif metric == 'competitor_intensity':
            return 'competitor_bin'
        else:
            # –î–ª—è —ñ–Ω—à–∏—Ö –º–µ—Ç—Ä–∏–∫ bins –º–æ–∂—É—Ç—å –Ω–µ —ñ—Å–Ω—É–≤–∞—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ
            return f"{metric.replace('_', '')}_bin"
    
    def calculate_all_h3_bins(self):
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î bins –¥–ª—è –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫ —Ç–∞ —Ä–µ–∑–æ–ª—é—Ü—ñ–π H3
        """
        logger.info("üî¢ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bins –¥–ª—è H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤...")
        
        resolutions = self.get_h3_resolutions()
        
        if not resolutions:
            logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö H3 –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
            return
        
        total_metrics = len(self.h3_metrics_for_bins) * len(resolutions)
        processed = 0
        
        for resolution in resolutions:
            logger.info(f"\nüó∫Ô∏è –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑–æ–ª—é—Ü—ñ—ó {resolution}:")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ 3 –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è bins
            # (population_bin, income_bin, competitor_bin —ñ—Å–Ω—É—é—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—ñ)
            main_metrics = ['population_density', 'income_index', 'competitor_intensity']
            
            for metric in main_metrics:
                try:
                    self.calculate_bins_for_h3_metric(metric, resolution)
                    processed += 1
                except Exception as e:
                    logger.error(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {metric}: {str(e)[:100]}")
            
            # –ü—Ä–æ–≥—Ä–µ—Å
            logger.info(f"  –ü—Ä–æ–≥—Ä–µ—Å: {processed}/{len(main_metrics) * len(resolutions)} –º–µ—Ç—Ä–∏–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
    
    def update_h3_bivariate(self):
        """
        –§–æ—Ä–º—É—î bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è H3 –Ω–∞ –æ—Å–Ω–æ–≤—ñ bins
        –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ 3 bins —â–æ —ñ—Å–Ω—É—é—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—ñ
        """
        logger.info("\nüé® –§–æ—Ä–º—É–≤–∞–Ω–Ω—è bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –¥–ª—è H3...")
        
        with self.ch_conn.connect():
            resolutions = self.get_h3_resolutions()
            
            for resolution in resolutions:
                logger.info(f"  –†–µ–∑–æ–ª—é—Ü—ñ—è {resolution}:")
                
                # –§–æ—Ä–º—É—î–º–æ bivariate —Ç—ñ–ª—å–∫–∏ –¥–ª—è population √ó income
                # (–±–æ —Ç—ñ–ª—å–∫–∏ —Ü—ñ bins —Ç–æ—á–Ω–æ —ñ—Å–Ω—É—é—Ç—å)
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—é—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è
                    columns = self.ch_conn.get_table_columns('geo_analytics.h3_analytics')
                    
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–ª—ñ–≤ –¥–ª—è bivariate, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    if 'population_bin' not in columns or 'income_bin' not in columns:
                        logger.warning(f"    ‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ bin –ø–æ–ª—è –¥–ª—è —Ä–µ–∑–æ–ª—é—Ü—ñ—ó {resolution}")
                        continue
                    
                    # –§–æ—Ä–º—É—î–º–æ bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —è–∫ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—é bins
                    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: population_bin=2, income_bin=3 ‚Üí "2-3"
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–∏–π UPDATE (—è–∫—â–æ –ø–æ–ª—è bivariate –Ω–µ–º–∞—î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ)
                    logger.info(f"    –§–æ—Ä–º—É–≤–∞–Ω–Ω—è population √ó income bivariate...")
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π
                    stats = self.ch_conn.client.execute(f"""
                        SELECT 
                            CONCAT(toString(population_bin), '-', toString(income_bin)) as bivar,
                            COUNT(*) as count
                        FROM geo_analytics.h3_analytics
                        WHERE resolution = {resolution}
                        GROUP BY bivar
                        ORDER BY count DESC
                        LIMIT 10
                    """)
                    
                    if stats:
                        logger.info(f"    –¢–û–ü-10 –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π:")
                        for row in stats:
                            bivar, count = row
                            logger.info(f"      {bivar}: {count:,} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
                    
                except Exception as e:
                    logger.error(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ bivariate: {str(e)[:100]}")
    
    def generate_h3_statistics(self):
        """
        –ì–µ–Ω–µ—Ä—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É bins –¥–ª—è H3
        """
        logger.info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ bins –¥–ª—è H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤:")
        
        with self.ch_conn.connect():
            resolutions = self.get_h3_resolutions()
            
            for resolution in resolutions[:2]:  # –¢—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–∏—Ö 2 —Ä–µ–∑–æ–ª—é—Ü—ñ–π –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                logger.info(f"\nüó∫Ô∏è –†–µ–∑–æ–ª—é—Ü—ñ—è {resolution}:")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ population_bin
                result = self.ch_conn.client.execute(f"""
                    SELECT 
                        population_bin,
                        COUNT(*) as count,
                        AVG(population_density) as avg_density,
                        MIN(population_density) as min_density,
                        MAX(population_density) as max_density
                    FROM geo_analytics.h3_analytics
                    WHERE resolution = {resolution}
                    GROUP BY population_bin
                    ORDER BY population_bin
                """)
                
                if result:
                    logger.info("  Population bins:")
                    for row in result:
                        bin_val, count, avg, min_val, max_val = row
                        label = ['–í—ñ–¥—Å—É—Ç–Ω—ñ', '–ù–∏–∑—å–∫–∞', '–°–µ—Ä–µ–¥–Ω—è', '–í–∏—Å–æ–∫–∞'][bin_val] if bin_val <= 3 else f"Bin {bin_val}"
                        if avg:
                            logger.info(f"    {label}: {count:,} –≥–µ–∫—Å., —â—ñ–ª—å–Ω—ñ—Å—Ç—å {avg:.1f} (–≤—ñ–¥ {min_val:.1f} –¥–æ {max_val:.1f})")
                        else:
                            logger.info(f"    {label}: {count:,} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ income_bin
                result = self.ch_conn.client.execute(f"""
                    SELECT 
                        income_bin,
                        COUNT(*) as count,
                        AVG(income_index) as avg_income
                    FROM geo_analytics.h3_analytics
                    WHERE resolution = {resolution}
                    GROUP BY income_bin
                    ORDER BY income_bin
                    LIMIT 10
                """)
                
                if result:
                    logger.info("  Income bins:")
                    for row in result:
                        bin_val, count, avg = row
                        label = ['–í—ñ–¥—Å—É—Ç–Ω—ñ', '–ù–∏–∑—å–∫—ñ', '–°–µ—Ä–µ–¥–Ω—ñ', '–í–∏—Å–æ–∫—ñ'][bin_val] if bin_val <= 3 else f"Bin {bin_val}"
                        if avg:
                            logger.info(f"    {label}: {count:,} –≥–µ–∫—Å., —ñ–Ω–¥–µ–∫—Å {avg:.4f}")
                        else:
                            logger.info(f"    {label}: {count:,} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
    
    def validate_h3_results(self) -> bool:
        """
        –í–∞–ª—ñ–¥—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins –¥–ª—è H3
        
        Returns:
            True —è–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ
        """
        logger.info("\nüîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è H3 bins...")
        
        with self.ch_conn.connect():
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result = self.ch_conn.client.execute("""
                SELECT 
                    resolution,
                    COUNT(*) as total,
                    SUM(CASE WHEN population_bin > 0 THEN 1 ELSE 0 END) as with_pop_bin,
                    SUM(CASE WHEN income_bin > 0 THEN 1 ELSE 0 END) as with_income_bin,
                    SUM(CASE WHEN competitor_bin > 0 THEN 1 ELSE 0 END) as with_comp_bin
                FROM geo_analytics.h3_analytics
                GROUP BY resolution
                ORDER BY resolution
            """)
            
            if result:
                logger.info("  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑–æ–ª—é—Ü—ñ—è—Ö:")
                total_valid = 0
                for row in result:
                    res, total, with_pop, with_income, with_comp = row
                    logger.info(f"    –†–µ–∑–æ–ª—é—Ü—ñ—è {res}: {total:,} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
                    logger.info(f"      –ó population_bin: {with_pop:,} ({with_pop*100/total:.1f}%)")
                    logger.info(f"      –ó income_bin: {with_income:,} ({with_income*100/total:.1f}%)")
                    logger.info(f"      –ó competitor_bin: {with_comp:,} ({with_comp*100/total:.1f}%)")
                    
                    if with_pop > 0:
                        total_valid += 1
                
                return total_valid > 0
            
            return False
    
    def run(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins –¥–ª—è H3
        
        Returns:
            True —è–∫—â–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ
        """
        try:
            logger.info("=" * 60)
            logger.info("üöÄ –ü–û–ß–ê–¢–û–ö: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bins –¥–ª—è H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
            logger.info("=" * 60)
            
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞–±–ª–∏—Ü—ñ
            if not self.check_table_exists():
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü—è h3_analytics –Ω–µ —ñ—Å–Ω—É—î!")
                logger.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å ETL –¥–ª—è H3 –º–µ—Ç—Ä–∏–∫")
                return False
            
            # 2. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bins –¥–ª—è –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫
            self.calculate_all_h3_bins()
            
            # 3. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è bivariate –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π
            self.update_h3_bivariate()
            
            # 4. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.generate_h3_statistics()
            
            # 5. –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            success = self.validate_h3_results()
            
            # –ü—ñ–¥—Å—É–º–æ–∫
            elapsed = datetime.now() - self.start_time
            logger.info("\n" + "=" * 60)
            if success:
                logger.info(f"‚úÖ H3 BINS –†–û–ó–†–ê–•–û–í–ê–ù–û –£–°–ü–Ü–®–ù–û")
                logger.info(f"‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {elapsed}")
                logger.info(f"\nüéØ H3 bins –≥–æ—Ç–æ–≤—ñ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–∞ –∫–∞—Ä—Ç–∞—Ö!")
                logger.info("   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä–µ–∑–æ–ª—é—Ü—ñ—é 8 –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–≥–ª—è–¥—É")
                logger.info("   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä–µ–∑–æ–ª—é—Ü—ñ—é 9 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É")
            else:
                logger.error(f"‚ùå –†–û–ó–†–ê–•–£–ù–û–ö –ó–ê–í–ï–†–®–ï–ù–û –ó –ü–û–ú–ò–õ–ö–ê–ú–ò")
            logger.info("=" * 60)
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    calculator = H3BinsCalculator()
    success = calculator.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()