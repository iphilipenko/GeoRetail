"""
scripts/etl/clickhouse/test_connections.py
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ PostGIS —Ç–∞ ClickHouse
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –±–∞–∑ –¥–∞–Ω–∏—Ö —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –æ–±—Ä–æ–±–∫–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –Ω–∞–∑–≤ —Ç–∞–±–ª–∏—Ü—å
"""

import sys
import logging
from config import PG_CONFIG, CH_CONFIG
from utils import PostgresConnector, ClickHouseConnector, test_connections

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_postgis_tables():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å –≤ PostGIS
    """
    logger.info("\nüìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å PostGIS...")
    
    required_tables = [
        ('osm_ukraine', 'admin_boundaries'),
        ('osm_ukraine', 'h3_admin_mapping'),
        ('osm_ukraine', 'poi_processed'),
        ('demographics', 'h3_population'),
        ('osm_ukraine', 'rbc_h3_data')
    ]
    
    pg = PostgresConnector(PG_CONFIG)
    
    with pg.connect():
        tables_found = []
        
        for schema, table in required_tables:
            query = """
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = %s 
                    AND table_name = %s
                )
            """
            pg.cursor.execute(query, (schema, table))
            exists = pg.cursor.fetchone()['exists']
            
            if exists:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
                pg.cursor.execute(f"SELECT COUNT(*) as cnt FROM {schema}.{table}")
                count = pg.cursor.fetchone()['cnt']
                logger.info(f"  ‚úÖ {schema}.{table}: {count:,} –∑–∞–ø–∏—Å—ñ–≤")
                tables_found.append((schema, table, count))
            else:
                logger.warning(f"  ‚ö†Ô∏è {schema}.{table}: –ù–ï –ó–ù–ê–ô–î–ï–ù–û")
        
        return tables_found


def check_clickhouse_setup():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ClickHouse
    –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –Ω–∞–∑–≤ —Ç–∞–±–ª–∏—Ü—å
    """
    logger.info("\nüìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ClickHouse...")
    
    ch = ClickHouseConnector(CH_CONFIG)
    
    with ch.connect():
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        result = ch.client.execute("SHOW DATABASES")
        databases = [db[0] for db in result]
        
        if 'geo_analytics' in databases:
            logger.info(f"  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö geo_analytics —ñ—Å–Ω—É—î")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
            ch.client.execute("USE geo_analytics")
            tables = ch.client.execute("SHOW TABLES")
            
            if tables:
                logger.info(f"  –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: {len(tables)}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞—à–∏—Ö —Ü—ñ–ª—å–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å
                target_tables = ['admin_analytics', 'h3_analytics']
                existing_tables = [t[0] for t in tables]
                
                for target_table in target_tables:
                    if target_table in existing_tables:
                        try:
                            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ backticks –¥–ª—è –±–µ–∑–ø–µ—á–Ω–∏—Ö –Ω–∞–∑–≤ —Ç–∞–±–ª–∏—Ü—å
                            count = ch.client.execute(f"SELECT COUNT(*) FROM `{target_table}`")[0][0]
                            logger.info(f"    ‚úÖ {target_table}: {count:,} –∑–∞–ø–∏—Å—ñ–≤")
                        except Exception as e:
                            logger.info(f"    ‚úÖ {target_table}: —ñ—Å–Ω—É—î (–ø–æ—Ä–æ–∂–Ω—è)")
                    else:
                        logger.info(f"    ‚ö†Ô∏è {target_table}: —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—à—ñ —Ç–∞–±–ª–∏—Ü—ñ (—è–∫—â–æ —î)
                other_tables = [t[0] for t in tables if not t[0].startswith('.') and t[0] not in target_tables]
                if other_tables:
                    logger.info(f"  –Ü–Ω—à—ñ —Ç–∞–±–ª–∏—Ü—ñ: {', '.join(other_tables)}")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –æ–∫—Ä–µ–º–æ
                system_tables = [t[0] for t in tables if t[0].startswith('.')]
                if system_tables:
                    logger.info(f"  –°–∏—Å—Ç–µ–º–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ: {len(system_tables)} —à—Ç.")
                    
            else:
                logger.info("  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ñ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")
                logger.info("  –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—å...")
                create_clickhouse_tables(ch)
        else:
            logger.warning("  ‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö geo_analytics –ù–ï –Ü–°–ù–£–Ñ")
            logger.info("  –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö...")
            ch.client.execute("CREATE DATABASE IF NOT EXISTS geo_analytics")
            logger.info("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞")
            create_clickhouse_tables(ch)


def create_clickhouse_tables(ch):
    """
    –°—Ç–≤–æ—Ä—é—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤ ClickHouse —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
    """
    logger.info("\nüî® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å ClickHouse...")
    
    # –¢–∞–±–ª–∏—Ü—è admin_analytics
    admin_table_sql = """
    CREATE TABLE IF NOT EXISTS geo_analytics.admin_analytics (
        -- –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        admin_id UInt32,
        admin_level UInt8,
        admin_name String,
        admin_name_uk String,
        parent_id Nullable(UInt32),
        osm_id Int64,
        
        -- –ë–∞–∑–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        area_km2 Float32,
        perimeter_km Float32,
        hex_count_r7 UInt32,
        hex_count_r8 UInt32,
        hex_count_r9 UInt32,
        
        -- –ù–∞—Å–µ–ª–µ–Ω–Ω—è
        population_estimated Nullable(Float64),
        population_density Nullable(Float32),
        residential_coverage Float32,
        
        -- –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        economic_activity_index Nullable(Float32),
        
        -- –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è
        competitors_total UInt32,
        competitor_density Float32,
        
        -- –Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        poi_total_count UInt32,
        poi_density Float32,
        
        -- –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        road_density_km_per_km2 Float32,
        connectivity_index Float32,
        
        -- –ú–µ—Ç–∞–¥–∞–Ω—ñ
        updated_at DateTime DEFAULT now()
    )
    ENGINE = MergeTree()
    PARTITION BY admin_level
    ORDER BY (admin_level, admin_id)
    """
    
    # –¢–∞–±–ª–∏—Ü—è h3_analytics
    h3_table_sql = """
    CREATE TABLE IF NOT EXISTS geo_analytics.h3_analytics (
        -- –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        h3_index String,
        resolution UInt8,
        
        -- Core –º–µ—Ç—Ä–∏–∫–∏
        population_density Float32,
        income_index Float32,
        competitor_intensity Float32,
        poi_density Float32,
        accessibility_score Float32,
        retail_potential Float32,
        
        -- –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∞ –ø—Ä–∏–≤'—è–∑–∫–∞
        oblast_id UInt32,
        raion_id UInt32,
        gromada_id UInt32,
        
        -- –ú–µ—Ç–∞–¥–∞–Ω—ñ
        updated_at DateTime DEFAULT now()
    )
    ENGINE = MergeTree()
    PARTITION BY resolution
    ORDER BY (resolution, oblast_id, h3_index)
    """
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
        ch.client.execute(admin_table_sql)
        logger.info("  ‚úÖ –¢–∞–±–ª–∏—Ü—è admin_analytics —Å—Ç–≤–æ—Ä–µ–Ω–∞/–æ–Ω–æ–≤–ª–µ–Ω–∞")
        
        ch.client.execute(h3_table_sql)
        logger.info("  ‚úÖ –¢–∞–±–ª–∏—Ü—è h3_analytics —Å—Ç–≤–æ—Ä–µ–Ω–∞/–æ–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")


def check_h3_functions():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å H3 —Ñ—É–Ω–∫—Ü—ñ–π –≤ PostGIS
    """
    logger.info("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ H3 —Ñ—É–Ω–∫—Ü—ñ–π –≤ PostGIS...")
    
    pg = PostgresConnector(PG_CONFIG)
    
    with pg.connect():
        try:
            # –¢–µ—Å—Ç H3 —Ñ—É–Ω–∫—Ü—ñ—ó (–Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è)
            pg.cursor.execute("""
                SELECT h3_lat_lng_to_cell(50.4501, 30.5234, 9) as h3_index
            """)
            result = pg.cursor.fetchone()
            if result and result['h3_index']:
                logger.info(f"  ‚úÖ H3 —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å. –¢–µ—Å—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å: {result['h3_index']}")
                return True
        except Exception:
            # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é
            try:
                pg.cursor.execute("""
                    SELECT h3_geo_to_h3(50.4501, 30.5234, 9) as h3_index
                """)
                result = pg.cursor.fetchone()
                if result and result['h3_index']:
                    logger.info(f"  ‚úÖ H3 —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å (—Å—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è). –¢–µ—Å—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å: {result['h3_index']}")
                    logger.info("  ‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è H3 —Ñ—É–Ω–∫—Ü—ñ–π")
                    return True
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è H3 —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
                logger.info("  –°–ø—Ä–æ–±—É–π—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è H3:")
                logger.info("  CREATE EXTENSION IF NOT EXISTS h3;")
                logger.info("  CREATE EXTENSION IF NOT EXISTS h3_postgis;")
                return False


def show_summary(pg_tables, ch_ready):
    """
    –ü–æ–∫–∞–∑—É—î –ø—ñ–¥—Å—É–º–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    """
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ü–Ü–î–°–£–ú–û–ö –ü–ï–†–ï–í–Ü–†–ö–ò")
    logger.info("=" * 60)
    
    # PostGIS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if pg_tables:
        total_records = sum(count for _, _, count in pg_tables)
        logger.info(f"\nPostGIS:")
        logger.info(f"  ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(pg_tables)} —Ç–∞–±–ª–∏—Ü—å")
        logger.info(f"  ‚úÖ –ó–∞–≥–∞–ª–æ–º {total_records:,} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        for schema, table, count in pg_tables:
            if table == 'admin_boundaries':
                logger.info(f"     - –ê–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å: {count:,}")
            elif table == 'h3_admin_mapping':
                logger.info(f"     - H3 –º–∞–ø—ñ–Ω–≥—ñ–≤: {count:,}")
            elif table == 'poi_processed':
                logger.info(f"     - POI –æ–±'—î–∫—Ç—ñ–≤: {count:,}")
            elif table == 'h3_population':
                logger.info(f"     - H3 –∑ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è–º: {count:,}")
    
    logger.info(f"\nClickHouse:")
    if ch_ready:
        logger.info(f"  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞")
        logger.info(f"  ‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")
    else:
        logger.info(f"  ‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ")


def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
    """
    logger.info("=" * 60)
    logger.info("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ï–†–ï–î–û–í–ò–©–ê ETL")
    logger.info("=" * 60)
    
    # 1. –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
    if not test_connections(PG_CONFIG, CH_CONFIG):
        logger.error("‚ùå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é!")
        sys.exit(1)
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å PostGIS
    pg_tables = check_postgis_tables()
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ClickHouse
    check_clickhouse_setup()
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ H3
    h3_ok = check_h3_functions()
    
    # 5. –ü—ñ–¥—Å—É–º–æ–∫
    show_summary(pg_tables, True)
    
    logger.info("\n" + "=" * 60)
    logger.info("‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –≥–æ—Ç–æ–≤–µ –¥–ª—è ETL!")
    logger.info("=" * 60)
    logger.info("\n–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    logger.info("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å 01_admin_analytics.py –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å")
    logger.info("2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å 02_admin_bins.py –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins")
    logger.info("3. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –∑ H3 –º–µ—Ç—Ä–∏–∫–∞–º–∏")


if __name__ == "__main__":
    main()