"""
scripts/etl/clickhouse/03_h3_analytics.py
ETL –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –∑ PostGIS –≤ ClickHouse
–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —Ä–µ–∑–æ–ª—é—Ü—ñ—ó (7, 8, 9, 10) –∑ –±–∞—Ç—á—É–≤–∞–Ω–Ω—è–º –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö
"""

import logging
import sys
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
import psycopg2
from psycopg2.extras import RealDictCursor
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import h3
from config import PG_CONFIG, CH_CONFIG, BATCH_SIZE, LARGE_TABLE_BATCH_SIZE
from utils import PostgresConnector, ClickHouseConnector, ETLProgress

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class H3AnalyticsETL:
    """
    ETL –∫–ª–∞—Å –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –≤—Å—ñ—Ö —Ä–µ–∑–æ–ª—é—Ü—ñ–π
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î h3_admin_mapping —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ
    """
    
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä–µ–∑–æ–ª—é—Ü—ñ–π —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω—ñ –æ–±—Å—è–≥–∏
    RESOLUTIONS = {
        7: {'expected_count': 136000, 'batch_size': 50000},
        8: {'expected_count': 760000, 'batch_size': 30000},
        9: {'expected_count': 2500000, 'batch_size': 20000},
        10: {'expected_count': 5300000, 'batch_size': 10000}
    }
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ETL –ø—Ä–æ—Ü–µ—Å—É"""
        self.pg_conn = PostgresConnector(PG_CONFIG)
        self.ch_conn = ClickHouseConnector(CH_CONFIG)
        self.start_time = datetime.now()
        self.total_processed = 0
        
    def get_oblasts(self) -> List[Dict]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –±–∞—Ç—á—É–≤–∞–Ω–Ω—è
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –∑ id —Ç–∞ –Ω–∞–∑–≤–∞–º–∏
        """
        logger.info("üìç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–±–ª–∞—Å—Ç–µ–π...")
        
        query = """
        SELECT 
            id as oblast_id,
            name_uk as oblast_name,
            ST_Area(geometry::geography) / 1000000 as area_km2
        FROM osm_ukraine.admin_boundaries
        WHERE admin_level = 4
        ORDER BY id
        """
        
        with self.pg_conn.connect():
            oblasts = self.pg_conn.execute_query(query)
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(oblasts)} –æ–±–ª–∞—Å—Ç–µ–π")
            return oblasts
    
    def extract_h3_batch(self, resolution: int, oblast_id: int) -> List[Dict]:
        """
        –í–∏—Ç—è–≥—É—î –±–∞—Ç—á H3 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ —Ç–∞ —Ä–µ–∑–æ–ª—é—Ü—ñ—ó
        
        Args:
            resolution: H3 —Ä–µ–∑–æ–ª—é—Ü—ñ—è (7-10)
            oblast_id: ID –æ–±–ª–∞—Å—Ç—ñ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –∑ –±–∞–∑–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        """
        query = """
        SELECT DISTINCT
            ham.h3_index,
            ham.h3_resolution as resolution,
            ham.oblast_id,
            ham.raion_id,
            ham.gromada_id,
            -- –û—Ç—Ä–∏–º—É—î–º–æ —Ü–µ–Ω—Ç—Ä–æ—ó–¥ –≥–µ–∫—Å–∞–≥–æ–Ω—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
            h3_cell_to_lat(ham.h3_index::h3index) as lat,
            h3_cell_to_lng(ham.h3_index::h3index) as lng
        FROM osm_ukraine.h3_admin_mapping ham
        WHERE ham.h3_resolution = %s
            AND ham.oblast_id = %s
        """
        
        with self.pg_conn.connect():
            self.pg_conn.cursor.execute(query, (resolution, oblast_id))
            results = self.pg_conn.cursor.fetchall()
            return results if results else []
    
    def enrich_with_population(self, hexagons: List[Dict]) -> List[Dict]:
        """
        –î–æ–¥–∞—î –¥–∞–Ω—ñ –ø—Ä–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –∑ demographics.h3_population
        
        Args:
            hexagons: –°–ø–∏—Å–æ–∫ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
            
        Returns:
            –ó–±–∞–≥–∞—á–µ–Ω—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
        """
        if not hexagons:
            return hexagons
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        hex_map = {h['h3_index']: h for h in hexagons}
        h3_indices = list(hex_map.keys())
        
        # –ë–∞—Ç—á–∞–º–∏ –∑–∞–ø–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è
        batch_size = 5000
        
        with self.pg_conn.connect():
            for i in range(0, len(h3_indices), batch_size):
                batch_indices = h3_indices[i:i+batch_size]
                
                query = """
                SELECT 
                    hex_id as h3_index,
                    population,
                    population_density
                FROM demographics.h3_population
                WHERE hex_id = ANY(%s)
                """
                
                self.pg_conn.cursor.execute(query, (batch_indices,))
                results = self.pg_conn.cursor.fetchall()
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
                for row in results:
                    if row['h3_index'] in hex_map:
                        hex_map[row['h3_index']]['population_count'] = row['population']
                        hex_map[row['h3_index']]['population_density'] = row['population_density']
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –Ω—É–ª—è–º–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        for h in hexagons:
            h.setdefault('population_count', 0)
            h.setdefault('population_density', 0)
        
        return hexagons
    
    def enrich_with_economic_data(self, hexagons: List[Dict]) -> List[Dict]:
        """
        –î–æ–¥–∞—î –µ–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –¥–∞–Ω—ñ –∑ rbc_h3_data
        
        Args:
            hexagons: –°–ø–∏—Å–æ–∫ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
            
        Returns:
            –ó–±–∞–≥–∞—á–µ–Ω—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
        """
        if not hexagons:
            return hexagons
        
        hex_map = {h['h3_index']: h for h in hexagons}
        h3_indices = list(hex_map.keys())
        
        batch_size = 5000
        
        with self.pg_conn.connect():
            for i in range(0, len(h3_indices), batch_size):
                batch_indices = h3_indices[i:i+batch_size]
                
                query = """
                SELECT 
                    h3_index,
                    cnt_transaction,
                    total_sum,
                    avg_check_per_client,
                    (avg_check_p25 + avg_check_p75) / 2 as avg_check_median
                FROM osm_ukraine.rbc_h3_data
                WHERE h3_index = ANY(%s)
                """
                
                self.pg_conn.cursor.execute(query, (batch_indices,))
                results = self.pg_conn.cursor.fetchall()
                
                for row in results:
                    if row['h3_index'] in hex_map:
                        h = hex_map[row['h3_index']]
                        h['transaction_count'] = row['cnt_transaction']
                        h['transaction_sum'] = float(row['total_sum']) if row['total_sum'] else 0
                        h['avg_check'] = float(row['avg_check_per_client']) if row['avg_check_per_client'] else 0
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –Ω—É–ª—è–º–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        for h in hexagons:
            h.setdefault('transaction_count', 0)
            h.setdefault('transaction_sum', 0)
            h.setdefault('avg_check', 0)
        
        return hexagons
    
    def enrich_with_poi_metrics(self, hexagons: List[Dict], resolution: int) -> List[Dict]:
        """
        –î–æ–¥–∞—î POI –º–µ—Ç—Ä–∏–∫–∏ –∑ poi_processed
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–ª–µ h3_res_X –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑–æ–ª—é—Ü—ñ—ó
        
        Args:
            hexagons: –°–ø–∏—Å–æ–∫ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
            resolution: H3 —Ä–µ–∑–æ–ª—é—Ü—ñ—è
            
        Returns:
            –ó–±–∞–≥–∞—á–µ–Ω—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏
        """
        if not hexagons:
            return hexagons
        
        hex_map = {h['h3_index']: h for h in hexagons}
        h3_indices = list(hex_map.keys())
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è JOIN –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑–æ–ª—é—Ü—ñ—ó
        h3_field = f'h3_res_{resolution}'
        
        batch_size = 5000
        
        with self.pg_conn.connect():
            for i in range(0, len(h3_indices), batch_size):
                batch_indices = h3_indices[i:i+batch_size]
                
                # –ê–≥—Ä–µ–≥—É—î–º–æ POI –ø–æ –≥–µ–∫—Å–∞–≥–æ–Ω–∞—Ö
                query = f"""
                SELECT 
                    {h3_field} as h3_index,
                    COUNT(*) as poi_total,
                    COUNT(*) FILTER (WHERE functional_group = 'competitor') as competitors,
                    COUNT(*) FILTER (WHERE primary_category = 'retail') as retail_count,
                    COUNT(*) FILTER (WHERE primary_category = 'food_service') as food_count,
                    COUNT(*) FILTER (WHERE primary_category = 'transport') as transport_count,
                    COUNT(*) FILTER (WHERE primary_category IN ('amenity', 'healthcare')) as services_count,
                    COUNT(*) FILTER (WHERE entity_type = 'transport_node') as transport_nodes,
                    COUNT(*) FILTER (WHERE entity_type = 'road_segment') as road_segments,
                    COUNT(DISTINCT brand_normalized) FILTER (WHERE brand_normalized IS NOT NULL) as unique_brands
                FROM osm_ukraine.poi_processed
                WHERE {h3_field} = ANY(%s)
                GROUP BY {h3_field}
                """
                
                self.pg_conn.cursor.execute(query, (batch_indices,))
                results = self.pg_conn.cursor.fetchall()
                
                for row in results:
                    if row['h3_index'] in hex_map:
                        h = hex_map[row['h3_index']]
                        h['poi_total'] = row['poi_total']
                        h['competitors'] = row['competitors']
                        h['retail_count'] = row['retail_count']
                        h['food_count'] = row['food_count']
                        h['transport_count'] = row['transport_count']
                        h['services_count'] = row['services_count']
                        h['transport_nodes'] = row['transport_nodes']
                        h['road_segments'] = row['road_segments']
                        h['unique_brands'] = row['unique_brands']
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –Ω—É–ª—è–º–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        for h in hexagons:
            h.setdefault('poi_total', 0)
            h.setdefault('competitors', 0)
            h.setdefault('retail_count', 0)
            h.setdefault('food_count', 0)
            h.setdefault('transport_count', 0)
            h.setdefault('services_count', 0)
            h.setdefault('transport_nodes', 0)
            h.setdefault('road_segments', 0)
            h.setdefault('unique_brands', 0)
        
        return hexagons
    
    def calculate_metrics(self, hexagons: List[Dict], resolution: int) -> List[Dict]:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ —Ç–∞ —ñ–Ω–¥–µ–∫—Å–∏
        
        Args:
            hexagons: –°–ø–∏—Å–æ–∫ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –∑ –±–∞–∑–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
            resolution: H3 —Ä–µ–∑–æ–ª—é—Ü—ñ—è
            
        Returns:
            –ì–µ–∫—Å–∞–≥–æ–Ω–∏ –∑ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–ª–æ—â—É –≥–µ–∫—Å–∞–≥–æ–Ω—É –¥–ª—è –¥–∞–Ω–æ—ó —Ä–µ–∑–æ–ª—é—Ü—ñ—ó (–∫–º¬≤)
        hex_areas = {
            7: 5.161,    # ~5.16 –∫–º¬≤
            8: 0.737,    # ~0.74 –∫–º¬≤
            9: 0.105,    # ~0.11 –∫–º¬≤
            10: 0.015    # ~0.015 –∫–º¬≤
        }
        area_km2 = hex_areas.get(resolution, 1.0)
        
        for h in hexagons:
            # 1. Population density (–≤–∂–µ —î –∑ demographics)
            # –Ø–∫—â–æ –Ω–µ–º–∞—î, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ
            if h.get('population_density') is None or h['population_density'] == 0:
                if h.get('population_count', 0) > 0:
                    h['population_density'] = h['population_count'] / area_km2
                else:
                    h['population_density'] = 0
            
            # 2. Income index (0-1) - –Ω–∞ –æ—Å–Ω–æ–≤—ñ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            if h.get('transaction_sum', 0) > 0 and h.get('population_count', 0) > 0:
                income_per_capita = h['transaction_sum'] / h['population_count']
                h['income_index'] = min(1.0, income_per_capita / 50000)  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
            else:
                h['income_index'] = 0
            
            # 3. Competitor intensity (0-1)
            competitors = h.get('competitors', 0)
            h['competitor_intensity'] = min(1.0, competitors / 10)  # 10+ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ = –º–∞–∫—Å–∏–º—É–º
            
            # 4. POI density (–Ω–∞ –∫–º¬≤)
            h['poi_density'] = h.get('poi_total', 0) / area_km2
            
            # 5. Accessibility score (0-1) - —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
            transport_score = 0
            if h.get('transport_nodes', 0) > 0:
                transport_score += min(0.5, h['transport_nodes'] / 5)
            if h.get('road_segments', 0) > 0:
                transport_score += min(0.5, h['road_segments'] / 10)
            h['accessibility_score'] = transport_score
            
            # 6. Traffic index (0-1) - –Ω–∞ –æ—Å–Ω–æ–≤—ñ POI —â–æ –≥–µ–Ω–µ—Ä—É—é—Ç—å —Ç—Ä–∞—Ñ—ñ–∫
            traffic_generators = (h.get('retail_count', 0) + 
                                h.get('food_count', 0) + 
                                h.get('services_count', 0))
            h['traffic_index'] = min(1.0, traffic_generators / 20)
            
            # 7. Retail potential (0-1) - –∫–æ–º–ø–æ–∑–∏—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å
            factors = []
            
            # –§–∞–∫—Ç–æ—Ä –Ω–∞—Å–µ–ª–µ–Ω–Ω—è
            if h['population_density'] > 0:
                factors.append(min(1.0, h['population_density'] / 1000))
            
            # –§–∞–∫—Ç–æ—Ä –¥–æ—Ö–æ–¥—ñ–≤
            if h['income_index'] > 0:
                factors.append(h['income_index'])
            
            # –§–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
            if h['accessibility_score'] > 0:
                factors.append(h['accessibility_score'])
            
            # –§–∞–∫—Ç–æ—Ä —Ç—Ä–∞—Ñ—ñ–∫—É
            if h['traffic_index'] > 0:
                factors.append(h['traffic_index'])
            
            # –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó
            competition_factor = 1.0 - (h['competitor_intensity'] * 0.5)
            
            if factors:
                h['retail_potential'] = (sum(factors) / len(factors)) * competition_factor
            else:
                h['retail_potential'] = 0
            
            # 8. Risk score (0-1) - —Ä–∏–∑–∏–∫–∏
            risk_factors = []
            
            # –†–∏–∑–∏–∫ –≤–∏—Å–æ–∫–æ—ó –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó
            if h['competitor_intensity'] > 0.5:
                risk_factors.append(h['competitor_intensity'])
            
            # –†–∏–∑–∏–∫ –Ω–∏–∑—å–∫–æ—ó —â—ñ–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è
            if h['population_density'] < 100:
                risk_factors.append(0.5)
            
            # –†–∏–∑–∏–∫ –Ω–∏–∑—å–∫–∏—Ö –¥–æ—Ö–æ–¥—ñ–≤
            if h['income_index'] < 0.3:
                risk_factors.append(0.6)
            
            # –†–∏–∑–∏–∫ –ø–æ–≥–∞–Ω–æ—ó –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
            if h['accessibility_score'] < 0.3:
                risk_factors.append(0.4)
            
            if risk_factors:
                h['risk_score'] = sum(risk_factors) / len(risk_factors)
            else:
                h['risk_score'] = 0.2  # –ë–∞–∑–æ–≤–∏–π —Ä–∏–∑–∏–∫
            
            # Pre-calculated bins (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è - –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É —Å–∫—Ä–∏–ø—Ç—ñ)
            # Population bin (1-3)
            if h['population_density'] < 100:
                h['population_bin'] = 1
            elif h['population_density'] < 500:
                h['population_bin'] = 2
            else:
                h['population_bin'] = 3
            
            # Income bin (1-3)
            if h['income_index'] < 0.33:
                h['income_bin'] = 1
            elif h['income_index'] < 0.66:
                h['income_bin'] = 2
            else:
                h['income_bin'] = 3
            
            # Competitor bin (1-3)
            if h['competitor_intensity'] < 0.33:
                h['competitor_bin'] = 1
            elif h['competitor_intensity'] < 0.66:
                h['competitor_bin'] = 2
            else:
                h['competitor_bin'] = 3
        
        return hexagons
    
    def transform_for_clickhouse(self, hexagons: List[Dict]) -> List[Dict]:
        """
        –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î –¥–∞–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ ClickHouse
        
        Args:
            hexagons: –°–ø–∏—Å–æ–∫ –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
            
        Returns:
            –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
        """
        transformed = []
        current_time = datetime.now()
        
        for h in hexagons:
            record = {
                # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
                'h3_index': h['h3_index'],
                'resolution': h['resolution'],
                
                # Core –º–µ—Ç—Ä–∏–∫–∏ (–±–µ–∑–ø–µ—á–Ω–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤)
                'population_density': float(h.get('population_density', 0)),
                'income_index': float(h.get('income_index', 0)),
                'competitor_intensity': float(h.get('competitor_intensity', 0)),
                'poi_density': float(h.get('poi_density', 0)),
                'accessibility_score': float(h.get('accessibility_score', 0)),
                'traffic_index': float(h.get('traffic_index', 0)),
                'retail_potential': float(h.get('retail_potential', 0)),
                'risk_score': float(h.get('risk_score', 0)),
                
                # Pre-calculated bins
                'population_bin': int(h.get('population_bin', 1)),
                'income_bin': int(h.get('income_bin', 1)),
                'competitor_bin': int(h.get('competitor_bin', 1)),
                
                # –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∞ –ø—Ä–∏–≤'—è–∑–∫–∞
                'oblast_id': int(h.get('oblast_id', 0)),
                'raion_id': int(h.get('raion_id', 0)) if h.get('raion_id') else 0,
                'gromada_id': int(h.get('gromada_id', 0)) if h.get('gromada_id') else 0,
                
                # Metadata
                'updated_at': current_time
            }
            
            transformed.append(record)
        
        return transformed
    
    def load_to_clickhouse(self, data: List[Dict], resolution: int) -> int:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –≤ ClickHouse
        
        Args:
            data: –î–∞–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            resolution: H3 —Ä–µ–∑–æ–ª—é—Ü—ñ—è (–¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è)
            
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        """
        if not data:
            return 0
        
        with self.ch_conn.connect():
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
            existing_columns = self.ch_conn.get_table_columns('geo_analytics.h3_analytics')
            
            if not existing_columns:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ h3_analytics")
                return 0
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞—Ç—á–∞–º–∏
            batch_size = 10000
            total_loaded = 0
            
            for i in range(0, len(data), batch_size):
                batch = data[i:i + batch_size]
                loaded = self.ch_conn.insert_data(
                    'geo_analytics.h3_analytics',
                    batch,
                    existing_columns
                )
                total_loaded += loaded
            
            return total_loaded
    
    def process_resolution(self, resolution: int) -> Tuple[int, int]:
        """
        –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –≥–µ–∫—Å–∞–≥–æ–Ω–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ä–µ–∑–æ–ª—é—Ü—ñ—ó
        
        Args:
            resolution: H3 —Ä–µ–∑–æ–ª—é—Ü—ñ—è (7-10)
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–æ–±—Ä–æ–±–ª–µ–Ω–æ, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ)
        """
        logger.info(f"\n{'='*60}")
        logger.info(f"üî∑ –û–ë–†–û–ë–ö–ê –†–ï–ó–û–õ–Æ–¶–Ü–á H3-{resolution}")
        logger.info(f"{'='*60}")
        
        res_config = self.RESOLUTIONS[resolution]
        oblasts = self.get_oblasts()
        
        total_extracted = 0
        total_loaded = 0
        
        # –ü—Ä–æ–≥—Ä–µ—Å –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö
        oblast_progress = ETLProgress(len(oblasts), f"–û–±–ª–∞—Å—Ç—ñ –¥–ª—è H3-{resolution}")
        
        for oblast in oblasts:
            oblast_id = oblast['oblast_id']
            oblast_name = oblast['oblast_name']
            
            try:
                # 1. –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤
                hexagons = self.extract_h3_batch(resolution, oblast_id)
                
                if not hexagons:
                    oblast_progress.update(1)
                    continue
                
                total_extracted += len(hexagons)
                
                # 2. –ó–±–∞–≥–∞—á–µ–Ω–Ω—è –¥–∞–Ω–∏–º–∏
                hexagons = self.enrich_with_population(hexagons)
                hexagons = self.enrich_with_economic_data(hexagons)
                hexagons = self.enrich_with_poi_metrics(hexagons, resolution)
                
                # 3. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫
                hexagons = self.calculate_metrics(hexagons, resolution)
                
                # 4. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è
                transformed = self.transform_for_clickhouse(hexagons)
                
                # 5. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                loaded = self.load_to_clickhouse(transformed, resolution)
                total_loaded += loaded
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
                oblast_progress.update(1)
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ
                if loaded > 0:
                    logger.debug(f"  {oblast_name}: {loaded:,} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {oblast_name}: {str(e)[:100]}")
                oblast_progress.update(1)
                continue
        
        logger.info(f"\nüìä –†–µ–∑–æ–ª—é—Ü—ñ—è H3-{resolution}:")
        logger.info(f"  –í–∏—Ç—è–≥–Ω—É—Ç–æ: {total_extracted:,}")
        logger.info(f"  –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {total_loaded:,}")
        
        if res_config['expected_count'] > 0:
            coverage = (total_loaded / res_config['expected_count']) * 100
            logger.info(f"  –ü–æ–∫—Ä–∏—Ç—Ç—è: {coverage:.1f}%")
        
        return total_extracted, total_loaded
    
    def verify_migration(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó
        
        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
        """
        logger.info("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º—ñ–≥—Ä–∞—Ü—ñ—ó...")
        
        with self.ch_conn.connect():
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result = self.ch_conn.client.execute("""
                SELECT 
                    resolution,
                    COUNT(*) as count,
                    AVG(population_density) as avg_pop,
                    AVG(retail_potential) as avg_potential,
                    AVG(risk_score) as avg_risk,
                    COUNT(DISTINCT oblast_id) as oblasts,
                    MIN(income_index) as min_income,
                    MAX(income_index) as max_income
                FROM geo_analytics.h3_analytics
                GROUP BY resolution
                ORDER BY resolution
            """)
            
            logger.info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑–æ–ª—é—Ü—ñ—è—Ö:")
            total_count = 0
            
            for row in result:
                res, count, avg_pop, avg_pot, avg_risk, oblasts, min_inc, max_inc = row
                total_count += count
                
                logger.info(f"\n  H3-{res}: {count:,} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
                logger.info(f"    –û–±–ª–∞—Å—Ç–µ–π: {oblasts}")
                
                if avg_pop:
                    logger.info(f"    –°–µ—Ä–µ–¥–Ω—è —â—ñ–ª—å–Ω—ñ—Å—Ç—å: {avg_pop:.1f} —á–æ–ª/–∫–º¬≤")
                if avg_pot:
                    logger.info(f"    –°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª: {avg_pot:.3f}")
                if avg_risk:
                    logger.info(f"    –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∏–∑–∏–∫: {avg_risk:.3f}")
                if max_inc > 0:
                    logger.info(f"    –î—ñ–∞–ø–∞–∑–æ–Ω –¥–æ—Ö–æ–¥—ñ–≤: {min_inc:.3f} - {max_inc:.3f}")
            
            # –¢–æ–ø –≥–µ–∫—Å–∞–≥–æ–Ω–∏ –∑–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª–æ–º
            top_hexagons = self.ch_conn.client.execute("""
                SELECT 
                    h3_index,
                    resolution,
                    retail_potential,
                    population_density,
                    income_index,
                    competitor_intensity
                FROM geo_analytics.h3_analytics
                WHERE retail_potential > 0
                ORDER BY retail_potential DESC
                LIMIT 5
            """)
            
            if top_hexagons:
                logger.info("\nüèÜ –¢–û–ü-5 –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤ –∑–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª–æ–º:")
                for h3_idx, res, potential, pop, income, comp in top_hexagons:
                    logger.info(f"  {h3_idx[:8]}... (H3-{res}): –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª={potential:.3f}, "
                              f"–Ω–∞—Å–µ–ª–µ–Ω–Ω—è={pop:.0f}/–∫–º¬≤, –¥–æ—Ö—ñ–¥={income:.3f}")
            
            logger.info(f"\n‚úÖ –í—Å—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {total_count:,} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
            
            return total_count > 0
    
    def run(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π ETL –ø—Ä–æ—Ü–µ—Å –¥–ª—è –≤—Å—ñ—Ö —Ä–µ–∑–æ–ª—é—Ü—ñ–π
        
        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
        """
        try:
            logger.info("=" * 60)
            logger.info("üöÄ –ü–û–ß–ê–¢–û–ö ETL: H3 –≥–µ–∫—Å–∞–≥–æ–Ω–∏ ‚Üí ClickHouse")
            logger.info("=" * 60)
            
            # –û—á–∏—â–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
            with self.ch_conn.connect():
                self.ch_conn.client.execute("TRUNCATE TABLE geo_analytics.h3_analytics")
                logger.info("üóëÔ∏è –¢–∞–±–ª–∏—Ü—è h3_analytics –æ—á–∏—â–µ–Ω–∞")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É —Ä–µ–∑–æ–ª—é—Ü—ñ—é
            stats = {}
            for resolution in sorted(self.RESOLUTIONS.keys()):
                extracted, loaded = self.process_resolution(resolution)
                stats[resolution] = {'extracted': extracted, 'loaded': loaded}
                self.total_processed += loaded
            
            # –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
            success = self.verify_migration()
            
            # –ü—ñ–¥—Å—É–º–æ–∫
            elapsed = datetime.now() - self.start_time
            logger.info("\n" + "=" * 60)
            
            if success:
                logger.info(f"‚úÖ ETL –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û")
                logger.info(f"‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {elapsed}")
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑–æ–ª—é—Ü—ñ—è—Ö:")
                
                for res, data in stats.items():
                    logger.info(f"  H3-{res}: {data['loaded']:,} / {data['extracted']:,}")
                
                logger.info(f"\nüìä –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {self.total_processed:,} –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
                logger.info(f"\nüéØ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
                logger.info(f"  1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å 02_admin_bins.py –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins –∞–¥–º—ñ–Ω–æ–¥–∏–Ω–∏—Ü—å")
                logger.info(f"  2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å 04_h3_bins.py –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É bins –≥–µ–∫—Å–∞–≥–æ–Ω—ñ–≤")
            else:
                logger.error(f"‚ùå ETL –ó–ê–í–ï–†–®–ï–ù–û –ó –ü–û–ú–ò–õ–ö–ê–ú–ò")
            
            logger.info("=" * 60)
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ETL: {e}")
            import traceback
            traceback.print_exc()
            return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    etl = H3AnalyticsETL()
    success = etl.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()