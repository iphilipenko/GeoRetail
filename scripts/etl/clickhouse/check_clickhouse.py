"""
scripts/etl/clickhouse/check_clickhouse.py
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑ ClickHouse –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
"""

import subprocess
import sys
import time
import logging
import requests
from clickhouse_driver import Client

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

def check_docker_container():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ClickHouse
    """
    logger.info("=" * 60)
    logger.info("üê≥ –ü–ï–†–ï–í–Ü–†–ö–ê DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–ê")
    logger.info("=" * 60)
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î docker
        result = subprocess.run(['docker', 'ps'], capture_output=True, text=True)
        
        if 'clickhouse' in result.stdout.lower() or 'georetail' in result.stdout.lower():
            logger.info("‚úÖ ClickHouse –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ —ñ –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            result = subprocess.run(['docker', 'ps', '--filter', 'name=GeoRetail', '--format', 'table {{.Names}}\t{{.Ports}}\t{{.Status}}'], 
                                  capture_output=True, text=True)
            if result.stdout:
                logger.info(f"\n–î–µ—Ç–∞–ª—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:\n{result.stdout}")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫
            result = subprocess.run(['docker', 'ps', '--filter', 'ancestor=clickhouse/clickhouse-server', '--format', 'table {{.Names}}\t{{.Ports}}\t{{.Status}}'], 
                                  capture_output=True, text=True)
            if result.stdout:
                logger.info(f"\nClickHouse –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏:\n{result.stdout}")
                
        else:
            logger.warning("‚ö†Ô∏è ClickHouse –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            logger.info("\nüîß –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:")
            logger.info("docker run -d --name GeoRetail \\")
            logger.info("  -p 32768:8123 -p 32769:9000 \\")
            logger.info("  clickhouse/clickhouse-server:23.12")
            return False
            
    except FileNotFoundError:
        logger.error("‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ PATH")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ Docker: {e}")
        return False
    
    return True

def check_http_interface():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î HTTP —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ClickHouse
    """
    logger.info("\n" + "=" * 60)
    logger.info("üåê –ü–ï–†–ï–í–Ü–†–ö–ê HTTP –Ü–ù–¢–ï–†–§–ï–ô–°–£")
    logger.info("=" * 60)
    
    urls_to_check = [
        ("http://localhost:32768/", None, None),
        ("http://localhost:32768/", "webuser", "password123"),
        ("http://localhost:8123/", None, None),  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—Ä—Ç
        ("http://localhost:8123/", "default", "")
    ]
    
    for url, user, password in urls_to_check:
        try:
            auth = (user, password) if user else None
            response = requests.get(f"{url}?query=SELECT version()", auth=auth, timeout=5)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ HTTP –ø—Ä–∞—Ü—é—î –Ω–∞ {url}")
                if user:
                    logger.info(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user}")
                logger.info(f"   –í–µ—Ä—Å—ñ—è: {response.text.strip()}")
                return url, user, password
            else:
                logger.warning(f"‚ùå {url} - –∫–æ–¥ {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            logger.warning(f"‚ùå {url} - –Ω–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è")
        except Exception as e:
            logger.warning(f"‚ùå {url} - –ø–æ–º–∏–ª–∫–∞: {e}")
    
    return None, None, None

def check_native_connections():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Native –ø—Ä–æ—Ç–æ–∫–æ–ª
    """
    logger.info("\n" + "=" * 60)
    logger.info("üîå –ü–ï–†–ï–í–Ü–†–ö–ê NATIVE –ü–Ü–î–ö–õ–Æ–ß–ï–ù–¨")
    logger.info("=" * 60)
    
    connections_to_try = [
        {"host": "localhost", "port": 32769, "user": "webuser", "password": "password123"},
        {"host": "localhost", "port": 32769, "user": "default", "password": ""},
        {"host": "localhost", "port": 9000, "user": "default", "password": ""},
        {"host": "localhost", "port": 9000, "user": "webuser", "password": "password123"},
    ]
    
    for conn_params in connections_to_try:
        try:
            logger.info(f"\n–°–ø—Ä–æ–±–∞: {conn_params['user']}@{conn_params['host']}:{conn_params['port']}")
            
            client = Client(**conn_params)
            version = client.execute("SELECT version()")[0][0]
            
            logger.info(f"‚úÖ –£–°–ü–Ü–®–ù–û! –í–µ—Ä—Å—ñ—è: {version}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            databases = client.execute("SHOW DATABASES")
            logger.info(f"   –ë–∞–∑–∏ –¥–∞–Ω–∏—Ö: {[db[0] for db in databases]}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ geo_analytics
            if 'geo_analytics' in [db[0] for db in databases]:
                logger.info("   ‚úÖ –ë–∞–∑–∞ geo_analytics —ñ—Å–Ω—É—î")
            else:
                logger.info("   ‚ö†Ô∏è –ë–∞–∑–∞ geo_analytics –ù–ï —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ...")
                client.execute("CREATE DATABASE IF NOT EXISTS geo_analytics")
                logger.info("   ‚úÖ –ë–∞–∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
            
            client.disconnect()
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–æ–±–æ—á—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            return conn_params
            
        except Exception as e:
            error_msg = str(e)
            if "Authentication failed" in error_msg:
                logger.warning(f"   ‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")
            elif "Connection refused" in error_msg:
                logger.warning(f"   ‚ùå –ü–æ—Ä—Ç {conn_params['port']} –∑–∞–∫—Ä–∏—Ç–∏–π")
            else:
                logger.warning(f"   ‚ùå {error_msg[:100]}")
    
    return None

def suggest_fix(working_params):
    """
    –ü—Ä–æ–ø–æ–Ω—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è config.py
    """
    logger.info("\n" + "=" * 60)
    logger.info("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á")
    logger.info("=" * 60)
    
    if working_params:
        logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–±–æ—á—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!")
        logger.info("\n–û–Ω–æ–≤—ñ—Ç—å config.py –Ω–∞—Å—Ç—É–ø–Ω–∏–º —á–∏–Ω–æ–º:")
        logger.info("-" * 40)
        logger.info("CH_CONFIG = {")
        logger.info(f"    'host': '{working_params['host']}',")
        logger.info(f"    'port': {working_params['port']},")
        logger.info(f"    'database': 'geo_analytics',")
        logger.info(f"    'user': '{working_params['user']}',")
        logger.info(f"    'password': '{working_params['password']}'")
        logger.info("}")
        logger.info("-" * 40)
    else:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ä–æ–±–æ—á—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏!")
        logger.info("\n–ú–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è:")
        logger.info("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å ClickHouse –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:")
        logger.info("   docker run -d --name GeoRetail \\")
        logger.info("     -p 32768:8123 -p 32769:9000 \\")
        logger.info("     clickhouse/clickhouse-server:23.12")
        logger.info("\n2. –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:")
        logger.info("   docker start GeoRetail")
        logger.info("\n3. –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ ClickHouse:")
        logger.info("   docker exec -it GeoRetail clickhouse-client")
        logger.info("   CREATE USER webuser IDENTIFIED BY 'password123';")
        logger.info("   GRANT ALL ON *.* TO webuser;")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    logger.info("üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê CLICKHOUSE –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø")
    logger.info("=" * 60)
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Docker
    docker_ok = check_docker_container()
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ HTTP
    http_url, http_user, http_pass = check_http_interface()
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Native –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    working_params = check_native_connections()
    
    # 4. –î–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    suggest_fix(working_params)
    
    if working_params:
        logger.info("\n‚úÖ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        return 0
    else:
        logger.error("\n‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ ClickHouse!")
        return 1

if __name__ == "__main__":
    sys.exit(main())