"""
scripts/etl/clickhouse/check_ch_structure.py
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—å ClickHouse
–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ñ admin_analytics —Ç–∞ —ó—Ö —Ç–∏–ø–∏
"""

import logging
from config import CH_CONFIG
from utils import ClickHouseConnector

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_table_structure():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ admin_analytics –≤ ClickHouse
    """
    logger.info("=" * 60)
    logger.info("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–†–£–ö–¢–£–†–ò –¢–ê–ë–õ–ò–¶–Ü admin_analytics")
    logger.info("=" * 60)
    
    ch = ClickHouseConnector(CH_CONFIG)
    
    with ch.connect():
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ
        query = """
        SELECT 
            name as column_name,
            type as data_type,
            comment
        FROM system.columns
        WHERE database = 'geo_analytics' 
          AND table = 'admin_analytics'
        ORDER BY position
        """
        
        columns = ch.client.execute(query)
        
        logger.info(f"\nüìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(columns)} –∫–æ–ª–æ–Ω–æ–∫:\n")
        
        # –ì—Ä—É–ø—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        categories = {
            '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è': [],
            '–ë–∞–∑–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏': [],
            '–ù–∞—Å–µ–ª–µ–Ω–Ω—è': [],
            '–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å': [],
            'POI —Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è': [],
            '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': [],
            '–Ü–Ω–¥–µ–∫—Å–∏': [],
            'Bins': [],
            'Bivariate': [],
            '–ú–µ—Ç–∞–¥–∞–Ω—ñ': []
        }
        
        # –ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏
        for col_name, col_type, comment in columns:
            if col_name in ['admin_id', 'admin_level', 'admin_name', 'admin_name_uk', 'parent_id', 'osm_id']:
                categories['–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è'].append((col_name, col_type))
            elif col_name in ['area_km2', 'perimeter_km', 'hex_count_r7', 'hex_count_r8', 'hex_count_r9', 'hex_count_r10']:
                categories['–ë–∞–∑–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏'].append((col_name, col_type))
            elif 'population' in col_name or 'residential' in col_name or 'building' in col_name:
                categories['–ù–∞—Å–µ–ª–µ–Ω–Ω—è'].append((col_name, col_type))
            elif 'bank' in col_name or 'mcc' in col_name or 'economic' in col_name:
                categories['–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'].append((col_name, col_type))
            elif 'poi' in col_name or 'competitor' in col_name or 'retail' in col_name or 'food' in col_name or 'services' in col_name or 'brand' in col_name:
                categories['POI —Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è'].append((col_name, col_type))
            elif 'road' in col_name or 'transport' in col_name or 'connectivity' in col_name or 'accessibility' in col_name:
                categories['–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'].append((col_name, col_type))
            elif '_score' in col_name or '_index' in col_name and '_bin' not in col_name:
                categories['–Ü–Ω–¥–µ–∫—Å–∏'].append((col_name, col_type))
            elif '_bin' in col_name or 'tercile' in col_name or 'quintile' in col_name:
                categories['Bins'].append((col_name, col_type))
            elif 'bivariate' in col_name:
                categories['Bivariate'].append((col_name, col_type))
            else:
                categories['–ú–µ—Ç–∞–¥–∞–Ω—ñ'].append((col_name, col_type))
        
        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        for category, cols in categories.items():
            if cols:
                logger.info(f"\n{category} ({len(cols)} –ø–æ–ª—ñ–≤):")
                for col_name, col_type in cols:
                    logger.info(f"  - {col_name}: {col_type}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–ª—ñ–≤
        logger.info("\n" + "=" * 60)
        logger.info("üîé –ü–ï–†–ï–í–Ü–†–ö–ê –ö–†–ò–¢–ò–ß–ù–ò–• –ü–û–õ–Ü–í:")
        logger.info("=" * 60)
        
        all_columns = [col[0] for col in columns]
        
        # –ü–æ–ª—è, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏–º–∏
        fields_to_check = [
            'unique_brands_count',
            'retail_count', 
            'food_count',
            'services_count',
            'transport_count',
            'commercial_activity_score',
            'retail_potential_score',
            'transport_accessibility_score'
        ]
        
        missing_fields = []
        existing_fields = []
        
        for field in fields_to_check:
            if field in all_columns:
                existing_fields.append(field)
                logger.info(f"‚úÖ {field} - –Ü–°–ù–£–Ñ")
            else:
                missing_fields.append(field)
                logger.warning(f"‚ùå {field} - –í–Ü–î–°–£–¢–ù–Ñ")
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        logger.info("\n" + "=" * 60)
        logger.info("üìã –ü–Ü–î–°–£–ú–û–ö:")
        logger.info("=" * 60)
        logger.info(f"–í—Å—å–æ–≥–æ –ø–æ–ª—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ: {len(columns)}")
        logger.info(f"–Ü—Å–Ω—É—é—á–∏—Ö –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–ª—ñ–≤: {len(existing_fields)}")
        logger.info(f"–í—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–ª—ñ–≤: {len(missing_fields)}")
        
        if missing_fields:
            logger.info("\n‚ö†Ô∏è –£–í–ê–ì–ê! –¶—ñ –ø–æ–ª—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –≤ ClickHouse –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ ETL:")
            for field in missing_fields:
                logger.info(f"  - {field}")
                
            # –ì–µ–Ω–µ—Ä—É—î–º–æ SQL –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤
            logger.info("\nüí° SQL –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–æ–ª—ñ–≤:")
            logger.info("-" * 40)
            for field in missing_fields:
                if 'count' in field or 'total' in field:
                    data_type = 'UInt32'
                elif 'score' in field or 'index' in field:
                    data_type = 'Float32'
                else:
                    data_type = 'Nullable(Float32)'
                    
                logger.info(f"ALTER TABLE geo_analytics.admin_analytics ADD COLUMN IF NOT EXISTS {field} {data_type};")
        else:
            logger.info("\n‚úÖ –í—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç–Ω—ñ!")
        
        return missing_fields, existing_fields


def check_data_in_table():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—ñ
    """
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ü–ï–†–ï–í–Ü–†–ö–ê –î–ê–ù–ò–• –í –¢–ê–ë–õ–ò–¶–Ü")
    logger.info("=" * 60)
    
    ch = ClickHouseConnector(CH_CONFIG)
    
    with ch.connect():
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
        count = ch.client.execute("SELECT COUNT(*) FROM geo_analytics.admin_analytics")[0][0]
        logger.info(f"\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {count}")
        
        if count > 0:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—ñ–≤–Ω—è—Ö
            stats = ch.client.execute("""
                SELECT 
                    admin_level,
                    COUNT(*) as cnt
                FROM geo_analytics.admin_analytics
                GROUP BY admin_level
                ORDER BY admin_level
            """)
            
            logger.info("\n–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ä—ñ–≤–Ω—è—Ö:")
            for level, cnt in stats:
                logger.info(f"  –†—ñ–≤–µ–Ω—å {level}: {cnt} –∑–∞–ø–∏—Å—ñ–≤")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    missing_fields, existing_fields = check_table_structure()
    check_data_in_table()
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–¥ –≤–∏—Ö–æ–¥—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    if missing_fields:
        logger.warning(f"\n‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(missing_fields)} –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–æ–ª—ñ–≤!")
        return 1
    else:
        logger.info("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º ETL!")
        return 0


if __name__ == "__main__":
    import sys
    sys.exit(main())