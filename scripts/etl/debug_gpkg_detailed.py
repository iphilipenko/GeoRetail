#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GPKG —Ñ–∞–π–ª—É
"""

import geopandas as gpd
from pathlib import Path
import sys

def analyze_gpkg_detailed(file_path):
    """–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ GPKG —Ñ–∞–π–ª—É"""
    print(f"üîç –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É: {file_path}")
    
    try:
        # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
        print("üìñ –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É...")
        gdf = gpd.read_file(file_path)
        
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {len(gdf):,} –∑–∞–ø–∏—Å—ñ–≤")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏ ({len(gdf.columns)}): {list(gdf.columns)}")
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø–∏—Å—É
        print("\nüîé –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Å:")
        first_record = gdf.iloc[0]
        
        for col in gdf.columns:
            value = first_record[col]
            if col == 'geometry':
                print(f"  üìç {col}: {type(value)} - {value.geom_type if hasattr(value, 'geom_type') else 'Unknown'}")
                if hasattr(value, 'wkt'):
                    wkt_preview = value.wkt[:100] + "..." if len(value.wkt) > 100 else value.wkt
                    print(f"      WKT: {wkt_preview}")
            else:
                value_str = str(value)[:100] + "..." if len(str(value)) > 100 else str(value)
                print(f"  üìù {col}: {value_str}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó
        print(f"\nüåç –ê–Ω–∞–ª—ñ–∑ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó:")
        geom_col = 'geometry' if 'geometry' in gdf.columns else 'geom' if 'geom' in gdf.columns else None
        
        if geom_col:
            print(f"  ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó: {geom_col}")
            print(f"  üìê –¢–∏–ø–∏ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó: {gdf[geom_col].geom_type.value_counts().to_dict()}")
            
            # –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó WKT
            test_geom = gdf.iloc[0][geom_col]
            try:
                wkt = test_geom.wkt
                print(f"  ‚úÖ WKT –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î: {len(wkt)} —Å–∏–º–≤–æ–ª—ñ–≤")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ WKT –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
        else:
            print("  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        
        # –ê–Ω–∞–ª—ñ–∑ OSM ID
        print(f"\nüÜî OSM ID –∞–Ω–∞–ª—ñ–∑:")
        if 'osm_id' in gdf.columns:
            osm_ids = gdf['osm_id'].dropna()
            print(f"  ‚úÖ OSM ID –∑–Ω–∞–π–¥–µ–Ω–æ: {len(osm_ids)} –∑–∞–ø–∏—Å—ñ–≤")
            print(f"  üìä –ü—Ä–∏–∫–ª–∞–¥–∏: {osm_ids.head().tolist()}")
        else:
            print("  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ osm_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        
        # –ê–Ω–∞–ª—ñ–∑ –Ω–∞–∑–≤
        print(f"\nüìõ –ê–Ω–∞–ª—ñ–∑ –Ω–∞–∑–≤:")
        name_fields = ['name', 'name:en', 'name:uk']
        for field in name_fields:
            if field in gdf.columns:
                names = gdf[field].dropna()
                print(f"  ‚úÖ {field}: {len(names)} –∑–∞–ø–∏—Å—ñ–≤")
                if len(names) > 0:
                    print(f"      –ü—Ä–∏–∫–ª–∞–¥–∏: {names.head(3).tolist()}")
            else:
                print(f"  ‚ùå {field}: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # –¢–µ—Å—Ç –Ω–∞—à–æ—ó –ª–æ–≥—ñ–∫–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å—É
        print(f"\nüß™ –¢–µ—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å—É:")
        test_record = first_record.to_dict()
        
        # –Ü–º—ñ—Ç—É—î–º–æ –Ω–∞—à—É –ª–æ–≥—ñ–∫—É
        has_geom = test_record.get('geom') or test_record.get('geometry')
        print(f"  üåç –ì–µ–æ–º–µ—Ç—Ä—ñ—è –ø—Ä–∏—Å—É—Ç–Ω—è: {bool(has_geom)}")
        
        if has_geom:
            geom = test_record.get('geom') or test_record.get('geometry')
            try:
                if hasattr(geom, 'wkt'):
                    geom_wkt = geom.wkt
                    print(f"  ‚úÖ WKT –æ—Ç—Ä–∏–º–∞–Ω–æ: {len(geom_wkt)} —Å–∏–º–≤–æ–ª—ñ–≤")
                    
                    # –¢–µ—Å—Ç H3
                    if hasattr(geom, 'centroid'):
                        centroid = geom.centroid
                        lat, lon = centroid.y, centroid.x
                        print(f"  üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ü–µ–Ω—Ç—Ä—É: {lat:.6f}, {lon:.6f}")
                    else:
                        print(f"  üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {geom.y:.6f}, {geom.x:.6f}")
                        
                    print(f"  ‚úÖ –ó–∞–ø–∏—Å –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π!")
                    
                else:
                    print(f"  ‚ùå –ì–µ–æ–º–µ—Ç—Ä—ñ—è –Ω–µ –º–∞—î –∞—Ç—Ä–∏–±—É—Ç .wkt")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó: {e}")
        else:
            print(f"  ‚ùå –ó–∞–ø–∏—Å –±—É–¥–µ –≤—ñ–¥–∫–∏–Ω—É—Ç–∏–π - –Ω–µ–º–∞—î –≥–µ–æ–º–µ—Ç—Ä—ñ—ó")
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ—Å—Ç—ñ:")
        for col in gdf.columns:
            if col != 'geometry':
                non_null = gdf[col].count()
                percentage = (non_null / len(gdf)) * 100
                print(f"  üìä {col}: {non_null:,} ({percentage:.1f}%)")
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É –•–µ—Ä—Å–æ–Ω
    file_path = Path(r"C:\OSMData\UA_MAP_Kherson.gpkg")
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        sys.exit(1)
    
    analyze_gpkg_detailed(file_path)