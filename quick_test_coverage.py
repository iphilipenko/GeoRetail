# quick_test_coverage.py\n\"\"\"\nüßÆ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç Coverage Calculator (–±–µ–∑ –ë–î)\n–¢–µ—Å—Ç—É—î —Ç—ñ–ª—å–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è H3\n\"\"\"\n\nimport sys\nfrom pathlib import Path\n\n# –î–æ–¥–∞—î–º–æ src –¥–æ path\nsrc_path = Path(__file__).parent / \"src\"\nsys.path.insert(0, str(src_path))\n\nprint(\"üßÆ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è H3 Coverage Calculator\")\nprint(\"=\"*50)\n\ntry:\n    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –Ω–∞—à–æ–≥–æ API\n    from api.endpoints.h3_modal_endpoints import (\n        calculate_optimal_rings,\n        get_area_coverage,\n        ANALYSIS_CONFIGS\n    )\n    print(\"‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ H3 —Ñ—É–Ω–∫—Ü—ñ—ó\")\nexcept ImportError as e:\n    print(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}\")\n    sys.exit(1)\n\nprint(\"\\nüî¨ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π...\")\n\n# –¢–µ—Å—Ç 1: calculate_optimal_rings\nprint(\"\\n1Ô∏è‚É£ –¢–µ—Å—Ç calculate_optimal_rings:\")\ntest_cases = [\n    (10, 0.5),   # H3-10, target 0.5 –∫–º¬≤\n    (9, 1.0),    # H3-9, target 1.0 –∫–º¬≤\n    (8, 2.0),    # H3-8, target 2.0 –∫–º¬≤\n    (7, 5.0),    # H3-7, target 5.0 –∫–º¬≤\n]\n\nfor resolution, target_area in test_cases:\n    try:\n        rings = calculate_optimal_rings(resolution, target_area)\n        actual_area = get_area_coverage(resolution, rings)\n        print(f\"   H3-{resolution}, target {target_area} –∫–º¬≤ ‚Üí {rings} –∫–æ–ª–µ—Ü, actual {actual_area} –∫–º¬≤\")\n    except Exception as e:\n        print(f\"   ‚ùå H3-{resolution}: {e}\")\n\n# –¢–µ—Å—Ç 2: get_area_coverage\nprint(\"\\n2Ô∏è‚É£ –¢–µ—Å—Ç get_area_coverage:\")\ncoverage_tests = [\n    (10, 0),  # –¢–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä\n    (10, 1),  # +1 –∫–æ–ª—å—Ü–æ\n    (10, 2),  # +2 –∫–æ–ª—å—Ü–∞\n    (10, 3),  # +3 –∫–æ–ª—å—Ü–∞\n]\n\nfor resolution, rings in coverage_tests:\n    try:\n        area = get_area_coverage(resolution, rings)\n        hexagon_count = 1 + 3 * rings * (rings + 1) if rings > 0 else 1\n        print(f\"   H3-{resolution}, {rings} –∫–æ–ª–µ—Ü ‚Üí {area} –∫–º¬≤, {hexagon_count} –≥–µ–∫—Å–∞–≥–æ–Ω–æ–≤\")\n    except Exception as e:\n        print(f\"   ‚ùå H3-{resolution}, {rings} –∫–æ–ª–µ—Ü: {e}\")\n\n# –¢–µ—Å—Ç 3: ANALYSIS_CONFIGS\nprint(\"\\n3Ô∏è‚É£ –¢–µ—Å—Ç ANALYSIS_CONFIGS:\")\nfor analysis_type, config in ANALYSIS_CONFIGS.items():\n    try:\n        name = config.get('name', 'N/A')\n        target_area = config.get('target_area_km2', 0)\n        max_rings = config.get('max_rings', 0)\n        print(f\"   {analysis_type}: {name}\")\n        print(f\"      ‚îî‚îÄ Target: {target_area} –∫–º¬≤, Max rings: {max_rings}\")\n        \n        # –¢–µ—Å—Ç—É—î–º–æ –¥–ª—è H3-10\n        optimal_rings = calculate_optimal_rings(10, target_area)\n        optimal_rings = min(optimal_rings, max_rings)\n        actual_area = get_area_coverage(10, optimal_rings)\n        print(f\"      ‚îî‚îÄ H3-10: {optimal_rings} –∫–æ–ª–µ—Ü ‚Üí {actual_area} –∫–º¬≤\")\n        \n    except Exception as e:\n        print(f\"   ‚ùå {analysis_type}: {e}\")\n\n# –¢–µ—Å—Ç 4: –ì—Ä–∞–Ω–∏—á–Ω—ñ –≤–∏–ø–∞–¥–∫–∏\nprint(\"\\n4Ô∏è‚É£ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤:\")\nedge_cases = [\n    (10, 0),     # 0 –∫–æ–ª–µ—Ü\n    (7, 10),     # –ë–∞–≥–∞—Ç–æ –∫–æ–ª–µ—Ü\n    (10, 0.001), # –î—É–∂–µ –º–∞–ª–∞ –ø–ª–æ—â–∞\n    (7, 100),    # –î—É–∂–µ –≤–µ–ª–∏–∫–∞ –ø–ª–æ—â–∞\n]\n\nfor resolution, target_area in edge_cases:\n    try:\n        rings = calculate_optimal_rings(resolution, target_area)\n        actual_area = get_area_coverage(resolution, rings)\n        print(f\"   H3-{resolution}, target {target_area} –∫–º¬≤ ‚Üí {rings} –∫–æ–ª–µ—Ü, {actual_area} –∫–º¬≤\")\n    except Exception as e:\n        print(f\"   ‚ùå H3-{resolution}, target {target_area}: {e}\")\n\n# –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü—ñ—è API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\nprint(\"\\n5Ô∏è‚É£ –°–∏–º—É–ª—è—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\")\n\n# –°–∏–º—É–ª—é—î–º–æ coverage calculator endpoint\ndef simulate_coverage_calculator(resolution, rings):\n    try:\n        area_coverage = get_area_coverage(resolution, rings)\n        hexagon_count = 1 + 3 * rings * (rings + 1) if rings > 0 else 1\n        radius_estimate = int((area_coverage / 3.14159) ** 0.5 * 1000)\n        \n        # –ì–µ–Ω–µ—Ä—É—î–º–æ breakdown\n        coverage_breakdown = []\n        for r in range(0, min(rings + 1, 6)):\n            step_area = get_area_coverage(resolution, r)\n            step_count = 1 + 3 * r * (r + 1) if r > 0 else 1\n            description = f\"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≥–µ–∫—Å–∞–≥–æ–Ω\" if r == 0 else f\"+{r} –∫–æ–ª—å—Ü–æ{'–∞' if r < 5 else '–µ—Ü'}\"\n            \n            coverage_breakdown.append({\n                \"rings\": r,\n                \"area_km2\": step_area,\n                \"hexagon_count\": step_count,\n                \"description\": description\n            })\n        \n        return {\n            \"resolution\": resolution,\n            \"rings\": rings,\n            \"total_area_km2\": area_coverage,\n            \"total_hexagon_count\": hexagon_count,\n            \"radius_estimate_m\": radius_estimate,\n            \"coverage_breakdown\": coverage_breakdown,\n            \"recommendations\": {\n                \"pedestrian_range\": rings <= 3,\n                \"car_accessible\": rings >= 2,\n                \"market_overview\": rings >= 4\n            }\n        }\n    except Exception as e:\n        return {\"error\": str(e)}\n\n# –¢–µ—Å—Ç—É—î–º–æ —Å–∏–º—É–ª—è—Ü—ñ—é\nprint(\"   –°–∏–º—É–ª—è—Ü—ñ—è /coverage-calculator?resolution=10&rings=2:\")\nresult = simulate_coverage_calculator(10, 2)\nif \"error\" not in result:\n    print(f\"   ‚úÖ Resolution: {result['resolution']}\")\n    print(f\"   ‚úÖ Rings: {result['rings']}\")\n    print(f\"   ‚úÖ Total area: {result['total_area_km2']} –∫–º¬≤\")\n    print(f\"   ‚úÖ Hexagon count: {result['total_hexagon_count']}\")\n    print(f\"   ‚úÖ Radius estimate: {result['radius_estimate_m']} –º\")\n    print(f\"   ‚úÖ Breakdown steps: {len(result['coverage_breakdown'])}\")\n    print(f\"   ‚úÖ Recommendations: {result['recommendations']}\")\nelse:\n    print(f\"   ‚ùå Error: {result['error']}\")\n\nprint(\"\\n\" + \"=\"*50)\nprint(\"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø:\")\nprint(\"‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó H3 –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ\")\nprint(\"‚úÖ Coverage calculator –ª–æ–≥—ñ–∫–∞ –≥–æ—Ç–æ–≤–∞\")\nprint(\"‚úÖ Analysis configs –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ\")\nprint(\"‚úÖ API —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ñ\")\nprint(\"\\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ API!\")\nprint(\"üí° –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: python check_imports.py\")\nprint(\"üí° –ü–æ—Ç—ñ–º: python start_test_server.py\")\n